
package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
parser code
{:

    public ArrayList<String> errores = new ArrayList<String>();
    

    public void syntax_error(Symbol cur_token){
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    
:};

terminal 
    Linea,
    Int,
    Break,
    Case,
    Char,
    Const,
    Coma,
    Continue,
    Default,
    Do,
    For,
    Long,
    Return,
    Short,
    Switch,
    Void,
    While,           
    If,
    Else,
    Relacionales,
    Identificador,
    Literal,
    Parentesis_a,
    Parentesis_c,
    Corchete_a,
    Corchete_c,
    Llave_a,
    Llave_c,
    Main,
    Scolon,
    Numero,
    Asignacion,
    Or,
    And,
    Not,
    Mas,
    Menos,
    Multiplicacion,
    Division,
    Modulo,
    Unarios,
    Write,
    Read,
    Dos_puntos,
    LEX_ERROR
    ;


non  terminal INICIO, 
MAIN, 
DECLARACION_FUNCION, 
SENTENCIA, 
LLAMADA_FUNCION, 
DECLARACION_VAR, 
IF, 
IF_ELSE,
WHILE, 
DO_WHILE,
FOR,
PARAMS, 
PARAMS_AUX,
TIPO, 
LONG , 
SHORT,
EXP, 
SENTENCIA_BOOLEANA,
Op_booleano , 
SENTENCIA_FOR, 
DECLARACION_FOR, 
OPERADOR,OP_RELACIONALES , 
CONST_AUX , 
DECLARACION_VAR_AUX,
DECL_AUX,
PARAMS_LL_AUX,
PARAMS_LL,
LLAMADA_FUNCION_AUX,
PARAMS_PREV,
PARAMS_LL_PREV,
LINEA_AUX,
DECLARACIONES_INICIALES,
DECLARACIONES_INICIALES_AUX,
ASIGNACION_VAR,
DECLARACIONES_INICIALES_AUX_AUX,
SHORT_AUX,
SHORT_AUX_AUX,
LONG_AUX,
LONG_AUX_AUX,
CONTINUE,
LANG_FUNCS,
ARRAY_AUX,
ARRAY_AUX_AUX,
NUMERO_AUX,
ARRAY_EXP_AUX,
SW,
DEFAULT_AUX,
DEFAULT_OPTIONS,
CASE_AUX,
CASE_OPTIONS,
OPTIONS,
ARRAY_AUX_CONST,
VARS_AUX,
VARS_AUX_AUX,
PARAMS_PREV_VARS,
PARAMS_VARS,
MAIN_2,
ASIG_SEM,
IDENTIFICADOR_AUX_SEM,
CLOSE_PAR_SEM,
WHILE_SEMANTIC,
BREAK,
DO_SEMANTIC,
FOR_SEMANTIC
ESECOLON_DEKLARAZION
IDENTIFICADOR_FUNCION,
;

precedence right Asignacion;
precedence left Or;
precedence left And;
precedence nonassoc Relacionales;
precedence left Mas, Menos;
precedence left Multiplicacion, Division, Modulo;
precedence right Not;
 
start with INICIO;

DECLARACIONES_INICIALES::= DECLARACIONES_INICIALES Const:c TIPO:t PARAMS_LL:p DECLARACION_VAR_AUX:decl Scolon:scolon    |
                            DECLARACIONES_INICIALES TIPO:t PARAMS_LL:p DECLARACIONES_INICIALES_AUX:decl|
                            DECLARACIONES_INICIALES Const TIPO error DECLARACION_VAR_AUX Scolon|
                            DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX |    
                            DECLARACIONES_INICIALES error Scolon
                            | ;

VARS_AUX ::= Identificador:i VARS_AUX_AUX {: SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); :} |  ;
VARS_AUX_AUX::= Coma| ;

PARAMS_PREV_VARS::= PARAMS | ;

PARAMS_VARS::= TIPO Identificador PARAMS_AUX {:System.out.println("asd");:} ;

PARAMS_AUX_VARS::= Coma PARAMS | ;

DECLARACIONES_INICIALES_AUX::=  Scolon {:SemanticStructures.getInstance().insertarTS(); :}
                                | Parentesis_a PARAMS_PREV CLOSE_PAR_SEM Llave_a DECLARACION_VAR SENTENCIA Llave_c 
                                | Parentesis_a PARAMS_PREV CLOSE_PAR_SEM Scolon 
                                | Parentesis_a PARAMS_PREV Parentesis_c error  DECLARACION_VAR SENTENCIA Llave_c 
                                |  ;
CLOSE_PAR_SEM::=  Parentesis_c  {:SemanticStructures.getInstance().recuerdaFuncion(); :}  ;

INICIO::= DECLARACIONES_INICIALES MAIN | DECLARACIONES_INICIALES LLAMADA_FUNCION Scolon ;

MAIN ::= TIPO MAIN_2 Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c |TIPO MAIN_2 Parentesis_a Parentesis_c error Llave_c|  ;


MAIN_2 ::= Main {: SemanticStructures.getInstance().wipeStack(); :} ;

LLAMADA_FUNCION::= IDENTIFICADOR_FUNCION Parentesis_a PARAMS_LL_PREV Parentesis_c {: SemanticStructures.getInstance().evalFuncion(); :}| LANG_FUNCS;

IDENTIFICADOR_FUNCION::= Identificador:i {: SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); :};

SENTENCIA::=    
                IF DECL_AUX |
                IF_ELSE  DECL_AUX |
                WHILE DECL_AUX|
                DO_WHILE Scolon DECL_AUX |
                FOR DECL_AUX |
                SW DECL_AUX|
                LLAMADA_FUNCION Scolon DECL_AUX |
                ASIGNACION_VAR DECL_AUX|
                CONTINUE Scolon DECL_AUX |
                Return EXP Scolon DECL_AUX|
                Return Scolon DECL_AUX|
                BREAK Scolon DECL_AUX|
                Linea SENTENCIA |
                error  DECL_AUX {: System.out.println("Error pero"); :} |                
                ;

ASIGNACION_VAR::=  ASIG_SEM Asignacion EXP Scolon {:  SemanticStructures.getInstance().evalBinary();  :} | ASIG_SEM Unarios Scolon {: System.out.println("Unarios") ; :} | ASIG_SEM Asignacion error Scolon | ASIG_SEM error EXP Scolon ;

ASIG_SEM::= Identificador:i {: SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),iright,ileft); :} ;
DECL_AUX::= SENTENCIA  ;

BREAK::= Break:i  {: SemanticStructures.getInstance().checkWhile(String.valueOf(i),iright,ileft);  :} ;

CONST_AUX::= Const | ;

DECLARACION_VAR::=  Const TIPO Identificador DECLARACION_VAR_AUX Scolon DECLARACION_VAR | TIPO VARS_AUX ESECOLON_DEKLARAZION DECLARACION_VAR  |    ;

ESECOLON_DEKLARAZION::= Scolon {:SemanticStructures.getInstance().insertarTS(); :};


DECLARACION_VAR_AUX::=  Asignacion EXP | Asignacion error  ;


IF ::= If Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c |
       If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c|
        If Parentesis_a  EXP Parentesis_c error ;



OP_RELACIONALES::= Relacionales | And | Or | Not;

IF_ELSE::=  IF  Else Llave_a SENTENCIA Llave_c | IF error Llave_a SENTENCIA Llave_c ;

WHILE::= WHILE_SEMANTIC Parentesis_a EXP Parentesis_c  Llave_a  SENTENCIA  Llave_c {: SemanticStructures.getInstance().reduceWhileCount(); :} | WHILE_SEMANTIC Parentesis_a error  Parentesis_c  Llave_a  SENTENCIA  Llave_c| WHILE_SEMANTIC Parentesis_a EXP Parentesis_c  error  SENTENCIA  Llave_c  ;

WHILE_SEMANTIC::= While {: SemanticStructures.getInstance().addWhileCount(); :} ;

DO_WHILE::= DO_SEMANTIC Llave_a  SENTENCIA  Llave_c  While Parentesis_a EXP Parentesis_c {: SemanticStructures.getInstance().reduceWhileCount(); :} |
            DO_SEMANTIC Llave_a  SENTENCIA  Llave_c  While Parentesis_a error Parentesis_c {: SemanticStructures.getInstance().reduceWhileCount(); :} ;

DO_SEMANTIC::= Do {: SemanticStructures.getInstance().addWhileCount(); :} ;
CONTINUE::= Continue:i  {: SemanticStructures.getInstance().checkWhile(String.valueOf(i),iright,ileft);  :} ;

FOR::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c |
       For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c|
        For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c ;
FOR_SEMANTIC::= For {: SemanticStructures.getInstance().addWhileCount(); :} ;


SENTENCIA_FOR ::=
    TIPO Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR |
    Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR|
    error Scolon EXP Scolon DECLARACION_FOR|
    TIPO Identificador Asignacion EXP Scolon error Scolon DECLARACION_FOR
    

;

DECLARACION_FOR ::= 
    Identificador Asignacion Numero |
    Identificador Unarios | 
    Unarios Identificador|
    error
;

EXP::= EXP OPERADOR EXP | Parentesis_a EXP Parentesis_c | OP_RELACIONALES EXP | EXP OP_RELACIONALES EXP | 
    Identificador:i {: SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),iright,ileft); :}| 
    Literal:i {: SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),iright,ileft); :} |
    Numero:i {: SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),iright,ileft); :} | 
    OPERADOR| LLAMADA_FUNCION | OP_RELACIONALES ;



OPERADOR::= Mas:i {: SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); :}  |
 Menos:i {: SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); :} | 
 Multiplicacion:i {: SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); :} | 
 Division:i {: SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); :} | 
 Modulo:i {: SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); :};

PARAMS_PREV::= PARAMS  | ;

PARAMS::= TIPO IDENTIFICADOR_AUX_SEM PARAMS_AUX  ;

IDENTIFICADOR_AUX_SEM::=  Identificador:i {: SemanticStructures.getInstance().recuerdaId(String.valueOf(i),iright,ileft);  SemanticStructures.getInstance().addCountParams(); :} ;

PARAMS_AUX::= Coma PARAMS | ;

PARAMS_LL_PREV::= PARAMS_LL | ;

PARAMS_LL::= Identificador:i  PARAMS_LL_AUX {: SemanticStructures.getInstance().recuerdaId(String.valueOf(i),iright,ileft) ; :} ;

PARAMS_LL_AUX::= Coma PARAMS_LL:i {: RESULT = i; :} | ;

TIPO::= Int:t {: RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft); :} | Char:t {: RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft); :} | Void:t {: RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft);:} | SHORT | LONG;

SHORT::= Short SHORT_AUX ;

SHORT_AUX::= Int | Short SHORT_AUX_AUX ; 

SHORT_AUX_AUX::=  Int | ;

LONG::= Long LONG_AUX;

LONG_AUX::= Int | Long LONG_AUX_AUX |;

LONG_AUX_AUX::= Int | ;

LANG_FUNCS ::=Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon| Write Parentesis_a PARAMS_LL Parentesis_c Scolon  ;

SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a 
     CASE_AUX
    DEFAULT_AUX
Llave_c;

DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS | Default error DEFAULT_OPTIONS | ; 

DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c | SENTENCIA;

CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS| CASE_AUX Case error CASE_OPTIONS | ;

CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c | SENTENCIA ;

OPTIONS::= Literal | Identificador | Identificador Asignacion Literal ;

