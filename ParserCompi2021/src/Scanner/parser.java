
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\042\010\000\002\042" +
    "\006\000\002\042\010\000\002\042\006\000\002\042\005" +
    "\000\002\042\002\000\002\067\004\000\002\067\002\000" +
    "\002\070\003\000\002\070\002\000\002\071\003\000\002" +
    "\071\002\000\002\072\005\000\002\043\003\000\002\043" +
    "\011\000\002\043\006\000\002\043\011\000\002\043\002" +
    "\000\002\076\003\000\002\002\004\000\002\002\005\000" +
    "\002\003\012\000\002\003\010\000\002\003\002\000\002" +
    "\073\003\000\002\006\006\000\002\006\003\000\002\104" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\006\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\004\000\002\005\002\000\002\044\006\000\002\044\005" +
    "\000\002\044\006\000\002\044\006\000\002\105\003\000" +
    "\002\074\003\000\002\033\003\000\002\100\003\000\002" +
    "\031\003\000\002\031\002\000\002\007\010\000\002\007" +
    "\006\000\002\007\002\000\002\103\003\000\002\032\004" +
    "\000\002\032\004\000\002\010\011\000\002\010\015\000" +
    "\002\010\011\000\002\010\007\000\002\111\003\000\002" +
    "\107\003\000\002\106\003\000\002\106\002\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\012\011\000\002\012\011\000\002\012\011\000" +
    "\002\110\003\000\002\077\003\000\002\013\012\000\002" +
    "\013\012\000\002\101\003\000\002\052\003\000\002\014" +
    "\011\000\002\014\011\000\002\014\011\000\002\102\003" +
    "\000\002\025\012\000\002\025\011\000\002\025\007\000" +
    "\002\025\012\000\002\026\005\000\002\026\004\000\002" +
    "\026\004\000\002\026\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\004\000\002\022\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\037\003\000\002\037\002\000\002\015\005" +
    "\000\002\075\003\000\002\016\004\000\002\016\002\000" +
    "\002\040\003\000\002\040\002\000\002\035\004\000\002" +
    "\034\004\000\002\034\002\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\021\004\000\002\046\003\000\002\046\004\000" +
    "\002\047\003\000\002\047\002\000\002\020\004\000\002" +
    "\050\003\000\002\050\004\000\002\050\002\000\002\051" +
    "\003\000\002\051\002\000\002\053\007\000\002\053\007" +
    "\000\002\060\012\000\002\061\005\000\002\061\005\000" +
    "\002\061\002\000\002\062\005\000\002\062\003\000\002" +
    "\063\007\000\002\063\006\000\002\063\002\000\002\064" +
    "\005\000\002\064\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\030\002\ufffb\003\ufffb\005\ufffb\010\ufffb\011" +
    "\ufffb\017\ufffb\021\ufffb\023\ufffb\030\ufffb\055\ufffb\056\ufffb" +
    "\001\002\000\004\002\u012d\001\002\000\030\002\uffe9\003" +
    "\016\005\015\010\012\011\007\017\014\021\006\023\024" +
    "\030\020\055\022\056\013\001\002\000\006\005\u012a\021" +
    "\u0129\001\002\000\014\005\015\010\012\017\014\021\006" +
    "\023\024\001\002\000\010\003\uff87\030\uff87\040\uff87\001" +
    "\002\000\004\002\uffed\001\002\000\010\003\uff8a\030\uff8a" +
    "\040\uff8a\001\002\000\004\032\u011d\001\002\000\014\003" +
    "\uff7e\005\u011a\017\u0119\030\uff7e\040\uff7e\001\002\000\010" +
    "\003\uff8b\030\uff8b\040\uff8b\001\002\000\004\041\u0117\001" +
    "\002\000\010\003\045\030\032\040\046\001\002\000\004" +
    "\032\uffe5\001\002\000\004\041\043\001\002\000\004\032" +
    "\037\001\002\000\032\027\uffe6\033\uffe6\036\uffe6\041\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\001\002\000\010\003\uff89\030\uff89\040\uff89" +
    "\001\002\000\004\032\027\001\002\000\010\003\uff88\030" +
    "\uff88\040\uff88\001\002\000\006\030\032\033\uff8f\001\002" +
    "\000\004\033\036\001\002\000\004\033\uff90\001\002\000" +
    "\042\002\uff8c\003\uff8c\005\uff8c\010\uff8c\011\uff8c\012\034" +
    "\017\uff8c\021\uff8c\023\uff8c\030\uff8c\032\uff8c\033\uff8c\041" +
    "\uff8c\043\uff8c\055\uff8c\056\uff8c\001\002\000\040\002\uff8e" +
    "\003\uff8e\005\uff8e\010\uff8e\011\uff8e\017\uff8e\021\uff8e\023" +
    "\uff8e\030\uff8e\032\uff8e\033\uff8e\041\uff8e\043\uff8e\055\uff8e" +
    "\056\uff8e\001\002\000\004\030\032\001\002\000\040\002" +
    "\uff8d\003\uff8d\005\uff8d\010\uff8d\011\uff8d\017\uff8d\021\uff8d" +
    "\023\uff8d\030\uff8d\032\uff8d\033\uff8d\041\uff8d\043\uff8d\055" +
    "\uff8d\056\uff8d\001\002\000\032\027\uffe7\033\uffe7\036\uffe7" +
    "\041\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\001\002\000\004\030\032\001\002" +
    "\000\004\033\041\001\002\000\004\041\042\001\002\000" +
    "\032\027\uff7a\033\uff7a\036\uff7a\041\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\001" +
    "\002\000\004\002\uffec\001\002\000\004\032\u010f\001\002" +
    "\000\034\002\uffef\003\uffef\005\uffef\010\uffef\011\uffef\017" +
    "\uffef\021\uffef\023\uffef\030\uffef\032\051\041\052\055\uffef" +
    "\056\uffef\001\002\000\004\032\uffe8\001\002\000\034\002" +
    "\uffef\003\uffef\005\uffef\010\uffef\011\uffef\017\uffef\021\uffef" +
    "\023\uffef\030\uffef\032\051\041\052\055\uffef\056\uffef\001" +
    "\002\000\030\002\uffff\003\uffff\005\uffff\010\uffff\011\uffff" +
    "\017\uffff\021\uffff\023\uffff\030\uffff\055\uffff\056\uffff\001" +
    "\002\000\016\005\015\010\012\017\014\021\006\023\024" +
    "\033\uff95\001\002\000\030\002\ufff3\003\ufff3\005\ufff3\010" +
    "\ufff3\011\ufff3\017\ufff3\021\ufff3\023\ufff3\030\ufff3\055\ufff3" +
    "\056\ufff3\001\002\000\004\033\uff96\001\002\000\004\033" +
    "\064\001\002\000\004\030\057\001\002\000\006\012\061" +
    "\033\uff91\001\002\000\006\012\uff93\033\uff93\001\002\000" +
    "\004\033\uff94\001\002\000\014\005\015\010\012\017\014" +
    "\021\006\023\024\001\002\000\004\033\uff92\001\002\000" +
    "\006\036\u010a\041\u0109\001\002\000\010\003\065\036\uffee" +
    "\041\uffee\001\002\000\052\003\uffca\004\uffca\005\015\006" +
    "\uffca\010\012\011\066\013\uffca\015\uffca\016\uffca\017\014" +
    "\020\uffca\021\006\022\uffca\023\024\024\uffca\025\uffca\030" +
    "\uffca\037\uffca\055\uffca\056\uffca\001\002\000\014\005\015" +
    "\010\012\017\014\021\006\023\024\001\002\000\036\003" +
    "\117\004\115\006\103\013\075\015\121\016\077\020\116" +
    "\022\120\024\124\025\114\030\105\037\uffd7\055\022\056" +
    "\013\001\002\000\004\030\032\001\002\000\004\041\073" +
    "\001\002\000\052\003\uffca\004\uffca\005\015\006\uffca\010" +
    "\012\011\066\013\uffca\015\uffca\016\uffca\017\014\020\uffca" +
    "\021\006\022\uffca\023\024\024\uffca\025\uffca\030\uffca\037" +
    "\uffca\055\uffca\056\uffca\001\002\000\052\003\uffc9\004\uffc9" +
    "\005\uffc9\006\uffc9\010\uffc9\011\uffc9\013\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\030\uffc9\037\uffc9\055\uffc9\056\uffc9\001\002\000" +
    "\036\003\uffcb\004\uffcb\006\uffcb\013\uffcb\015\uffcb\016\uffcb" +
    "\020\uffcb\022\uffcb\024\uffcb\025\uffcb\030\uffcb\037\uffcb\055" +
    "\uffcb\056\uffcb\001\002\000\004\041\uffb2\001\002\000\004" +
    "\041\377\001\002\000\004\032\324\001\002\000\042\003" +
    "\117\004\115\006\103\007\uffd7\013\075\014\uffd7\015\121" +
    "\016\077\020\116\022\120\024\124\025\114\030\105\037" +
    "\uffd7\055\022\056\013\001\002\000\042\003\117\004\115" +
    "\006\103\007\uffd7\013\075\014\uffd7\015\121\016\077\020" +
    "\116\022\120\024\124\025\114\030\105\037\uffd7\055\022" +
    "\056\013\001\002\000\004\037\321\001\002\000\004\041" +
    "\uffcf\001\002\000\004\032\302\001\002\000\012\003\uffd1" +
    "\032\uffe5\043\uffd1\054\uffd1\001\002\000\042\003\117\004" +
    "\115\006\103\007\uffd7\013\075\014\uffd7\015\121\016\077" +
    "\020\116\022\120\024\124\025\114\030\105\037\uffd7\055" +
    "\022\056\013\001\002\000\004\041\277\001\002\000\042" +
    "\003\117\004\115\006\103\007\uffd7\013\075\014\uffd7\015" +
    "\121\016\077\020\116\022\120\024\124\025\114\030\105" +
    "\037\uffd7\055\022\056\013\001\002\000\010\003\264\043" +
    "\265\054\263\001\002\000\004\041\261\001\002\000\004" +
    "\041\257\001\002\000\004\032\234\001\002\000\042\003" +
    "\117\004\115\006\103\007\uffd7\013\075\014\uffd7\015\121" +
    "\016\077\020\116\022\120\024\124\025\114\030\105\037" +
    "\uffd7\055\022\056\013\001\002\000\042\027\137\030\141" +
    "\031\154\032\134\041\227\042\135\044\144\045\140\046" +
    "\145\047\136\050\152\051\155\052\147\053\153\055\022" +
    "\056\013\001\002\000\042\003\117\004\115\006\103\007" +
    "\uffd7\013\075\014\uffd7\015\121\016\077\020\116\022\120" +
    "\024\124\025\114\030\105\037\uffd7\055\022\056\013\001" +
    "\002\000\004\032\167\001\002\000\004\036\uffb3\001\002" +
    "\000\004\036\127\001\002\000\042\003\117\004\115\006" +
    "\103\007\uffd7\013\075\014\uffd7\015\121\016\077\020\116" +
    "\022\120\024\124\025\114\030\105\037\uffd7\055\022\056" +
    "\013\001\002\000\004\032\uffb6\001\002\000\010\007\uffe1" +
    "\014\uffe1\037\uffe1\001\002\000\010\007\uffd0\014\uffd0\037" +
    "\uffd0\001\002\000\036\003\117\004\115\006\103\013\075" +
    "\015\121\016\077\020\116\022\120\024\124\025\114\030" +
    "\105\037\uffd7\055\022\056\013\001\002\000\004\037\131" +
    "\001\002\000\004\024\132\001\002\000\004\032\133\001" +
    "\002\000\042\003\151\027\137\030\141\031\154\032\134" +
    "\042\135\044\144\045\140\046\145\047\136\050\152\051" +
    "\155\052\147\053\153\055\022\056\013\001\002\000\040" +
    "\027\137\030\141\031\154\032\134\042\135\044\144\045" +
    "\140\046\145\047\136\050\152\051\155\052\147\053\153" +
    "\055\022\056\013\001\002\000\032\027\uff9f\033\uff9f\036" +
    "\uff9f\041\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\001\002\000\046\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\036\uff9b\041\uff9b\042\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\055\uff9b\056\uff9b\001\002\000\046\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\036\uffbe\041\uffbe\042" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\055\uffbe\056\uffbe\001\002\000\046\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\036\uffbd\041\uffbd" +
    "\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\055\uffbd\056\uffbd\001\002\000\034" +
    "\027\uffa1\032\uffe5\033\uffa1\036\uffa1\041\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\001\002\000\032\027\uff9d\033\uff9d\036\uff9d\041\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\001\002\000\026\027\137\033\164\044\144\045" +
    "\140\046\145\047\136\050\152\051\155\052\147\053\153" +
    "\001\002\000\046\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\036\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\055\uffbc\056" +
    "\uffbc\001\002\000\046\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\036\uffbb\041\uffbb\042\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb" +
    "\056\uffbb\001\002\000\032\027\uff9e\033\uff9e\036\uff9e\041" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\001\002\000\046\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\036\uff98\041\uff98\042\uff98\044\uff98" +
    "\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053" +
    "\uff98\055\uff98\056\uff98\001\002\000\046\027\137\030\141" +
    "\031\154\032\134\033\uff9c\036\uff9c\041\uff9c\042\135\044" +
    "\144\045\140\046\145\047\136\050\152\051\155\052\147" +
    "\053\153\055\022\056\013\001\002\000\004\033\156\001" +
    "\002\000\046\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\036\uff9a\041\uff9a\042\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a" +
    "\001\002\000\046\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\036\uff97\041\uff97\042\uff97\044\uff97\045\uff97\046\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\055\uff97\056" +
    "\uff97\001\002\000\032\027\uffa0\033\uffa0\036\uffa0\041\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\001\002\000\046\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\036\uff99\041\uff99\042\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\055\uff99\056\uff99\001\002\000\004\041\uffb4\001\002\000" +
    "\032\027\137\033\uffa3\036\uffa3\041\uffa3\044\144\045\140" +
    "\046\145\047\136\050\152\051\155\052\147\053\153\001" +
    "\002\000\040\027\137\030\141\031\154\032\134\042\135" +
    "\044\144\045\140\046\145\047\136\050\152\051\155\052" +
    "\147\053\153\055\022\056\013\001\002\000\040\027\137" +
    "\030\141\031\154\032\134\042\135\044\144\045\140\046" +
    "\145\047\136\050\152\051\155\052\147\053\153\055\022" +
    "\056\013\001\002\000\032\027\137\033\uffa2\036\uffa2\041" +
    "\uffa2\044\144\045\140\046\145\047\136\050\152\051\155" +
    "\052\147\053\153\001\002\000\032\027\137\033\uffa5\036" +
    "\uffa5\041\uffa5\044\144\045\140\046\145\047\136\050\152" +
    "\051\155\052\147\053\153\001\002\000\004\041\uffb5\001" +
    "\002\000\026\027\137\033\166\044\144\045\140\046\145" +
    "\047\136\050\152\051\155\052\147\053\153\001\002\000" +
    "\032\027\uffa4\033\uffa4\036\uffa4\041\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\001" +
    "\002\000\006\030\171\031\170\001\002\000\004\033\uff6e" +
    "\001\002\000\006\033\uff6d\043\223\001\002\000\004\033" +
    "\173\001\002\000\004\036\174\001\002\000\010\007\uff71" +
    "\014\uff71\037\uff71\001\002\000\010\007\176\014\177\037" +
    "\uff76\001\002\000\006\003\213\031\212\001\002\000\006" +
    "\003\202\057\203\001\002\000\004\037\201\001\002\000" +
    "\042\003\uff79\004\uff79\006\uff79\007\uff79\013\uff79\014\uff79" +
    "\015\uff79\016\uff79\020\uff79\022\uff79\024\uff79\025\uff79\030" +
    "\uff79\037\uff79\055\uff79\056\uff79\001\002\000\040\003\117" +
    "\004\115\006\103\013\075\015\121\016\077\020\116\022" +
    "\120\024\124\025\114\030\105\036\206\037\uffd7\055\022" +
    "\056\013\001\002\000\040\003\117\004\115\006\103\013" +
    "\075\015\121\016\077\020\116\022\120\024\124\025\114" +
    "\030\105\036\206\037\uffd7\055\022\056\013\001\002\000" +
    "\004\037\uff78\001\002\000\004\037\uff74\001\002\000\036" +
    "\003\117\004\115\006\103\013\075\015\121\016\077\020" +
    "\116\022\120\024\124\025\114\030\105\037\uffd7\055\022" +
    "\056\013\001\002\000\004\037\210\001\002\000\004\037" +
    "\uff75\001\002\000\004\037\uff77\001\002\000\004\057\221" +
    "\001\002\000\044\003\117\004\115\006\103\007\uffd7\013" +
    "\075\014\uffd7\015\121\016\077\020\116\022\120\024\124" +
    "\025\114\030\105\036\215\037\uffd7\055\022\056\013\001" +
    "\002\000\010\007\uff6f\014\uff6f\037\uff6f\001\002\000\036" +
    "\003\117\004\115\006\103\013\075\015\121\016\077\020" +
    "\116\022\120\024\124\025\114\030\105\037\uffd7\055\022" +
    "\056\013\001\002\000\010\007\uff72\014\uff72\037\uff72\001" +
    "\002\000\004\037\220\001\002\000\010\007\uff70\014\uff70" +
    "\037\uff70\001\002\000\044\003\117\004\115\006\103\007" +
    "\uffd7\013\075\014\uffd7\015\121\016\077\020\116\022\120" +
    "\024\124\025\114\030\105\036\215\037\uffd7\055\022\056" +
    "\013\001\002\000\010\007\uff73\014\uff73\037\uff73\001\002" +
    "\000\004\031\224\001\002\000\004\033\uff6c\001\002\000" +
    "\010\007\uffd8\014\uffd8\037\uffd8\001\002\000\026\027\137" +
    "\041\231\044\144\045\140\046\145\047\136\050\152\051" +
    "\155\052\147\053\153\001\002\000\042\003\117\004\115" +
    "\006\103\007\uffd7\013\075\014\uffd7\015\121\016\077\020" +
    "\116\022\120\024\124\025\114\030\105\037\uffd7\055\022" +
    "\056\013\001\002\000\010\007\uffdb\014\uffdb\037\uffdb\001" +
    "\002\000\042\003\117\004\115\006\103\007\uffd7\013\075" +
    "\014\uffd7\015\121\016\077\020\116\022\120\024\124\025" +
    "\114\030\105\037\uffd7\055\022\056\013\001\002\000\010" +
    "\007\uffdc\014\uffdc\037\uffdc\001\002\000\010\007\uffd9\014" +
    "\uffd9\037\uffd9\001\002\000\042\003\236\027\137\030\141" +
    "\031\154\032\134\042\135\044\144\045\140\046\145\047" +
    "\136\050\152\051\155\052\147\053\153\055\022\056\013" +
    "\001\002\000\030\027\137\033\244\036\uffbf\044\144\045" +
    "\140\046\145\047\136\050\152\051\155\052\147\053\153" +
    "\001\002\000\004\033\237\001\002\000\004\036\240\001" +
    "\002\000\036\003\117\004\115\006\103\013\075\015\121" +
    "\016\077\020\116\022\120\024\124\025\114\030\105\037" +
    "\uffd7\055\022\056\013\001\002\000\004\037\242\001\002" +
    "\000\042\003\uffc4\004\uffc4\006\uffc4\007\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\024\uffc4\025\uffc4" +
    "\030\uffc4\037\uffc4\055\uffc4\056\uffc4\001\002\000\004\036" +
    "\246\001\002\000\006\003\245\036\uffc0\001\002\000\042" +
    "\003\uffc3\004\uffc3\006\uffc3\007\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\020\uffc3\022\uffc3\024\uffc3\025\uffc3\030\uffc3" +
    "\037\uffc3\055\uffc3\056\uffc3\001\002\000\036\003\117\004" +
    "\115\006\103\013\075\015\121\016\077\020\116\022\120" +
    "\024\124\025\114\030\105\037\uffd7\055\022\056\013\001" +
    "\002\000\004\037\250\001\002\000\044\003\uffc1\004\uffc1" +
    "\006\uffc1\007\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1\037\uffc1" +
    "\055\uffc1\056\uffc1\001\002\000\044\003\uffc6\004\uffc6\006" +
    "\uffc6\007\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6" +
    "\022\uffc6\024\uffc6\025\uffc6\026\253\030\uffc6\037\uffc6\055" +
    "\uffc6\056\uffc6\001\002\000\004\036\254\001\002\000\004" +
    "\036\uffc2\001\002\000\036\003\117\004\115\006\103\013" +
    "\075\015\121\016\077\020\116\022\120\024\124\025\114" +
    "\030\105\037\uffd7\055\022\056\013\001\002\000\004\037" +
    "\256\001\002\000\042\003\uffc5\004\uffc5\006\uffc5\007\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\024" +
    "\uffc5\025\uffc5\030\uffc5\037\uffc5\055\uffc5\056\uffc5\001\002" +
    "\000\042\003\117\004\115\006\103\007\uffd7\013\075\014" +
    "\uffd7\015\121\016\077\020\116\022\120\024\124\025\114" +
    "\030\105\037\uffd7\055\022\056\013\001\002\000\010\007" +
    "\uffda\014\uffda\037\uffda\001\002\000\042\003\117\004\115" +
    "\006\103\007\uffd7\013\075\014\uffd7\015\121\016\077\020" +
    "\116\022\120\024\124\025\114\030\105\037\uffd7\055\022" +
    "\056\013\001\002\000\010\007\uffe2\014\uffe2\037\uffe2\001" +
    "\002\000\004\041\uffd2\001\002\000\040\027\137\030\141" +
    "\031\154\032\134\042\135\044\144\045\140\046\145\047" +
    "\136\050\152\051\155\052\147\053\153\055\022\056\013" +
    "\001\002\000\042\003\271\027\137\030\141\031\154\032" +
    "\134\042\135\044\144\045\140\046\145\047\136\050\152" +
    "\051\155\052\147\053\153\055\022\056\013\001\002\000" +
    "\004\041\267\001\002\000\042\003\uffd5\004\uffd5\006\uffd5" +
    "\007\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\022" +
    "\uffd5\024\uffd5\025\uffd5\030\uffd5\037\uffd5\055\uffd5\056\uffd5" +
    "\001\002\000\026\027\137\041\273\044\144\045\140\046" +
    "\145\047\136\050\152\051\155\052\147\053\153\001\002" +
    "\000\004\041\272\001\002\000\042\003\uffd4\004\uffd4\006" +
    "\uffd4\007\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4" +
    "\022\uffd4\024\uffd4\025\uffd4\030\uffd4\037\uffd4\055\uffd4\056" +
    "\uffd4\001\002\000\042\003\uffd6\004\uffd6\006\uffd6\007\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\022\uffd6\024" +
    "\uffd6\025\uffd6\030\uffd6\037\uffd6\055\uffd6\056\uffd6\001\002" +
    "\000\026\027\137\041\275\044\144\045\140\046\145\047" +
    "\136\050\152\051\155\052\147\053\153\001\002\000\042" +
    "\003\uffd3\004\uffd3\006\uffd3\007\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\020\uffd3\022\uffd3\024\uffd3\025\uffd3\030\uffd3" +
    "\037\uffd3\055\uffd3\056\uffd3\001\002\000\010\007\uffe0\014" +
    "\uffe0\037\uffe0\001\002\000\042\003\117\004\115\006\103" +
    "\007\uffd7\013\075\014\uffd7\015\121\016\077\020\116\022" +
    "\120\024\124\025\114\030\105\037\uffd7\055\022\056\013" +
    "\001\002\000\010\007\uffdf\014\uffdf\037\uffdf\001\002\000" +
    "\010\007\uffe4\014\uffe4\037\uffe4\001\002\000\042\003\304" +
    "\027\137\030\141\031\154\032\134\042\135\044\144\045" +
    "\140\046\145\047\136\050\152\051\155\052\147\053\153" +
    "\055\022\056\013\001\002\000\026\027\137\033\311\044" +
    "\144\045\140\046\145\047\136\050\152\051\155\052\147" +
    "\053\153\001\002\000\004\033\305\001\002\000\004\036" +
    "\306\001\002\000\036\003\117\004\115\006\103\013\075" +
    "\015\121\016\077\020\116\022\120\024\124\025\114\030" +
    "\105\037\uffd7\055\022\056\013\001\002\000\004\037\310" +
    "\001\002\000\042\003\uffb9\004\uffb9\006\uffb9\007\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9\022\uffb9\024\uffb9" +
    "\025\uffb9\030\uffb9\037\uffb9\055\uffb9\056\uffb9\001\002\000" +
    "\006\003\316\036\uffb7\001\002\000\004\036\313\001\002" +
    "\000\036\003\117\004\115\006\103\013\075\015\121\016" +
    "\077\020\116\022\120\024\124\025\114\030\105\037\uffd7" +
    "\055\022\056\013\001\002\000\004\037\315\001\002\000" +
    "\042\003\uffba\004\uffba\006\uffba\007\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\020\uffba\022\uffba\024\uffba\025\uffba\030" +
    "\uffba\037\uffba\055\uffba\056\uffba\001\002\000\036\003\117" +
    "\004\115\006\103\013\075\015\121\016\077\020\116\022" +
    "\120\024\124\025\114\030\105\037\uffd7\055\022\056\013" +
    "\001\002\000\004\037\320\001\002\000\042\003\uffb8\004" +
    "\uffb8\006\uffb8\007\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\020\uffb8\022\uffb8\024\uffb8\025\uffb8\030\uffb8\037\uffb8\055" +
    "\uffb8\056\uffb8\001\002\000\030\002\ufff0\003\ufff0\005\ufff0" +
    "\010\ufff0\011\ufff0\017\ufff0\021\ufff0\023\ufff0\030\ufff0\055" +
    "\ufff0\056\ufff0\001\002\000\010\007\uffde\014\uffde\037\uffde" +
    "\001\002\000\010\007\uffe3\014\uffe3\037\uffe3\001\002\000" +
    "\020\003\330\005\015\010\012\017\014\021\006\023\024" +
    "\030\327\001\002\000\004\033\370\001\002\000\004\030" +
    "\356\001\002\000\004\043\350\001\002\000\006\033\332" +
    "\041\331\001\002\000\040\027\137\030\141\031\154\032" +
    "\134\042\135\044\144\045\140\046\145\047\136\050\152" +
    "\051\155\052\147\053\153\055\022\056\013\001\002\000" +
    "\004\036\333\001\002\000\036\003\117\004\115\006\103" +
    "\013\075\015\121\016\077\020\116\022\120\024\124\025" +
    "\114\030\105\037\uffd7\055\022\056\013\001\002\000\004" +
    "\037\335\001\002\000\042\003\uffb0\004\uffb0\006\uffb0\007" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\022\uffb0" +
    "\024\uffb0\025\uffb0\030\uffb0\037\uffb0\055\uffb0\056\uffb0\001" +
    "\002\000\026\027\137\041\337\044\144\045\140\046\145" +
    "\047\136\050\152\051\155\052\147\053\153\001\002\000" +
    "\010\003\340\030\343\054\342\001\002\000\004\033\uffa6" +
    "\001\002\000\004\033\uffab\001\002\000\004\030\347\001" +
    "\002\000\006\043\345\054\344\001\002\000\004\033\uffa8" +
    "\001\002\000\004\042\346\001\002\000\004\033\uffa9\001" +
    "\002\000\004\033\uffa7\001\002\000\040\027\137\030\141" +
    "\031\154\032\134\042\135\044\144\045\140\046\145\047" +
    "\136\050\152\051\155\052\147\053\153\055\022\056\013" +
    "\001\002\000\026\027\137\041\352\044\144\045\140\046" +
    "\145\047\136\050\152\051\155\052\147\053\153\001\002" +
    "\000\040\027\137\030\141\031\154\032\134\042\135\044" +
    "\144\045\140\046\145\047\136\050\152\051\155\052\147" +
    "\053\153\055\022\056\013\001\002\000\026\027\137\041" +
    "\354\044\144\045\140\046\145\047\136\050\152\051\155" +
    "\052\147\053\153\001\002\000\010\003\340\030\343\054" +
    "\342\001\002\000\004\033\uffac\001\002\000\004\043\357" +
    "\001\002\000\040\027\137\030\141\031\154\032\134\042" +
    "\135\044\144\045\140\046\145\047\136\050\152\051\155" +
    "\052\147\053\153\055\022\056\013\001\002\000\026\027" +
    "\137\041\361\044\144\045\140\046\145\047\136\050\152" +
    "\051\155\052\147\053\153\001\002\000\042\003\363\027" +
    "\137\030\141\031\154\032\134\042\135\044\144\045\140" +
    "\046\145\047\136\050\152\051\155\052\147\053\153\055" +
    "\022\056\013\001\002\000\026\027\137\041\366\044\144" +
    "\045\140\046\145\047\136\050\152\051\155\052\147\053" +
    "\153\001\002\000\004\041\364\001\002\000\010\003\340" +
    "\030\343\054\342\001\002\000\004\033\uffaa\001\002\000" +
    "\010\003\340\030\343\054\342\001\002\000\004\033\uffad" +
    "\001\002\000\006\003\372\036\371\001\002\000\036\003" +
    "\117\004\115\006\103\013\075\015\121\016\077\020\116" +
    "\022\120\024\124\025\114\030\105\037\uffd7\055\022\056" +
    "\013\001\002\000\036\003\117\004\115\006\103\013\075" +
    "\015\121\016\077\020\116\022\120\024\124\025\114\030" +
    "\105\037\uffd7\055\022\056\013\001\002\000\004\037\374" +
    "\001\002\000\042\003\uffaf\004\uffaf\006\uffaf\007\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\020\uffaf\022\uffaf\024\uffaf" +
    "\025\uffaf\030\uffaf\037\uffaf\055\uffaf\056\uffaf\001\002\000" +
    "\004\037\376\001\002\000\042\003\uffb1\004\uffb1\006\uffb1" +
    "\007\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\020\uffb1\022" +
    "\uffb1\024\uffb1\025\uffb1\030\uffb1\037\uffb1\055\uffb1\056\uffb1" +
    "\001\002\000\042\003\117\004\115\006\103\007\uffd7\013" +
    "\075\014\uffd7\015\121\016\077\020\116\022\120\024\124" +
    "\025\114\030\105\037\uffd7\055\022\056\013\001\002\000" +
    "\010\007\uffdd\014\uffdd\037\uffdd\001\002\000\004\030\u0102" +
    "\001\002\000\004\043\u0104\001\002\000\004\041\u0107\001" +
    "\002\000\042\003\u0106\027\137\030\141\031\154\032\134" +
    "\042\135\044\144\045\140\046\145\047\136\050\152\051" +
    "\155\052\147\053\153\055\022\056\013\001\002\000\026" +
    "\027\137\041\uffc8\044\144\045\140\046\145\047\136\050" +
    "\152\051\155\052\147\053\153\001\002\000\004\041\uffc7" +
    "\001\002\000\052\003\uffca\004\uffca\005\015\006\uffca\010" +
    "\012\011\066\013\uffca\015\uffca\016\uffca\017\014\020\uffca" +
    "\021\006\022\uffca\023\024\024\uffca\025\uffca\030\uffca\037" +
    "\uffca\055\uffca\056\uffca\001\002\000\036\003\uffcc\004\uffcc" +
    "\006\uffcc\013\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\024" +
    "\uffcc\025\uffcc\030\uffcc\037\uffcc\055\uffcc\056\uffcc\001\002" +
    "\000\030\002\ufff1\003\ufff1\005\ufff1\010\ufff1\011\ufff1\017" +
    "\ufff1\021\ufff1\023\ufff1\030\ufff1\055\ufff1\056\ufff1\001\002" +
    "\000\052\003\uffca\004\uffca\005\015\006\uffca\010\012\011" +
    "\066\013\uffca\015\uffca\016\uffca\017\014\020\uffca\021\006" +
    "\022\uffca\023\024\024\uffca\025\uffca\030\uffca\037\uffca\055" +
    "\uffca\056\uffca\001\002\000\036\003\117\004\115\006\103" +
    "\013\075\015\121\016\077\020\116\022\120\024\124\025" +
    "\114\030\105\037\uffd7\055\022\056\013\001\002\000\004" +
    "\037\u010d\001\002\000\030\002\ufff2\003\ufff2\005\ufff2\010" +
    "\ufff2\011\ufff2\017\ufff2\021\ufff2\023\ufff2\030\ufff2\055\ufff2" +
    "\056\ufff2\001\002\000\030\002\ufffd\003\ufffd\005\ufffd\010" +
    "\ufffd\011\ufffd\017\ufffd\021\ufffd\023\ufffd\030\ufffd\055\ufffd" +
    "\056\ufffd\001\002\000\004\033\u0110\001\002\000\006\003" +
    "\u0112\036\u0111\001\002\000\052\003\uffca\004\uffca\005\015" +
    "\006\uffca\010\012\011\066\013\uffca\015\uffca\016\uffca\017" +
    "\014\020\uffca\021\006\022\uffca\023\024\024\uffca\025\uffca" +
    "\030\uffca\037\uffca\055\uffca\056\uffca\001\002\000\004\037" +
    "\u0113\001\002\000\004\002\uffea\001\002\000\036\003\117" +
    "\004\115\006\103\013\075\015\121\016\077\020\116\022" +
    "\120\024\124\025\114\030\105\037\uffd7\055\022\056\013" +
    "\001\002\000\004\037\u0116\001\002\000\004\002\uffeb\001" +
    "\002\000\030\002\ufffc\003\ufffc\005\ufffc\010\ufffc\011\ufffc" +
    "\017\ufffc\021\ufffc\023\ufffc\030\ufffc\055\ufffc\056\ufffc\001" +
    "\002\000\010\003\uff81\030\uff81\040\uff81\001\002\000\012" +
    "\003\uff7c\005\u011c\030\uff7c\040\uff7c\001\002\000\010\003" +
    "\uff80\030\uff80\040\uff80\001\002\000\010\003\uff7f\030\uff7f" +
    "\040\uff7f\001\002\000\010\003\uff7d\030\uff7d\040\uff7d\001" +
    "\002\000\006\030\032\033\uff8f\001\002\000\004\033\u011f" +
    "\001\002\000\004\041\u0120\001\002\000\032\027\uff7b\033" +
    "\uff7b\036\uff7b\041\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\050\uff7b\051\uff7b\052\uff7b\053\uff7b\001\002\000\006\003" +
    "\u0122\030\032\001\002\000\004\043\u0104\001\002\000\004" +
    "\043\u0104\001\002\000\004\041\u0125\001\002\000\030\002" +
    "\000\003\000\005\000\010\000\011\000\017\000\021\000" +
    "\023\000\030\000\055\000\056\000\001\002\000\004\041" +
    "\u0127\001\002\000\030\002\ufffe\003\ufffe\005\ufffe\010\ufffe" +
    "\011\ufffe\017\ufffe\021\ufffe\023\ufffe\030\ufffe\055\ufffe\056" +
    "\ufffe\001\002\000\010\003\uff86\030\uff86\040\uff86\001\002" +
    "\000\012\003\uff82\005\u012c\030\uff82\040\uff82\001\002\000" +
    "\010\003\uff85\030\uff85\040\uff85\001\002\000\010\003\uff84" +
    "\030\uff84\040\uff84\001\002\000\010\003\uff83\030\uff83\040" +
    "\uff83\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\020\003\010\006\020\017\016\020\007\021\025" +
    "\053\022\104\024\001\001\000\004\046\u0127\001\001\000" +
    "\010\017\u0120\020\007\021\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u0117\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\046\073\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\030\040\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\032\001\001\000\002\001\001\000\004\035" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u010d\001\001\000\002\001\001\000\004\043\047\001" +
    "\001\000\002\001\001\000\014\015\052\017\054\020\007" +
    "\021\025\037\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\062\001\001\000\004\075\055\001\001" +
    "\000\004\016\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\061\017\054\020\007\021\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\066\017\067\020\007\021\025\001\001\000\010" +
    "\017\u0100\020\007\021\025\001\001\000\040\005\101\006" +
    "\106\010\105\012\077\013\111\014\122\044\100\052\075" +
    "\053\022\060\107\074\110\077\103\100\112\101\121\104" +
    "\024\001\001\000\004\035\070\001\001\000\004\103\071" +
    "\001\001\000\012\007\073\017\067\020\007\021\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\125\006" +
    "\106\010\105\012\077\013\111\014\122\033\322\044\100" +
    "\052\075\053\022\060\107\074\110\077\103\100\112\101" +
    "\121\104\024\001\001\000\042\005\125\006\106\010\105" +
    "\012\077\013\111\014\122\033\321\044\100\052\075\053" +
    "\022\060\107\074\110\077\103\100\112\101\121\104\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\125\006\106\010\105" +
    "\012\077\013\111\014\122\033\300\044\100\052\075\053" +
    "\022\060\107\074\110\077\103\100\112\101\121\104\024" +
    "\001\001\000\002\001\001\000\042\005\125\006\106\010" +
    "\105\012\077\013\111\014\122\033\275\044\100\052\075" +
    "\053\022\060\107\074\110\077\103\100\112\101\121\104" +
    "\024\001\001\000\004\105\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\232\006" +
    "\106\010\105\012\077\013\111\014\122\044\100\052\075" +
    "\053\022\060\107\074\110\077\103\100\112\101\121\104" +
    "\024\001\001\000\016\006\141\022\225\027\145\030\147" +
    "\053\022\104\024\001\001\000\042\005\125\006\106\010" +
    "\105\012\077\013\111\014\122\033\224\044\100\052\075" +
    "\053\022\060\107\074\110\077\103\100\112\101\121\104" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\125\006\106\010\105\012\077\013" +
    "\111\014\122\033\124\044\100\052\075\053\022\060\107" +
    "\074\110\077\103\100\112\101\121\104\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\127\006\106\010\105\012\077\013\111\014\122\044" +
    "\100\052\075\053\022\060\107\074\110\077\103\100\112" +
    "\101\121\104\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\141\022\142\027\145" +
    "\030\147\053\022\104\024\001\001\000\016\006\141\022" +
    "\164\027\145\030\147\053\022\104\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\157" +
    "\030\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\141\022\156" +
    "\027\145\030\147\053\022\104\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\157\030" +
    "\160\001\001\000\016\006\141\022\162\027\145\030\147" +
    "\053\022\104\024\001\001\000\016\006\141\022\161\027" +
    "\145\030\147\053\022\104\024\001\001\000\006\027\157" +
    "\030\160\001\001\000\006\027\157\030\160\001\001\000" +
    "\002\001\001\000\006\027\157\030\160\001\001\000\002" +
    "\001\001\000\004\065\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\174\001\001\000\004\061\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\204\006\106\010\105\012\077\013\111\014" +
    "\122\044\100\052\075\053\022\060\107\062\210\074\110" +
    "\077\103\100\112\101\121\104\024\001\001\000\042\005" +
    "\204\006\106\010\105\012\077\013\111\014\122\044\100" +
    "\052\075\053\022\060\107\062\203\074\110\077\103\100" +
    "\112\101\121\104\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\206\006\106\010\105\012\077\013" +
    "\111\014\122\044\100\052\075\053\022\060\107\074\110" +
    "\077\103\100\112\101\121\104\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\213\006\106\010\105\012\077\013\111\014" +
    "\122\044\100\052\075\053\022\060\107\064\215\074\110" +
    "\077\103\100\112\101\121\104\024\001\001\000\002\001" +
    "\001\000\040\005\216\006\106\010\105\012\077\013\111" +
    "\014\122\044\100\052\075\053\022\060\107\074\110\077" +
    "\103\100\112\101\121\104\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\213\006" +
    "\106\010\105\012\077\013\111\014\122\044\100\052\075" +
    "\053\022\060\107\064\221\074\110\077\103\100\112\101" +
    "\121\104\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\157\030" +
    "\160\001\001\000\042\005\125\006\106\010\105\012\077" +
    "\013\111\014\122\033\227\044\100\052\075\053\022\060" +
    "\107\074\110\077\103\100\112\101\121\104\024\001\001" +
    "\000\002\001\001\000\042\005\125\006\106\010\105\012" +
    "\077\013\111\014\122\033\231\044\100\052\075\053\022" +
    "\060\107\074\110\077\103\100\112\101\121\104\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\141" +
    "\022\234\027\145\030\147\053\022\104\024\001\001\000" +
    "\010\027\157\030\160\106\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\240\006\106\010\105\012" +
    "\077\013\111\014\122\044\100\052\075\053\022\060\107" +
    "\074\110\077\103\100\112\101\121\104\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\246\006\106\010" +
    "\105\012\077\013\111\014\122\044\100\052\075\053\022" +
    "\060\107\074\110\077\103\100\112\101\121\104\024\001" +
    "\001\000\004\107\250\001\001\000\002\001\001\000\004" +
    "\111\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\254\006\106\010\105\012\077\013\111\014\122" +
    "\044\100\052\075\053\022\060\107\074\110\077\103\100" +
    "\112\101\121\104\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\125\006\106\010\105\012\077\013" +
    "\111\014\122\033\257\044\100\052\075\053\022\060\107" +
    "\074\110\077\103\100\112\101\121\104\024\001\001\000" +
    "\002\001\001\000\042\005\125\006\106\010\105\012\077" +
    "\013\111\014\122\033\261\044\100\052\075\053\022\060" +
    "\107\074\110\077\103\100\112\101\121\104\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\141\022" +
    "\273\027\145\030\147\053\022\104\024\001\001\000\016" +
    "\006\141\022\267\027\145\030\147\053\022\104\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\157" +
    "\030\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\157\030\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\125\006\106\010" +
    "\105\012\077\013\111\014\122\033\277\044\100\052\075" +
    "\053\022\060\107\074\110\077\103\100\112\101\121\104" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\141\022\302\027\145\030\147\053\022\104\024\001" +
    "\001\000\010\027\157\030\160\110\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\306\006\106\010" +
    "\105\012\077\013\111\014\122\044\100\052\075\053\022" +
    "\060\107\074\110\077\103\100\112\101\121\104\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\313\006\106\010\105\012" +
    "\077\013\111\014\122\044\100\052\075\053\022\060\107" +
    "\074\110\077\103\100\112\101\121\104\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\316\006\106" +
    "\010\105\012\077\013\111\014\122\044\100\052\075\053" +
    "\022\060\107\074\110\077\103\100\112\101\121\104\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\325" +
    "\020\007\021\025\025\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\141\022\335\027\145\030\147\053\022\104\024\001" +
    "\001\000\002\001\001\000\040\005\333\006\106\010\105" +
    "\012\077\013\111\014\122\044\100\052\075\053\022\060" +
    "\107\074\110\077\103\100\112\101\121\104\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\157\030" +
    "\160\001\001\000\004\026\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\141\022\350\027\145\030\147\053" +
    "\022\104\024\001\001\000\006\027\157\030\160\001\001" +
    "\000\016\006\141\022\352\027\145\030\147\053\022\104" +
    "\024\001\001\000\006\027\157\030\160\001\001\000\004" +
    "\026\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\141\022\357\027\145\030\147\053\022\104\024" +
    "\001\001\000\006\027\157\030\160\001\001\000\016\006" +
    "\141\022\361\027\145\030\147\053\022\104\024\001\001" +
    "\000\006\027\157\030\160\001\001\000\002\001\001\000" +
    "\004\026\364\001\001\000\002\001\001\000\004\026\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\005" +
    "\374\006\106\010\105\012\077\013\111\014\122\044\100" +
    "\052\075\053\022\060\107\074\110\077\103\100\112\101" +
    "\121\104\024\001\001\000\040\005\372\006\106\010\105" +
    "\012\077\013\111\014\122\044\100\052\075\053\022\060" +
    "\107\074\110\077\103\100\112\101\121\104\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\125\006\106\010\105\012\077" +
    "\013\111\014\122\033\377\044\100\052\075\053\022\060" +
    "\107\074\110\077\103\100\112\101\121\104\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0102\001" +
    "\001\000\002\001\001\000\016\006\141\022\u0104\027\145" +
    "\030\147\053\022\104\024\001\001\000\006\027\157\030" +
    "\160\001\001\000\002\001\001\000\012\007\u0107\017\067" +
    "\020\007\021\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\u010a\017\067\020\007\021\025\001\001" +
    "\000\040\005\u010b\006\106\010\105\012\077\013\111\014" +
    "\122\044\100\052\075\053\022\060\107\074\110\077\103" +
    "\100\112\101\121\104\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\u0113\017\067\020\007\021\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\u0114" +
    "\006\106\010\105\012\077\013\111\014\122\044\100\052" +
    "\075\053\022\060\107\074\110\077\103\100\112\101\121" +
    "\104\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\030\040\u011d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u0122\001\001\000" +
    "\004\032\u0125\001\001\000\004\032\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();
    

    public void syntax_error(Symbol cur_token){
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO PARAMS_LL DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object scolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO PARAMS_LL DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARS_AUX ::= Identificador VARS_AUX_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARS_AUX_AUX ::= Coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARS_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS_PREV_VARS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS_PREV_VARS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS_VARS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;
		System.out.println("asd");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_VARS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().insertarTS(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV CLOSE_PAR_SEM Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV CLOSE_PAR_SEM Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c error DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CLOSE_PAR_SEM ::= Parentesis_c 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().recuerdaFuncion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLOSE_PAR_SEM",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= DECLARACIONES_INICIALES LLAMADA_FUNCION Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= TIPO MAIN_2 Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= TIPO MAIN_2 Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN_2 ::= Main 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().wipeStack(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN_2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LLAMADA_FUNCION ::= IDENTIFICADOR_FUNCION Parentesis_a PARAMS_LL_PREV Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().evalFuncion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDENTIFICADOR_FUNCION ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_FUNCION",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= LLAMADA_FUNCION Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= CONTINUE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= Return EXP Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= BREAK Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;
		 System.out.println("Error pero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION_VAR ::= ASIG_SEM Asignacion EXP Scolon 
            {
              Object RESULT =null;
		  SemanticStructures.getInstance().comoUstedQuiera();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION_VAR ::= ASIG_SEM UNARIOS_SEM Scolon 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().evalUnary(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION_VAR ::= ASIG_SEM Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION_VAR ::= ASIG_SEM error EXP Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UNARIOS_SEM ::= Unarios 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNARIOS_SEM",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIG_SEM ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_SEM",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BREAK ::= Break 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().checkWhile(String.valueOf(i),iright,ileft);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VAR ::= Const TIPO Identificador DECLARACION_VAR_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_VAR ::= TIPO PARAMS_LL ESECOLON_DEKLARAZION DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ESECOLON_DEKLARAZION ::= Scolon 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().insertarTS(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESECOLON_DEKLARAZION",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= If Parentesis_a EXP Parentesis_c_if Llave_a SENTENCIA Llave_c_if 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().writeLabelIf("endIf"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= If Parentesis_a EXP Parentesis_c_if Llave_a SENTENCIA Llave_c_if Else_if Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().writeLabelIf("endElse"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= If Parentesis_a EXP Parentesis_c error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Else_if ::= Else 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().writeLabelIf("else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else_if",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Llave_c_if ::= Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llave_c_if",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Parentesis_c_if ::= Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().writeLabelIf("if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parentesis_c_if",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Parentesis_c_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parentesis_c_if",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WHILE ::= WHILE_SEMANTIC Parentesis_a EXP Parentesis_c_while Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().reduceWhileCount(); SemanticStructures.getInstance().writeLabelIf("whileEnd"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WHILE ::= WHILE_SEMANTIC Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WHILE ::= WHILE_SEMANTIC Parentesis_a EXP Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Parentesis_c_while ::= Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().writeLabelIf("whileStart");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parentesis_c_while",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WHILE_SEMANTIC ::= While 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().addWhileCount(); SemanticStructures.getInstance().writeLabelIf("while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_SEMANTIC",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DO_WHILE ::= DO_SEMANTIC Llave_a SENTENCIA Llave_c While Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().reduceWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DO_WHILE ::= DO_SEMANTIC Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().reduceWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DO_SEMANTIC ::= Do 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().addWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_SEMANTIC",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTINUE ::= Continue 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().checkWhile(String.valueOf(i),iright,ileft);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FOR_SEMANTIC ::= For 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().addWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_SEMANTIC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_FOR ::= error Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon error Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().evalBinary(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP OP_RELACIONALES EXP 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().evalBinary(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= Literal 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= OP_RELACIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERADOR ::= Mas 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERADOR ::= Menos 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERADOR ::= Multiplicacion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERADOR ::= Division 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERADOR ::= Modulo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMS ::= TIPO IDENTIFICADOR_AUX_SEM PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IDENTIFICADOR_AUX_SEM ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),iright,ileft);  SemanticStructures.getInstance().addCountParams(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_AUX_SEM",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),iright,ileft) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO ::= Int 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPO ::= Char 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TIPO ::= Void 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LONG_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
