
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\042\010\000\002\042" +
    "\006\000\002\042\010\000\002\042\006\000\002\042\005" +
    "\000\002\042\002\000\002\067\004\000\002\067\002\000" +
    "\002\070\003\000\002\070\002\000\002\071\003\000\002" +
    "\071\002\000\002\072\005\000\002\043\003\000\002\043" +
    "\011\000\002\043\006\000\002\043\011\000\002\043\002" +
    "\000\002\076\003\000\002\002\004\000\002\002\005\000" +
    "\002\003\012\000\002\003\010\000\002\003\002\000\002" +
    "\073\003\000\002\006\006\000\002\006\003\000\002\077" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\005\005\000\002\005\004\000\002\005\004\000\002" +
    "\005\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\074\003\000" +
    "\002\033\003\000\002\031\003\000\002\031\002\000\002" +
    "\007\010\000\002\007\006\000\002\007\002\000\002\032" +
    "\004\000\002\032\004\000\002\010\011\000\002\010\011" +
    "\000\002\010\007\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\011\007\000\002" +
    "\011\007\000\002\012\011\000\002\012\011\000\002\012" +
    "\011\000\002\013\012\000\002\013\012\000\002\052\004" +
    "\000\002\014\011\000\002\014\011\000\002\014\011\000" +
    "\002\025\012\000\002\025\011\000\002\025\007\000\002" +
    "\025\012\000\002\026\005\000\002\026\004\000\002\026" +
    "\004\000\002\026\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\004\000\002\022\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\037\003\000\002\037\002\000\002\015\005\000" +
    "\002\075\003\000\002\016\004\000\002\016\002\000\002" +
    "\040\003\000\002\040\002\000\002\035\004\000\002\034" +
    "\004\000\002\034\002\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\021\004\000\002\046\003\000\002\046\004\000\002" +
    "\047\003\000\002\047\002\000\002\020\004\000\002\050" +
    "\003\000\002\050\004\000\002\050\002\000\002\051\003" +
    "\000\002\051\002\000\002\053\007\000\002\053\007\000" +
    "\002\060\012\000\002\061\005\000\002\061\005\000\002" +
    "\061\002\000\002\062\005\000\002\062\003\000\002\063" +
    "\007\000\002\063\006\000\002\063\002\000\002\064\005" +
    "\000\002\064\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\030\002\ufffb\003\ufffb\005\ufffb\010\ufffb\011" +
    "\ufffb\017\ufffb\021\ufffb\023\ufffb\030\ufffb\055\ufffb\056\ufffb" +
    "\001\002\000\004\002\u012b\001\002\000\030\002\uffe9\003" +
    "\016\005\015\010\012\011\007\017\014\021\006\023\024" +
    "\030\020\055\022\056\013\001\002\000\006\005\u0128\021" +
    "\u0127\001\002\000\014\005\015\010\012\017\014\021\006" +
    "\023\024\001\002\000\012\003\uff91\030\uff91\040\uff91\041" +
    "\uff91\001\002\000\004\002\uffed\001\002\000\012\003\uff94" +
    "\030\uff94\040\uff94\041\uff94\001\002\000\004\032\u011b\001" +
    "\002\000\016\003\uff88\005\u0118\017\u0117\030\uff88\040\uff88" +
    "\041\uff88\001\002\000\012\003\uff95\030\uff95\040\uff95\041" +
    "\uff95\001\002\000\004\041\u0115\001\002\000\010\003\045" +
    "\030\031\040\046\001\002\000\004\032\uffe5\001\002\000" +
    "\004\041\043\001\002\000\004\032\037\001\002\000\030" +
    "\027\uffe6\033\uffe6\041\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000\012" +
    "\003\uff93\030\uff93\040\uff93\041\uff93\001\002\000\004\032" +
    "\027\001\002\000\012\003\uff92\030\uff92\040\uff92\041\uff92" +
    "\001\002\000\006\030\031\033\uff99\001\002\000\004\033" +
    "\036\001\002\000\042\002\uff96\003\uff96\005\uff96\010\uff96" +
    "\011\uff96\012\034\017\uff96\021\uff96\023\uff96\030\uff96\032" +
    "\uff96\033\uff96\041\uff96\043\uff96\055\uff96\056\uff96\001\002" +
    "\000\004\033\uff9a\001\002\000\040\002\uff98\003\uff98\005" +
    "\uff98\010\uff98\011\uff98\017\uff98\021\uff98\023\uff98\030\uff98" +
    "\032\uff98\033\uff98\041\uff98\043\uff98\055\uff98\056\uff98\001" +
    "\002\000\004\030\031\001\002\000\040\002\uff97\003\uff97" +
    "\005\uff97\010\uff97\011\uff97\017\uff97\021\uff97\023\uff97\030" +
    "\uff97\032\uff97\033\uff97\041\uff97\043\uff97\055\uff97\056\uff97" +
    "\001\002\000\030\027\uffe7\033\uffe7\041\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\001\002\000\004\030\031\001\002\000\004\033\041\001" +
    "\002\000\004\041\042\001\002\000\030\027\uff84\033\uff84" +
    "\041\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051" +
    "\uff84\052\uff84\053\uff84\001\002\000\004\002\uffec\001\002" +
    "\000\004\032\u010d\001\002\000\034\002\uffef\003\uffef\005" +
    "\uffef\010\uffef\011\uffef\017\uffef\021\uffef\023\uffef\030\uffef" +
    "\032\051\041\052\055\uffef\056\uffef\001\002\000\004\032" +
    "\uffe8\001\002\000\034\002\uffef\003\uffef\005\uffef\010\uffef" +
    "\011\uffef\017\uffef\021\uffef\023\uffef\030\uffef\032\051\041" +
    "\052\055\uffef\056\uffef\001\002\000\030\002\uffff\003\uffff" +
    "\005\uffff\010\uffff\011\uffff\017\uffff\021\uffff\023\uffff\030" +
    "\uffff\055\uffff\056\uffff\001\002\000\016\005\015\010\012" +
    "\017\014\021\006\023\024\033\uff9f\001\002\000\030\002" +
    "\ufff3\003\ufff3\005\ufff3\010\ufff3\011\ufff3\017\ufff3\021\ufff3" +
    "\023\ufff3\030\ufff3\055\ufff3\056\ufff3\001\002\000\004\033" +
    "\uffa0\001\002\000\004\033\064\001\002\000\004\030\057" +
    "\001\002\000\006\012\061\033\uff9b\001\002\000\006\012" +
    "\uff9d\033\uff9d\001\002\000\004\033\uff9e\001\002\000\014" +
    "\005\015\010\012\017\014\021\006\023\024\001\002\000" +
    "\004\033\uff9c\001\002\000\006\036\u0108\041\u0107\001\002" +
    "\000\010\003\065\036\uffee\041\uffee\001\002\000\052\003" +
    "\uffcc\004\uffcc\005\015\006\uffcc\010\012\011\066\013\uffcc" +
    "\015\uffcc\016\uffcc\017\014\020\uffcc\021\006\022\uffcc\023" +
    "\024\024\uffcc\025\uffcc\030\uffcc\037\uffcc\055\uffcc\056\uffcc" +
    "\001\002\000\014\005\015\010\012\017\014\021\006\023" +
    "\024\001\002\000\036\003\120\004\116\006\105\013\077" +
    "\015\122\016\101\020\117\022\121\024\124\025\115\030" +
    "\106\037\uffd6\055\022\056\013\001\002\000\006\030\072" +
    "\041\ufff9\001\002\000\004\041\075\001\002\000\006\012" +
    "\073\041\ufff7\001\002\000\004\041\ufff8\001\002\000\004" +
    "\041\ufffa\001\002\000\052\003\uffcc\004\uffcc\005\015\006" +
    "\uffcc\010\012\011\066\013\uffcc\015\uffcc\016\uffcc\017\014" +
    "\020\uffcc\021\006\022\uffcc\023\024\024\uffcc\025\uffcc\030" +
    "\uffcc\037\uffcc\055\uffcc\056\uffcc\001\002\000\036\003\uffcd" +
    "\004\uffcd\006\uffcd\013\uffcd\015\uffcd\016\uffcd\020\uffcd\022" +
    "\uffcd\024\uffcd\025\uffcd\030\uffcd\037\uffcd\055\uffcd\056\uffcd" +
    "\001\002\000\004\041\376\001\002\000\042\003\120\004" +
    "\116\006\105\007\uffd6\013\077\014\uffd6\015\122\016\101" +
    "\020\117\022\121\024\124\025\115\030\106\037\uffd6\055" +
    "\022\056\013\001\002\000\004\032\322\001\002\000\042" +
    "\003\120\004\116\006\105\007\uffd6\013\077\014\uffd6\015" +
    "\122\016\101\020\117\022\121\024\124\025\115\030\106" +
    "\037\uffd6\055\022\056\013\001\002\000\042\003\120\004" +
    "\116\006\105\007\uffd6\013\077\014\uffd6\015\122\016\101" +
    "\020\117\022\121\024\124\025\115\030\106\037\uffd6\055" +
    "\022\056\013\001\002\000\004\037\317\001\002\000\004" +
    "\041\315\001\002\000\010\003\uffd2\032\uffe5\043\uffd2\001" +
    "\002\000\044\003\306\004\116\006\105\007\uffd6\013\077" +
    "\014\uffd6\015\122\016\101\020\117\022\121\024\124\025" +
    "\115\026\304\030\106\037\uffd6\055\022\056\013\001\002" +
    "\000\004\041\302\001\002\000\042\003\120\004\116\006" +
    "\105\007\uffd6\013\077\014\uffd6\015\122\016\101\020\117" +
    "\022\121\024\124\025\115\030\106\037\uffd6\055\022\056" +
    "\013\001\002\000\042\003\120\004\116\006\105\007\uffd6" +
    "\013\077\014\uffd6\015\122\016\101\020\117\022\121\024" +
    "\124\025\115\030\106\037\uffd6\055\022\056\013\001\002" +
    "\000\006\003\270\043\271\001\002\000\004\041\266\001" +
    "\002\000\004\032\252\001\002\000\042\003\120\004\116" +
    "\006\105\007\uffd6\013\077\014\uffd6\015\122\016\101\020" +
    "\117\022\121\024\124\025\115\030\106\037\uffd6\055\022" +
    "\056\013\001\002\000\042\027\131\030\133\031\147\032" +
    "\126\041\245\042\127\044\136\045\132\046\137\047\130" +
    "\050\144\051\146\052\141\053\145\055\022\056\013\001" +
    "\002\000\042\003\120\004\116\006\105\007\uffd6\013\077" +
    "\014\uffd6\015\122\016\101\020\117\022\121\024\124\025" +
    "\115\030\106\037\uffd6\055\022\056\013\001\002\000\004" +
    "\032\205\001\002\000\004\036\174\001\002\000\042\003" +
    "\120\004\116\006\105\007\uffd6\013\077\014\uffd6\015\122" +
    "\016\101\020\117\022\121\024\124\025\115\030\106\037" +
    "\uffd6\055\022\056\013\001\002\000\004\032\125\001\002" +
    "\000\042\003\143\027\131\030\133\031\147\032\126\042" +
    "\127\044\136\045\132\046\137\047\130\050\144\051\146" +
    "\052\141\053\145\055\022\056\013\001\002\000\040\027" +
    "\131\030\133\031\147\032\126\042\127\044\136\045\132" +
    "\046\137\047\130\050\144\051\146\052\141\053\145\055" +
    "\022\056\013\001\002\000\030\027\uffa9\033\uffa9\041\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\001\002\000\044\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5" +
    "\056\uffa5\001\002\000\044\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056" +
    "\uffc6\001\002\000\044\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5\056\uffc5" +
    "\001\002\000\032\027\uffab\032\uffe5\033\uffab\041\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\001\002\000\030\027\uffa7\033\uffa7\041\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\001\002\000\026\027\131\033\161\044\136\045" +
    "\132\046\137\047\130\050\144\051\146\052\141\053\145" +
    "\001\002\000\044\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4\001" +
    "\002\000\044\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\056\uffc3\001\002" +
    "\000\030\027\uffa8\033\uffa8\041\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002" +
    "\000\044\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\041" +
    "\uffa2\042\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\055\uffa2\056\uffa2\001\002\000" +
    "\044\027\131\030\133\031\147\032\126\033\uffa6\041\uffa6" +
    "\042\127\044\136\045\132\046\137\047\130\050\144\051" +
    "\146\052\141\053\145\055\022\056\013\001\002\000\004" +
    "\033\150\001\002\000\044\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056" +
    "\uffa4\001\002\000\044\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\041\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1" +
    "\001\002\000\044\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\041\uffa3\042\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3\001" +
    "\002\000\030\027\uffaa\033\uffaa\041\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\001" +
    "\002\000\004\036\151\001\002\000\036\003\120\004\116" +
    "\006\105\013\077\015\122\016\101\020\117\022\121\024" +
    "\124\025\115\030\106\037\uffd6\055\022\056\013\001\002" +
    "\000\004\037\153\001\002\000\042\003\uffbf\004\uffbf\006" +
    "\uffbf\007\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf" +
    "\022\uffbf\024\uffbf\025\uffbf\030\uffbf\037\uffbf\055\uffbf\056" +
    "\uffbf\001\002\000\030\027\131\033\uffad\041\uffad\044\136" +
    "\045\132\046\137\047\130\050\144\051\146\052\141\053" +
    "\145\001\002\000\040\027\131\030\133\031\147\032\126" +
    "\042\127\044\136\045\132\046\137\047\130\050\144\051" +
    "\146\052\141\053\145\055\022\056\013\001\002\000\040" +
    "\027\131\030\133\031\147\032\126\042\127\044\136\045" +
    "\132\046\137\047\130\050\144\051\146\052\141\053\145" +
    "\055\022\056\013\001\002\000\030\027\131\033\uffac\041" +
    "\uffac\044\136\045\132\046\137\047\130\050\144\051\146" +
    "\052\141\053\145\001\002\000\030\027\131\033\uffaf\041" +
    "\uffaf\044\136\045\132\046\137\047\130\050\144\051\146" +
    "\052\141\053\145\001\002\000\006\003\163\036\162\001" +
    "\002\000\036\003\120\004\116\006\105\013\077\015\122" +
    "\016\101\020\117\022\121\024\124\025\115\030\106\037" +
    "\uffd6\055\022\056\013\001\002\000\036\003\120\004\116" +
    "\006\105\013\077\015\122\016\101\020\117\022\121\024" +
    "\124\025\115\030\106\037\uffd6\055\022\056\013\001\002" +
    "\000\004\037\165\001\002\000\042\003\uffbe\004\uffbe\006" +
    "\uffbe\007\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe" +
    "\022\uffbe\024\uffbe\025\uffbe\030\uffbe\037\uffbe\055\uffbe\056" +
    "\uffbe\001\002\000\004\037\167\001\002\000\042\003\uffc0" +
    "\004\uffc0\006\uffc0\007\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\020\uffc0\022\uffc0\024\uffc0\025\uffc0\030\uffc0\037\uffc0" +
    "\055\uffc0\056\uffc0\001\002\000\026\027\131\033\171\044" +
    "\136\045\132\046\137\047\130\050\144\051\146\052\141" +
    "\053\145\001\002\000\030\027\uffae\033\uffae\041\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\001\002\000\010\007\uffe0\014\uffe0\037\uffe0\001" +
    "\002\000\010\007\uffd1\014\uffd1\037\uffd1\001\002\000\036" +
    "\003\120\004\116\006\105\013\077\015\122\016\101\020" +
    "\117\022\121\024\124\025\115\030\106\037\uffd6\055\022" +
    "\056\013\001\002\000\004\037\176\001\002\000\004\024" +
    "\177\001\002\000\004\032\200\001\002\000\042\003\202" +
    "\027\131\030\133\031\147\032\126\042\127\044\136\045" +
    "\132\046\137\047\130\050\144\051\146\052\141\053\145" +
    "\055\022\056\013\001\002\000\026\027\131\033\204\044" +
    "\136\045\132\046\137\047\130\050\144\051\146\052\141" +
    "\053\145\001\002\000\004\033\203\001\002\000\004\041" +
    "\uffbc\001\002\000\004\041\uffbd\001\002\000\006\030\207" +
    "\031\206\001\002\000\004\033\uff78\001\002\000\006\033" +
    "\uff77\043\241\001\002\000\004\033\211\001\002\000\004" +
    "\036\212\001\002\000\010\007\uff7b\014\uff7b\037\uff7b\001" +
    "\002\000\010\007\214\014\215\037\uff80\001\002\000\006" +
    "\003\231\031\230\001\002\000\006\003\220\057\221\001" +
    "\002\000\004\037\217\001\002\000\042\003\uff83\004\uff83" +
    "\006\uff83\007\uff83\013\uff83\014\uff83\015\uff83\016\uff83\020" +
    "\uff83\022\uff83\024\uff83\025\uff83\030\uff83\037\uff83\055\uff83" +
    "\056\uff83\001\002\000\040\003\120\004\116\006\105\013" +
    "\077\015\122\016\101\020\117\022\121\024\124\025\115" +
    "\030\106\036\224\037\uffd6\055\022\056\013\001\002\000" +
    "\040\003\120\004\116\006\105\013\077\015\122\016\101" +
    "\020\117\022\121\024\124\025\115\030\106\036\224\037" +
    "\uffd6\055\022\056\013\001\002\000\004\037\uff82\001\002" +
    "\000\004\037\uff7e\001\002\000\036\003\120\004\116\006" +
    "\105\013\077\015\122\016\101\020\117\022\121\024\124" +
    "\025\115\030\106\037\uffd6\055\022\056\013\001\002\000" +
    "\004\037\226\001\002\000\004\037\uff7f\001\002\000\004" +
    "\037\uff81\001\002\000\004\057\237\001\002\000\044\003" +
    "\120\004\116\006\105\007\uffd6\013\077\014\uffd6\015\122" +
    "\016\101\020\117\022\121\024\124\025\115\030\106\036" +
    "\233\037\uffd6\055\022\056\013\001\002\000\010\007\uff79" +
    "\014\uff79\037\uff79\001\002\000\036\003\120\004\116\006" +
    "\105\013\077\015\122\016\101\020\117\022\121\024\124" +
    "\025\115\030\106\037\uffd6\055\022\056\013\001\002\000" +
    "\010\007\uff7c\014\uff7c\037\uff7c\001\002\000\004\037\236" +
    "\001\002\000\010\007\uff7a\014\uff7a\037\uff7a\001\002\000" +
    "\044\003\120\004\116\006\105\007\uffd6\013\077\014\uffd6" +
    "\015\122\016\101\020\117\022\121\024\124\025\115\030" +
    "\106\036\233\037\uffd6\055\022\056\013\001\002\000\010" +
    "\007\uff7d\014\uff7d\037\uff7d\001\002\000\004\031\242\001" +
    "\002\000\004\033\uff76\001\002\000\010\007\uffd7\014\uffd7" +
    "\037\uffd7\001\002\000\026\027\131\041\247\044\136\045" +
    "\132\046\137\047\130\050\144\051\146\052\141\053\145" +
    "\001\002\000\042\003\120\004\116\006\105\007\uffd6\013" +
    "\077\014\uffd6\015\122\016\101\020\117\022\121\024\124" +
    "\025\115\030\106\037\uffd6\055\022\056\013\001\002\000" +
    "\010\007\uffda\014\uffda\037\uffda\001\002\000\042\003\120" +
    "\004\116\006\105\007\uffd6\013\077\014\uffd6\015\122\016" +
    "\101\020\117\022\121\024\124\025\115\030\106\037\uffd6" +
    "\055\022\056\013\001\002\000\010\007\uffdb\014\uffdb\037" +
    "\uffdb\001\002\000\010\007\uffd8\014\uffd8\037\uffd8\001\002" +
    "\000\042\003\254\027\131\030\133\031\147\032\126\042" +
    "\127\044\136\045\132\046\137\047\130\050\144\051\146" +
    "\052\141\053\145\055\022\056\013\001\002\000\026\027" +
    "\131\033\261\044\136\045\132\046\137\047\130\050\144" +
    "\051\146\052\141\053\145\001\002\000\004\033\255\001" +
    "\002\000\004\036\256\001\002\000\036\003\120\004\116" +
    "\006\105\013\077\015\122\016\101\020\117\022\121\024" +
    "\124\025\115\030\106\037\uffd6\055\022\056\013\001\002" +
    "\000\004\037\260\001\002\000\044\003\uffc8\004\uffc8\006" +
    "\uffc8\007\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8" +
    "\022\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\037\uffc8\055" +
    "\uffc8\056\uffc8\001\002\000\006\003\263\036\262\001\002" +
    "\000\036\003\120\004\116\006\105\013\077\015\122\016" +
    "\101\020\117\022\121\024\124\025\115\030\106\037\uffd6" +
    "\055\022\056\013\001\002\000\044\003\uffc7\004\uffc7\006" +
    "\uffc7\007\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7" +
    "\022\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\037\uffc7\055" +
    "\uffc7\056\uffc7\001\002\000\004\037\265\001\002\000\044" +
    "\003\uffc9\004\uffc9\006\uffc9\007\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\020\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\030\uffc9\037\uffc9\055\uffc9\056\uffc9\001\002\000\042\003" +
    "\120\004\116\006\105\007\uffd6\013\077\014\uffd6\015\122" +
    "\016\101\020\117\022\121\024\124\025\115\030\106\037" +
    "\uffd6\055\022\056\013\001\002\000\010\007\uffe1\014\uffe1" +
    "\037\uffe1\001\002\000\040\027\131\030\133\031\147\032" +
    "\126\042\127\044\136\045\132\046\137\047\130\050\144" +
    "\051\146\052\141\053\145\055\022\056\013\001\002\000" +
    "\042\003\273\027\131\030\133\031\147\032\126\042\127" +
    "\044\136\045\132\046\137\047\130\050\144\051\146\052" +
    "\141\053\145\055\022\056\013\001\002\000\026\027\131" +
    "\041\275\044\136\045\132\046\137\047\130\050\144\051" +
    "\146\052\141\053\145\001\002\000\004\041\274\001\002" +
    "\000\042\003\uffd4\004\uffd4\006\uffd4\007\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\020\uffd4\022\uffd4\024\uffd4\025\uffd4" +
    "\030\uffd4\037\uffd4\055\uffd4\056\uffd4\001\002\000\042\003" +
    "\uffd5\004\uffd5\006\uffd5\007\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\020\uffd5\022\uffd5\024\uffd5\025\uffd5\030\uffd5\037" +
    "\uffd5\055\uffd5\056\uffd5\001\002\000\026\027\131\041\277" +
    "\044\136\045\132\046\137\047\130\050\144\051\146\052" +
    "\141\053\145\001\002\000\042\003\uffd3\004\uffd3\006\uffd3" +
    "\007\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\022" +
    "\uffd3\024\uffd3\025\uffd3\030\uffd3\037\uffd3\055\uffd3\056\uffd3" +
    "\001\002\000\010\007\uffdf\014\uffdf\037\uffdf\001\002\000" +
    "\010\007\uffe3\014\uffe3\037\uffe3\001\002\000\042\003\120" +
    "\004\116\006\105\007\uffd6\013\077\014\uffd6\015\122\016" +
    "\101\020\117\022\121\024\124\025\115\030\106\037\uffd6" +
    "\055\022\056\013\001\002\000\010\007\uffde\014\uffde\037" +
    "\uffde\001\002\000\004\036\312\001\002\000\010\007\uffe4" +
    "\014\uffe4\037\uffe4\001\002\000\044\003\120\004\116\006" +
    "\105\007\uffd6\013\077\014\uffd6\015\122\016\101\020\117" +
    "\022\121\024\124\025\115\030\106\036\307\037\uffd6\055" +
    "\022\056\013\001\002\000\036\003\120\004\116\006\105" +
    "\013\077\015\122\016\101\020\117\022\121\024\124\025" +
    "\115\030\106\037\uffd6\055\022\056\013\001\002\000\004" +
    "\037\311\001\002\000\042\003\uffc1\004\uffc1\006\uffc1\007" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\022\uffc1" +
    "\024\uffc1\025\uffc1\030\uffc1\037\uffc1\055\uffc1\056\uffc1\001" +
    "\002\000\036\003\120\004\116\006\105\013\077\015\122" +
    "\016\101\020\117\022\121\024\124\025\115\030\106\037" +
    "\uffd6\055\022\056\013\001\002\000\004\037\314\001\002" +
    "\000\042\003\uffc2\004\uffc2\006\uffc2\007\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\020\uffc2\022\uffc2\024\uffc2\025\uffc2" +
    "\030\uffc2\037\uffc2\055\uffc2\056\uffc2\001\002\000\042\003" +
    "\120\004\116\006\105\007\uffd6\013\077\014\uffd6\015\122" +
    "\016\101\020\117\022\121\024\124\025\115\030\106\037" +
    "\uffd6\055\022\056\013\001\002\000\010\007\uffd9\014\uffd9" +
    "\037\uffd9\001\002\000\030\002\ufff0\003\ufff0\005\ufff0\010" +
    "\ufff0\011\ufff0\017\ufff0\021\ufff0\023\ufff0\030\ufff0\055\ufff0" +
    "\056\ufff0\001\002\000\010\007\uffdd\014\uffdd\037\uffdd\001" +
    "\002\000\010\007\uffe2\014\uffe2\037\uffe2\001\002\000\020" +
    "\003\326\005\015\010\012\017\014\021\006\023\024\030" +
    "\324\001\002\000\004\033\366\001\002\000\004\043\360" +
    "\001\002\000\004\030\346\001\002\000\006\033\330\041" +
    "\327\001\002\000\040\027\131\030\133\031\147\032\126" +
    "\042\127\044\136\045\132\046\137\047\130\050\144\051" +
    "\146\052\141\053\145\055\022\056\013\001\002\000\004" +
    "\036\331\001\002\000\036\003\120\004\116\006\105\013" +
    "\077\015\122\016\101\020\117\022\121\024\124\025\115" +
    "\030\106\037\uffd6\055\022\056\013\001\002\000\004\037" +
    "\333\001\002\000\042\003\uffb9\004\uffb9\006\uffb9\007\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9\022\uffb9\024" +
    "\uffb9\025\uffb9\030\uffb9\037\uffb9\055\uffb9\056\uffb9\001\002" +
    "\000\026\027\131\041\335\044\136\045\132\046\137\047" +
    "\130\050\144\051\146\052\141\053\145\001\002\000\010" +
    "\003\340\030\341\054\337\001\002\000\004\033\uffb5\001" +
    "\002\000\004\030\345\001\002\000\004\033\uffb0\001\002" +
    "\000\006\043\343\054\342\001\002\000\004\033\uffb2\001" +
    "\002\000\004\042\344\001\002\000\004\033\uffb3\001\002" +
    "\000\004\033\uffb1\001\002\000\004\043\347\001\002\000" +
    "\040\027\131\030\133\031\147\032\126\042\127\044\136" +
    "\045\132\046\137\047\130\050\144\051\146\052\141\053" +
    "\145\055\022\056\013\001\002\000\026\027\131\041\351" +
    "\044\136\045\132\046\137\047\130\050\144\051\146\052" +
    "\141\053\145\001\002\000\042\003\353\027\131\030\133" +
    "\031\147\032\126\042\127\044\136\045\132\046\137\047" +
    "\130\050\144\051\146\052\141\053\145\055\022\056\013" +
    "\001\002\000\026\027\131\041\356\044\136\045\132\046" +
    "\137\047\130\050\144\051\146\052\141\053\145\001\002" +
    "\000\004\041\354\001\002\000\010\003\340\030\341\054" +
    "\337\001\002\000\004\033\uffb4\001\002\000\010\003\340" +
    "\030\341\054\337\001\002\000\004\033\uffb7\001\002\000" +
    "\040\027\131\030\133\031\147\032\126\042\127\044\136" +
    "\045\132\046\137\047\130\050\144\051\146\052\141\053" +
    "\145\055\022\056\013\001\002\000\026\027\131\041\362" +
    "\044\136\045\132\046\137\047\130\050\144\051\146\052" +
    "\141\053\145\001\002\000\040\027\131\030\133\031\147" +
    "\032\126\042\127\044\136\045\132\046\137\047\130\050" +
    "\144\051\146\052\141\053\145\055\022\056\013\001\002" +
    "\000\026\027\131\041\364\044\136\045\132\046\137\047" +
    "\130\050\144\051\146\052\141\053\145\001\002\000\010" +
    "\003\340\030\341\054\337\001\002\000\004\033\uffb6\001" +
    "\002\000\006\003\370\036\367\001\002\000\036\003\120" +
    "\004\116\006\105\013\077\015\122\016\101\020\117\022" +
    "\121\024\124\025\115\030\106\037\uffd6\055\022\056\013" +
    "\001\002\000\036\003\120\004\116\006\105\013\077\015" +
    "\122\016\101\020\117\022\121\024\124\025\115\030\106" +
    "\037\uffd6\055\022\056\013\001\002\000\004\037\372\001" +
    "\002\000\042\003\uffb8\004\uffb8\006\uffb8\007\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\020\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\030\uffb8\037\uffb8\055\uffb8\056\uffb8\001\002\000\004" +
    "\037\374\001\002\000\042\003\uffba\004\uffba\006\uffba\007" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\020\uffba\022\uffba" +
    "\024\uffba\025\uffba\030\uffba\037\uffba\055\uffba\056\uffba\001" +
    "\002\000\010\007\uffdc\014\uffdc\037\uffdc\001\002\000\042" +
    "\003\uffbb\004\uffbb\006\uffbb\007\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\030\uffbb" +
    "\037\uffbb\055\uffbb\056\uffbb\001\002\000\004\030\u0100\001" +
    "\002\000\004\043\u0102\001\002\000\004\041\u0105\001\002" +
    "\000\042\003\u0104\027\131\030\133\031\147\032\126\042" +
    "\127\044\136\045\132\046\137\047\130\050\144\051\146" +
    "\052\141\053\145\055\022\056\013\001\002\000\026\027" +
    "\131\041\uffcb\044\136\045\132\046\137\047\130\050\144" +
    "\051\146\052\141\053\145\001\002\000\004\041\uffca\001" +
    "\002\000\052\003\uffcc\004\uffcc\005\015\006\uffcc\010\012" +
    "\011\066\013\uffcc\015\uffcc\016\uffcc\017\014\020\uffcc\021" +
    "\006\022\uffcc\023\024\024\uffcc\025\uffcc\030\uffcc\037\uffcc" +
    "\055\uffcc\056\uffcc\001\002\000\036\003\uffce\004\uffce\006" +
    "\uffce\013\uffce\015\uffce\016\uffce\020\uffce\022\uffce\024\uffce" +
    "\025\uffce\030\uffce\037\uffce\055\uffce\056\uffce\001\002\000" +
    "\030\002\ufff1\003\ufff1\005\ufff1\010\ufff1\011\ufff1\017\ufff1" +
    "\021\ufff1\023\ufff1\030\ufff1\055\ufff1\056\ufff1\001\002\000" +
    "\052\003\uffcc\004\uffcc\005\015\006\uffcc\010\012\011\066" +
    "\013\uffcc\015\uffcc\016\uffcc\017\014\020\uffcc\021\006\022" +
    "\uffcc\023\024\024\uffcc\025\uffcc\030\uffcc\037\uffcc\055\uffcc" +
    "\056\uffcc\001\002\000\036\003\120\004\116\006\105\013" +
    "\077\015\122\016\101\020\117\022\121\024\124\025\115" +
    "\030\106\037\uffd6\055\022\056\013\001\002\000\004\037" +
    "\u010b\001\002\000\030\002\ufff2\003\ufff2\005\ufff2\010\ufff2" +
    "\011\ufff2\017\ufff2\021\ufff2\023\ufff2\030\ufff2\055\ufff2\056" +
    "\ufff2\001\002\000\030\002\ufffd\003\ufffd\005\ufffd\010\ufffd" +
    "\011\ufffd\017\ufffd\021\ufffd\023\ufffd\030\ufffd\055\ufffd\056" +
    "\ufffd\001\002\000\004\033\u010e\001\002\000\006\003\u0110" +
    "\036\u010f\001\002\000\052\003\uffcc\004\uffcc\005\015\006" +
    "\uffcc\010\012\011\066\013\uffcc\015\uffcc\016\uffcc\017\014" +
    "\020\uffcc\021\006\022\uffcc\023\024\024\uffcc\025\uffcc\030" +
    "\uffcc\037\uffcc\055\uffcc\056\uffcc\001\002\000\004\037\u0111" +
    "\001\002\000\004\002\uffea\001\002\000\036\003\120\004" +
    "\116\006\105\013\077\015\122\016\101\020\117\022\121" +
    "\024\124\025\115\030\106\037\uffd6\055\022\056\013\001" +
    "\002\000\004\037\u0114\001\002\000\004\002\uffeb\001\002" +
    "\000\030\002\ufffc\003\ufffc\005\ufffc\010\ufffc\011\ufffc\017" +
    "\ufffc\021\ufffc\023\ufffc\030\ufffc\055\ufffc\056\ufffc\001\002" +
    "\000\012\003\uff8b\030\uff8b\040\uff8b\041\uff8b\001\002\000" +
    "\014\003\uff86\005\u011a\030\uff86\040\uff86\041\uff86\001\002" +
    "\000\012\003\uff8a\030\uff8a\040\uff8a\041\uff8a\001\002\000" +
    "\012\003\uff89\030\uff89\040\uff89\041\uff89\001\002\000\012" +
    "\003\uff87\030\uff87\040\uff87\041\uff87\001\002\000\006\030" +
    "\031\033\uff99\001\002\000\004\033\u011d\001\002\000\004" +
    "\041\u011e\001\002\000\030\027\uff85\033\uff85\041\uff85\044" +
    "\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85" +
    "\053\uff85\001\002\000\006\003\u0120\030\031\001\002\000" +
    "\004\043\u0102\001\002\000\004\043\u0102\001\002\000\004" +
    "\041\u0123\001\002\000\030\002\000\003\000\005\000\010" +
    "\000\011\000\017\000\021\000\023\000\030\000\055\000" +
    "\056\000\001\002\000\004\041\u0125\001\002\000\030\002" +
    "\ufffe\003\ufffe\005\ufffe\010\ufffe\011\ufffe\017\ufffe\021\ufffe" +
    "\023\ufffe\030\ufffe\055\ufffe\056\ufffe\001\002\000\012\003" +
    "\uff90\030\uff90\040\uff90\041\uff90\001\002\000\014\003\uff8c" +
    "\005\u012a\030\uff8c\040\uff8c\041\uff8c\001\002\000\012\003" +
    "\uff8f\030\uff8f\040\uff8f\041\uff8f\001\002\000\012\003\uff8e" +
    "\030\uff8e\040\uff8e\041\uff8e\001\002\000\012\003\uff8d\030" +
    "\uff8d\040\uff8d\041\uff8d\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\020\003\010\006\020\017\016\020\007\021\025" +
    "\053\022\077\024\001\001\000\004\046\u0125\001\001\000" +
    "\010\017\u011e\020\007\021\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\046\073\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\031\040\027\001\001\000\002\001\001\000\004\034\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u010b\001\001\000\002\001\001\000\004\043\047\001" +
    "\001\000\002\001\001\000\014\015\052\017\054\020\007" +
    "\021\025\037\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\062\001\001\000\004\075\055\001\001" +
    "\000\004\016\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\061\017\054\020\007\021\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\066\017\067\020\007\021\025\001\001\000\010" +
    "\017\376\020\007\021\025\001\001\000\034\005\103\006" +
    "\107\010\106\011\110\012\101\013\113\014\122\044\102" +
    "\052\077\053\022\060\111\074\112\077\024\001\001\000" +
    "\004\067\070\001\001\000\002\001\001\000\004\070\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\075\017\067\020\007\021\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\172\006\107\010\106\011" +
    "\110\012\101\013\113\014\122\033\374\044\102\052\077" +
    "\053\022\060\111\074\112\077\024\001\001\000\002\001" +
    "\001\000\036\005\172\006\107\010\106\011\110\012\101" +
    "\013\113\014\122\033\320\044\102\052\077\053\022\060" +
    "\111\074\112\077\024\001\001\000\036\005\172\006\107" +
    "\010\106\011\110\012\101\013\113\014\122\033\317\044" +
    "\102\052\077\053\022\060\111\074\112\077\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\172\006\107\010\106\011\110\012\101\013\113" +
    "\014\122\033\304\044\102\052\077\053\022\060\111\074" +
    "\112\077\024\001\001\000\002\001\001\000\036\005\172" +
    "\006\107\010\106\011\110\012\101\013\113\014\122\033" +
    "\300\044\102\052\077\053\022\060\111\074\112\077\024" +
    "\001\001\000\036\005\172\006\107\010\106\011\110\012" +
    "\101\013\113\014\122\033\277\044\102\052\077\053\022" +
    "\060\111\074\112\077\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\250\006\107" +
    "\010\106\011\110\012\101\013\113\014\122\044\102\052" +
    "\077\053\022\060\111\074\112\077\024\001\001\000\016" +
    "\006\133\022\243\027\137\030\141\053\022\077\024\001" +
    "\001\000\036\005\172\006\107\010\106\011\110\012\101" +
    "\013\113\014\122\033\242\044\102\052\077\053\022\060" +
    "\111\074\112\077\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\172\006\107\010\106\011\110\012" +
    "\101\013\113\014\122\033\171\044\102\052\077\053\022" +
    "\060\111\074\112\077\024\001\001\000\002\001\001\000" +
    "\016\006\133\022\134\027\137\030\141\053\022\077\024" +
    "\001\001\000\016\006\133\022\167\027\137\030\141\053" +
    "\022\077\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\154\030\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\133\022\153\027\137\030\141\053\022" +
    "\077\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\151\006\107\010\106\011\110\012" +
    "\101\013\113\014\122\044\102\052\077\053\022\060\111" +
    "\074\112\077\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\154\030\155\001\001\000\016\006\133" +
    "\022\157\027\137\030\141\053\022\077\024\001\001\000" +
    "\016\006\133\022\156\027\137\030\141\053\022\077\024" +
    "\001\001\000\006\027\154\030\155\001\001\000\006\027" +
    "\154\030\155\001\001\000\002\001\001\000\034\005\165" +
    "\006\107\010\106\011\110\012\101\013\113\014\122\044" +
    "\102\052\077\053\022\060\111\074\112\077\024\001\001" +
    "\000\034\005\163\006\107\010\106\011\110\012\101\013" +
    "\113\014\122\044\102\052\077\053\022\060\111\074\112" +
    "\077\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\154\030\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\174\006\107\010\106\011\110\012\101" +
    "\013\113\014\122\044\102\052\077\053\022\060\111\074" +
    "\112\077\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\133\022\200\027\137\030" +
    "\141\053\022\077\024\001\001\000\006\027\154\030\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\212\001\001\000\004\061\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\222\006\107\010\106\011\110\012\101\013\113" +
    "\014\122\044\102\052\077\053\022\060\111\062\226\074" +
    "\112\077\024\001\001\000\036\005\222\006\107\010\106" +
    "\011\110\012\101\013\113\014\122\044\102\052\077\053" +
    "\022\060\111\062\221\074\112\077\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\224\006\107\010" +
    "\106\011\110\012\101\013\113\014\122\044\102\052\077" +
    "\053\022\060\111\074\112\077\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\231\006\107\010\106\011\110\012\101\013" +
    "\113\014\122\044\102\052\077\053\022\060\111\064\233" +
    "\074\112\077\024\001\001\000\002\001\001\000\034\005" +
    "\234\006\107\010\106\011\110\012\101\013\113\014\122" +
    "\044\102\052\077\053\022\060\111\074\112\077\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\231\006\107\010\106\011\110\012\101\013" +
    "\113\014\122\044\102\052\077\053\022\060\111\064\237" +
    "\074\112\077\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\154" +
    "\030\155\001\001\000\036\005\172\006\107\010\106\011" +
    "\110\012\101\013\113\014\122\033\245\044\102\052\077" +
    "\053\022\060\111\074\112\077\024\001\001\000\002\001" +
    "\001\000\036\005\172\006\107\010\106\011\110\012\101" +
    "\013\113\014\122\033\247\044\102\052\077\053\022\060" +
    "\111\074\112\077\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\133\022\252\027\137\030\141\053" +
    "\022\077\024\001\001\000\006\027\154\030\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\256\006" +
    "\107\010\106\011\110\012\101\013\113\014\122\044\102" +
    "\052\077\053\022\060\111\074\112\077\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\263\006\107\010\106\011\110\012\101\013\113\014" +
    "\122\044\102\052\077\053\022\060\111\074\112\077\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\172\006\107\010\106\011\110\012\101" +
    "\013\113\014\122\033\266\044\102\052\077\053\022\060" +
    "\111\074\112\077\024\001\001\000\002\001\001\000\016" +
    "\006\133\022\275\027\137\030\141\053\022\077\024\001" +
    "\001\000\016\006\133\022\271\027\137\030\141\053\022" +
    "\077\024\001\001\000\006\027\154\030\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\154\030\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\005\172\006\107\010\106" +
    "\011\110\012\101\013\113\014\122\033\302\044\102\052" +
    "\077\053\022\060\111\074\112\077\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\005" +
    "\172\006\107\010\106\011\110\012\101\013\113\014\122" +
    "\033\242\044\102\052\077\053\022\060\111\074\112\077" +
    "\024\001\001\000\034\005\307\006\107\010\106\011\110" +
    "\012\101\013\113\014\122\044\102\052\077\053\022\060" +
    "\111\074\112\077\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\312\006\107\010\106\011\110\012" +
    "\101\013\113\014\122\044\102\052\077\053\022\060\111" +
    "\074\112\077\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\172\006\107\010\106\011\110\012\101" +
    "\013\113\014\122\033\315\044\102\052\077\053\022\060" +
    "\111\074\112\077\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\324\020\007\021\025\025\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\133\022\333\027\137\030\141\053\022\077\024" +
    "\001\001\000\002\001\001\000\034\005\331\006\107\010" +
    "\106\011\110\012\101\013\113\014\122\044\102\052\077" +
    "\053\022\060\111\074\112\077\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\154\030\155\001\001" +
    "\000\004\026\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\133\022\347\027\137\030\141" +
    "\053\022\077\024\001\001\000\006\027\154\030\155\001" +
    "\001\000\016\006\133\022\351\027\137\030\141\053\022" +
    "\077\024\001\001\000\006\027\154\030\155\001\001\000" +
    "\002\001\001\000\004\026\354\001\001\000\002\001\001" +
    "\000\004\026\356\001\001\000\002\001\001\000\016\006" +
    "\133\022\360\027\137\030\141\053\022\077\024\001\001" +
    "\000\006\027\154\030\155\001\001\000\016\006\133\022" +
    "\362\027\137\030\141\053\022\077\024\001\001\000\006" +
    "\027\154\030\155\001\001\000\004\026\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\372\006\107" +
    "\010\106\011\110\012\101\013\113\014\122\044\102\052" +
    "\077\053\022\060\111\074\112\077\024\001\001\000\034" +
    "\005\370\006\107\010\106\011\110\012\101\013\113\014" +
    "\122\044\102\052\077\053\022\060\111\074\112\077\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u0100\001\001\000\002\001" +
    "\001\000\016\006\133\022\u0102\027\137\030\141\053\022" +
    "\077\024\001\001\000\006\027\154\030\155\001\001\000" +
    "\002\001\001\000\012\007\u0105\017\067\020\007\021\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\u0108\017\067\020\007\021\025\001\001\000\034\005\u0109" +
    "\006\107\010\106\011\110\012\101\013\113\014\122\044" +
    "\102\052\077\053\022\060\111\074\112\077\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u0111\017\067" +
    "\020\007\021\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\u0112\006\107\010\106\011\110\012\101" +
    "\013\113\014\122\044\102\052\077\053\022\060\111\074" +
    "\112\077\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\031\040\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u0120\001\001" +
    "\000\004\032\u0123\001\001\000\004\032\u0121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\u0128\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();
    

    public void syntax_error(Symbol cur_token){
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO PARAMS_LL DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object scolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO PARAMS_LL DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARS_AUX ::= Identificador VARS_AUX_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARS_AUX_AUX ::= Coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARS_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS_PREV_VARS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS_PREV_VARS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS_VARS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;
		System.out.println("asd");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_VARS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().insertarTS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV CLOSE_PAR_SEM Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV CLOSE_PAR_SEM Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c error DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CLOSE_PAR_SEM ::= Parentesis_c 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().recuerdaFuncion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLOSE_PAR_SEM",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= DECLARACIONES_INICIALES LLAMADA_FUNCION Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= TIPO MAIN_2 Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= TIPO MAIN_2 Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN_2 ::= Main 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().wipeStack(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN_2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LLAMADA_FUNCION ::= IDENTIFICADOR_FUNCION Parentesis_a PARAMS_LL_PREV Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().evalFuncion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDENTIFICADOR_FUNCION ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_FUNCION",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= LLAMADA_FUNCION Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= Return EXP Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;
		 System.out.println("Error pero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION_VAR ::= ASIG_SEM Asignacion EXP Scolon 
            {
              Object RESULT =null;
		  SemanticStructures.getInstance().evalBinary();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION_VAR ::= ASIG_SEM Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION_VAR ::= ASIG_SEM error EXP Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIG_SEM ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_SEM",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_VAR ::= Const TIPO Identificador DECLARACION_VAR_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_VAR ::= TIPO VARS_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().insertarTS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= If Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= If Parentesis_a EXP Parentesis_c error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= While Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WHILE ::= While Parentesis_a EXP Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_FOR ::= error Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon error Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= Literal 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= OP_RELACIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADOR ::= Mas 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADOR ::= Menos 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADOR ::= Multiplicacion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADOR ::= Division 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADOR ::= Modulo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMS ::= TIPO IDENTIFICADOR_AUX_SEM PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IDENTIFICADOR_AUX_SEM ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),iright,ileft);  SemanticStructures.getInstance().addCountParams(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_AUX_SEM",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),iright,ileft) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO ::= Int 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO ::= Char 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO ::= Void 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LONG_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
