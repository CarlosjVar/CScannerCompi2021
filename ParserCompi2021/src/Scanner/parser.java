
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\042\010\000\002\042" +
    "\006\000\002\042\010\000\002\042\006\000\002\042\005" +
    "\000\002\042\002\000\002\067\004\000\002\067\002\000" +
    "\002\070\003\000\002\070\002\000\002\071\003\000\002" +
    "\071\002\000\002\072\005\000\002\043\003\000\002\043" +
    "\011\000\002\043\006\000\002\043\011\000\002\043\002" +
    "\000\002\076\003\000\002\002\004\000\002\002\005\000" +
    "\002\003\012\000\002\003\010\000\002\003\002\000\002" +
    "\073\003\000\002\006\006\000\002\006\003\000\002\104" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\005\005\000\002\005\004\000\002\005\005\000\002" +
    "\005\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\044\006" +
    "\000\002\044\005\000\002\044\006\000\002\044\006\000" +
    "\002\074\003\000\002\033\003\000\002\100\003\000\002" +
    "\031\003\000\002\031\002\000\002\007\010\000\002\007" +
    "\006\000\002\007\002\000\002\103\003\000\002\032\004" +
    "\000\002\032\004\000\002\010\011\000\002\010\011\000" +
    "\002\010\007\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\011\007\000\002\011" +
    "\007\000\002\012\011\000\002\012\011\000\002\012\011" +
    "\000\002\077\003\000\002\013\012\000\002\013\012\000" +
    "\002\101\003\000\002\052\003\000\002\014\011\000\002" +
    "\014\011\000\002\014\011\000\002\102\003\000\002\025" +
    "\012\000\002\025\011\000\002\025\007\000\002\025\012" +
    "\000\002\026\005\000\002\026\004\000\002\026\004\000" +
    "\002\026\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\004\000\002\022\005\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\037\003\000\002\037\002\000\002\015\005\000\002\075" +
    "\003\000\002\016\004\000\002\016\002\000\002\040\003" +
    "\000\002\040\002\000\002\035\004\000\002\034\004\000" +
    "\002\034\002\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\004\000\002\046\003\000\002\046\004\000\002\047\003" +
    "\000\002\047\002\000\002\020\004\000\002\050\003\000" +
    "\002\050\004\000\002\050\002\000\002\051\003\000\002" +
    "\051\002\000\002\053\007\000\002\053\007\000\002\060" +
    "\012\000\002\061\005\000\002\061\005\000\002\061\002" +
    "\000\002\062\005\000\002\062\003\000\002\063\007\000" +
    "\002\063\006\000\002\063\002\000\002\064\005\000\002" +
    "\064\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\030\002\ufffb\003\ufffb\005\ufffb\010\ufffb\011" +
    "\ufffb\017\ufffb\021\ufffb\023\ufffb\030\ufffb\055\ufffb\056\ufffb" +
    "\001\002\000\004\002\u0131\001\002\000\030\002\uffe9\003" +
    "\016\005\014\010\012\011\007\017\015\021\006\023\024" +
    "\030\020\055\022\056\013\001\002\000\006\005\u012e\021" +
    "\u012d\001\002\000\014\005\014\010\012\017\015\021\006" +
    "\023\024\001\002\000\012\003\uff8b\030\uff8b\040\uff8b\041" +
    "\uff8b\001\002\000\004\002\uffed\001\002\000\012\003\uff8e" +
    "\030\uff8e\040\uff8e\041\uff8e\001\002\000\004\032\u0121\001" +
    "\002\000\012\003\uff8f\030\uff8f\040\uff8f\041\uff8f\001\002" +
    "\000\016\003\uff82\005\u011e\017\u011d\030\uff82\040\uff82\041" +
    "\uff82\001\002\000\004\041\u011b\001\002\000\010\003\045" +
    "\030\031\040\046\001\002\000\004\032\uffe5\001\002\000" +
    "\004\041\043\001\002\000\004\032\037\001\002\000\030" +
    "\027\uffe6\033\uffe6\041\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000\012" +
    "\003\uff8d\030\uff8d\040\uff8d\041\uff8d\001\002\000\004\032" +
    "\027\001\002\000\012\003\uff8c\030\uff8c\040\uff8c\041\uff8c" +
    "\001\002\000\006\030\031\033\uff93\001\002\000\004\033" +
    "\036\001\002\000\042\002\uff90\003\uff90\005\uff90\010\uff90" +
    "\011\uff90\012\034\017\uff90\021\uff90\023\uff90\030\uff90\032" +
    "\uff90\033\uff90\041\uff90\043\uff90\055\uff90\056\uff90\001\002" +
    "\000\004\033\uff94\001\002\000\040\002\uff92\003\uff92\005" +
    "\uff92\010\uff92\011\uff92\017\uff92\021\uff92\023\uff92\030\uff92" +
    "\032\uff92\033\uff92\041\uff92\043\uff92\055\uff92\056\uff92\001" +
    "\002\000\004\030\031\001\002\000\040\002\uff91\003\uff91" +
    "\005\uff91\010\uff91\011\uff91\017\uff91\021\uff91\023\uff91\030" +
    "\uff91\032\uff91\033\uff91\041\uff91\043\uff91\055\uff91\056\uff91" +
    "\001\002\000\030\027\uffe7\033\uffe7\041\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\001\002\000\004\030\031\001\002\000\004\033\041\001" +
    "\002\000\004\041\042\001\002\000\030\027\uff7e\033\uff7e" +
    "\041\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\053\uff7e\001\002\000\004\002\uffec\001\002" +
    "\000\004\032\u0113\001\002\000\034\002\uffef\003\uffef\005" +
    "\uffef\010\uffef\011\uffef\017\uffef\021\uffef\023\uffef\030\uffef" +
    "\032\051\041\052\055\uffef\056\uffef\001\002\000\004\032" +
    "\uffe8\001\002\000\034\002\uffef\003\uffef\005\uffef\010\uffef" +
    "\011\uffef\017\uffef\021\uffef\023\uffef\030\uffef\032\051\041" +
    "\052\055\uffef\056\uffef\001\002\000\030\002\uffff\003\uffff" +
    "\005\uffff\010\uffff\011\uffff\017\uffff\021\uffff\023\uffff\030" +
    "\uffff\055\uffff\056\uffff\001\002\000\016\005\014\010\012" +
    "\017\015\021\006\023\024\033\uff99\001\002\000\030\002" +
    "\ufff3\003\ufff3\005\ufff3\010\ufff3\011\ufff3\017\ufff3\021\ufff3" +
    "\023\ufff3\030\ufff3\055\ufff3\056\ufff3\001\002\000\004\033" +
    "\uff9a\001\002\000\004\033\064\001\002\000\004\030\057" +
    "\001\002\000\006\012\061\033\uff95\001\002\000\006\012" +
    "\uff97\033\uff97\001\002\000\004\033\uff98\001\002\000\014" +
    "\005\014\010\012\017\015\021\006\023\024\001\002\000" +
    "\004\033\uff96\001\002\000\006\036\u010e\041\u010d\001\002" +
    "\000\010\003\065\036\uffee\041\uffee\001\002\000\052\003" +
    "\uffca\004\uffca\005\014\006\uffca\010\012\011\066\013\uffca" +
    "\015\uffca\016\uffca\017\015\020\uffca\021\006\022\uffca\023" +
    "\024\024\uffca\025\uffca\030\uffca\037\uffca\055\uffca\056\uffca" +
    "\001\002\000\014\005\014\010\012\017\015\021\006\023" +
    "\024\001\002\000\036\003\123\004\121\006\106\013\100" +
    "\015\125\016\102\020\122\022\124\024\126\025\120\030" +
    "\110\037\uffd6\055\022\056\013\001\002\000\006\030\072" +
    "\041\ufff9\001\002\000\004\041\076\001\002\000\006\012" +
    "\073\041\ufff7\001\002\000\004\041\ufff8\001\002\000\004" +
    "\041\ufffa\001\002\000\052\003\uffca\004\uffca\005\014\006" +
    "\uffca\010\012\011\066\013\uffca\015\uffca\016\uffca\017\015" +
    "\020\uffca\021\006\022\uffca\023\024\024\uffca\025\uffca\030" +
    "\uffca\037\uffca\055\uffca\056\uffca\001\002\000\052\003\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\010\uffc9\011\uffc9\013\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\030\uffc9\037\uffc9\055\uffc9\056\uffc9\001" +
    "\002\000\036\003\uffcb\004\uffcb\006\uffcb\013\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\022\uffcb\024\uffcb\025\uffcb\030\uffcb\037" +
    "\uffcb\055\uffcb\056\uffcb\001\002\000\004\041\uffb6\001\002" +
    "\000\004\041\u0103\001\002\000\004\032\330\001\002\000" +
    "\042\003\123\004\121\006\106\007\uffd6\013\100\014\uffd6" +
    "\015\125\016\102\020\122\022\124\024\126\025\120\030" +
    "\110\037\uffd6\055\022\056\013\001\002\000\042\003\123" +
    "\004\121\006\106\007\uffd6\013\100\014\uffd6\015\125\016" +
    "\102\020\122\022\124\024\126\025\120\030\110\037\uffd6" +
    "\055\022\056\013\001\002\000\004\037\325\001\002\000" +
    "\004\041\uffcf\001\002\000\004\032\307\001\002\000\012" +
    "\003\uffd1\032\uffe5\043\uffd1\054\uffd1\001\002\000\044\003" +
    "\300\004\121\006\106\007\uffd6\013\100\014\uffd6\015\125" +
    "\016\102\020\122\022\124\024\126\025\120\026\276\030" +
    "\110\037\uffd6\055\022\056\013\001\002\000\004\041\274" +
    "\001\002\000\042\003\123\004\121\006\106\007\uffd6\013" +
    "\100\014\uffd6\015\125\016\102\020\122\022\124\024\126" +
    "\025\120\030\110\037\uffd6\055\022\056\013\001\002\000" +
    "\042\003\123\004\121\006\106\007\uffd6\013\100\014\uffd6" +
    "\015\125\016\102\020\122\022\124\024\126\025\120\030" +
    "\110\037\uffd6\055\022\056\013\001\002\000\010\003\260" +
    "\043\262\054\261\001\002\000\004\041\256\001\002\000" +
    "\004\041\254\001\002\000\004\032\240\001\002\000\042" +
    "\003\123\004\121\006\106\007\uffd6\013\100\014\uffd6\015" +
    "\125\016\102\020\122\022\124\024\126\025\120\030\110" +
    "\037\uffd6\055\022\056\013\001\002\000\042\027\143\030" +
    "\145\031\160\032\140\041\233\042\141\044\150\045\144" +
    "\046\151\047\142\050\156\051\161\052\153\053\157\055" +
    "\022\056\013\001\002\000\042\003\123\004\121\006\106" +
    "\007\uffd6\013\100\014\uffd6\015\125\016\102\020\122\022" +
    "\124\024\126\025\120\030\110\037\uffd6\055\022\056\013" +
    "\001\002\000\004\032\173\001\002\000\004\036\uffb7\001" +
    "\002\000\004\032\uffba\001\002\000\004\036\133\001\002" +
    "\000\042\003\123\004\121\006\106\007\uffd6\013\100\014" +
    "\uffd6\015\125\016\102\020\122\022\124\024\126\025\120" +
    "\030\110\037\uffd6\055\022\056\013\001\002\000\010\007" +
    "\uffe0\014\uffe0\037\uffe0\001\002\000\010\007\uffd0\014\uffd0" +
    "\037\uffd0\001\002\000\036\003\123\004\121\006\106\013" +
    "\100\015\125\016\102\020\122\022\124\024\126\025\120" +
    "\030\110\037\uffd6\055\022\056\013\001\002\000\004\037" +
    "\135\001\002\000\004\024\136\001\002\000\004\032\137" +
    "\001\002\000\042\003\155\027\143\030\145\031\160\032" +
    "\140\042\141\044\150\045\144\046\151\047\142\050\156" +
    "\051\161\052\153\053\157\055\022\056\013\001\002\000" +
    "\040\027\143\030\145\031\160\032\140\042\141\044\150" +
    "\045\144\046\151\047\142\050\156\051\161\052\153\053" +
    "\157\055\022\056\013\001\002\000\030\027\uffa3\033\uffa3" +
    "\041\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\001\002\000\044\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\041\uff9f\042\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\055\uff9f\056\uff9f\001\002\000\044\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\055" +
    "\uffc3\056\uffc3\001\002\000\044\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\041\uffc2\042\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2" +
    "\056\uffc2\001\002\000\032\027\uffa5\032\uffe5\033\uffa5\041" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\001\002\000\030\027\uffa1\033\uffa1\041" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\001\002\000\026\027\143\033\170\044" +
    "\150\045\144\046\151\047\142\050\156\051\161\052\153" +
    "\053\157\001\002\000\044\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056" +
    "\uffc1\001\002\000\044\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0" +
    "\001\002\000\030\027\uffa2\033\uffa2\041\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\001\002\000\044\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\001" +
    "\002\000\044\027\143\030\145\031\160\032\140\033\uffa0" +
    "\041\uffa0\042\141\044\150\045\144\046\151\047\142\050" +
    "\156\051\161\052\153\053\157\055\022\056\013\001\002" +
    "\000\004\033\162\001\002\000\044\027\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\041\uff9e\042\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055" +
    "\uff9e\056\uff9e\001\002\000\044\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\041\uff9b\042\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b" +
    "\056\uff9b\001\002\000\030\027\uffa4\033\uffa4\041\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\001\002\000\044\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\041\uff9d\042\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056" +
    "\uff9d\001\002\000\004\041\uffb8\001\002\000\030\027\143" +
    "\033\uffa7\041\uffa7\044\150\045\144\046\151\047\142\050" +
    "\156\051\161\052\153\053\157\001\002\000\040\027\143" +
    "\030\145\031\160\032\140\042\141\044\150\045\144\046" +
    "\151\047\142\050\156\051\161\052\153\053\157\055\022" +
    "\056\013\001\002\000\040\027\143\030\145\031\160\032" +
    "\140\042\141\044\150\045\144\046\151\047\142\050\156" +
    "\051\161\052\153\053\157\055\022\056\013\001\002\000" +
    "\030\027\143\033\uffa6\041\uffa6\044\150\045\144\046\151" +
    "\047\142\050\156\051\161\052\153\053\157\001\002\000" +
    "\030\027\143\033\uffa9\041\uffa9\044\150\045\144\046\151" +
    "\047\142\050\156\051\161\052\153\053\157\001\002\000" +
    "\004\041\uffb9\001\002\000\026\027\143\033\172\044\150" +
    "\045\144\046\151\047\142\050\156\051\161\052\153\053" +
    "\157\001\002\000\030\027\uffa8\033\uffa8\041\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\001\002\000\006\030\175\031\174\001\002\000\004" +
    "\033\uff72\001\002\000\006\033\uff71\043\227\001\002\000" +
    "\004\033\177\001\002\000\004\036\200\001\002\000\010" +
    "\007\uff75\014\uff75\037\uff75\001\002\000\010\007\202\014" +
    "\203\037\uff7a\001\002\000\006\003\217\031\216\001\002" +
    "\000\006\003\206\057\207\001\002\000\004\037\205\001" +
    "\002\000\042\003\uff7d\004\uff7d\006\uff7d\007\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\020\uff7d\022\uff7d\024\uff7d\025" +
    "\uff7d\030\uff7d\037\uff7d\055\uff7d\056\uff7d\001\002\000\040" +
    "\003\123\004\121\006\106\013\100\015\125\016\102\020" +
    "\122\022\124\024\126\025\120\030\110\036\212\037\uffd6" +
    "\055\022\056\013\001\002\000\040\003\123\004\121\006" +
    "\106\013\100\015\125\016\102\020\122\022\124\024\126" +
    "\025\120\030\110\036\212\037\uffd6\055\022\056\013\001" +
    "\002\000\004\037\uff7c\001\002\000\004\037\uff78\001\002" +
    "\000\036\003\123\004\121\006\106\013\100\015\125\016" +
    "\102\020\122\022\124\024\126\025\120\030\110\037\uffd6" +
    "\055\022\056\013\001\002\000\004\037\214\001\002\000" +
    "\004\037\uff79\001\002\000\004\037\uff7b\001\002\000\004" +
    "\057\225\001\002\000\044\003\123\004\121\006\106\007" +
    "\uffd6\013\100\014\uffd6\015\125\016\102\020\122\022\124" +
    "\024\126\025\120\030\110\036\221\037\uffd6\055\022\056" +
    "\013\001\002\000\010\007\uff73\014\uff73\037\uff73\001\002" +
    "\000\036\003\123\004\121\006\106\013\100\015\125\016" +
    "\102\020\122\022\124\024\126\025\120\030\110\037\uffd6" +
    "\055\022\056\013\001\002\000\010\007\uff76\014\uff76\037" +
    "\uff76\001\002\000\004\037\224\001\002\000\010\007\uff74" +
    "\014\uff74\037\uff74\001\002\000\044\003\123\004\121\006" +
    "\106\007\uffd6\013\100\014\uffd6\015\125\016\102\020\122" +
    "\022\124\024\126\025\120\030\110\036\221\037\uffd6\055" +
    "\022\056\013\001\002\000\010\007\uff77\014\uff77\037\uff77" +
    "\001\002\000\004\031\230\001\002\000\004\033\uff70\001" +
    "\002\000\010\007\uffd7\014\uffd7\037\uffd7\001\002\000\026" +
    "\027\143\041\235\044\150\045\144\046\151\047\142\050" +
    "\156\051\161\052\153\053\157\001\002\000\042\003\123" +
    "\004\121\006\106\007\uffd6\013\100\014\uffd6\015\125\016" +
    "\102\020\122\022\124\024\126\025\120\030\110\037\uffd6" +
    "\055\022\056\013\001\002\000\010\007\uffda\014\uffda\037" +
    "\uffda\001\002\000\042\003\123\004\121\006\106\007\uffd6" +
    "\013\100\014\uffd6\015\125\016\102\020\122\022\124\024" +
    "\126\025\120\030\110\037\uffd6\055\022\056\013\001\002" +
    "\000\010\007\uffdb\014\uffdb\037\uffdb\001\002\000\010\007" +
    "\uffd8\014\uffd8\037\uffd8\001\002\000\042\003\242\027\143" +
    "\030\145\031\160\032\140\042\141\044\150\045\144\046" +
    "\151\047\142\050\156\051\161\052\153\053\157\055\022" +
    "\056\013\001\002\000\026\027\143\033\247\044\150\045" +
    "\144\046\151\047\142\050\156\051\161\052\153\053\157" +
    "\001\002\000\004\033\243\001\002\000\004\036\244\001" +
    "\002\000\036\003\123\004\121\006\106\013\100\015\125" +
    "\016\102\020\122\022\124\024\126\025\120\030\110\037" +
    "\uffd6\055\022\056\013\001\002\000\004\037\246\001\002" +
    "\000\044\003\uffc5\004\uffc5\006\uffc5\007\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\030\uffc5\037\uffc5\055\uffc5\056\uffc5\001\002\000" +
    "\006\003\251\036\250\001\002\000\036\003\123\004\121" +
    "\006\106\013\100\015\125\016\102\020\122\022\124\024" +
    "\126\025\120\030\110\037\uffd6\055\022\056\013\001\002" +
    "\000\044\003\uffc4\004\uffc4\006\uffc4\007\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\030\uffc4\037\uffc4\055\uffc4\056\uffc4\001\002\000" +
    "\004\037\253\001\002\000\044\003\uffc6\004\uffc6\006\uffc6" +
    "\007\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6\022" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\037\uffc6\055\uffc6" +
    "\056\uffc6\001\002\000\042\003\123\004\121\006\106\007" +
    "\uffd6\013\100\014\uffd6\015\125\016\102\020\122\022\124" +
    "\024\126\025\120\030\110\037\uffd6\055\022\056\013\001" +
    "\002\000\010\007\uffd9\014\uffd9\037\uffd9\001\002\000\042" +
    "\003\123\004\121\006\106\007\uffd6\013\100\014\uffd6\015" +
    "\125\016\102\020\122\022\124\024\126\025\120\030\110" +
    "\037\uffd6\055\022\056\013\001\002\000\010\007\uffe1\014" +
    "\uffe1\037\uffe1\001\002\000\040\027\143\030\145\031\160" +
    "\032\140\042\141\044\150\045\144\046\151\047\142\050" +
    "\156\051\161\052\153\053\157\055\022\056\013\001\002" +
    "\000\004\041\267\001\002\000\042\003\264\027\143\030" +
    "\145\031\160\032\140\042\141\044\150\045\144\046\151" +
    "\047\142\050\156\051\161\052\153\053\157\055\022\056" +
    "\013\001\002\000\026\027\143\041\266\044\150\045\144" +
    "\046\151\047\142\050\156\051\161\052\153\053\157\001" +
    "\002\000\004\041\265\001\002\000\042\003\uffd3\004\uffd3" +
    "\006\uffd3\007\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020" +
    "\uffd3\022\uffd3\024\uffd3\025\uffd3\030\uffd3\037\uffd3\055\uffd3" +
    "\056\uffd3\001\002\000\042\003\uffd5\004\uffd5\006\uffd5\007" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\022\uffd5" +
    "\024\uffd5\025\uffd5\030\uffd5\037\uffd5\055\uffd5\056\uffd5\001" +
    "\002\000\042\003\uffd4\004\uffd4\006\uffd4\007\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\020\uffd4\022\uffd4\024\uffd4\025" +
    "\uffd4\030\uffd4\037\uffd4\055\uffd4\056\uffd4\001\002\000\026" +
    "\027\143\041\271\044\150\045\144\046\151\047\142\050" +
    "\156\051\161\052\153\053\157\001\002\000\042\003\uffd2" +
    "\004\uffd2\006\uffd2\007\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\020\uffd2\022\uffd2\024\uffd2\025\uffd2\030\uffd2\037\uffd2" +
    "\055\uffd2\056\uffd2\001\002\000\010\007\uffdf\014\uffdf\037" +
    "\uffdf\001\002\000\010\007\uffe3\014\uffe3\037\uffe3\001\002" +
    "\000\042\003\123\004\121\006\106\007\uffd6\013\100\014" +
    "\uffd6\015\125\016\102\020\122\022\124\024\126\025\120" +
    "\030\110\037\uffd6\055\022\056\013\001\002\000\010\007" +
    "\uffde\014\uffde\037\uffde\001\002\000\004\036\304\001\002" +
    "\000\010\007\uffe4\014\uffe4\037\uffe4\001\002\000\044\003" +
    "\123\004\121\006\106\007\uffd6\013\100\014\uffd6\015\125" +
    "\016\102\020\122\022\124\024\126\025\120\030\110\036" +
    "\301\037\uffd6\055\022\056\013\001\002\000\036\003\123" +
    "\004\121\006\106\013\100\015\125\016\102\020\122\022" +
    "\124\024\126\025\120\030\110\037\uffd6\055\022\056\013" +
    "\001\002\000\004\037\303\001\002\000\042\003\uffbe\004" +
    "\uffbe\006\uffbe\007\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\020\uffbe\022\uffbe\024\uffbe\025\uffbe\030\uffbe\037\uffbe\055" +
    "\uffbe\056\uffbe\001\002\000\036\003\123\004\121\006\106" +
    "\013\100\015\125\016\102\020\122\022\124\024\126\025" +
    "\120\030\110\037\uffd6\055\022\056\013\001\002\000\004" +
    "\037\306\001\002\000\042\003\uffbf\004\uffbf\006\uffbf\007" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\022\uffbf" +
    "\024\uffbf\025\uffbf\030\uffbf\037\uffbf\055\uffbf\056\uffbf\001" +
    "\002\000\042\003\311\027\143\030\145\031\160\032\140" +
    "\042\141\044\150\045\144\046\151\047\142\050\156\051" +
    "\161\052\153\053\157\055\022\056\013\001\002\000\026" +
    "\027\143\033\316\044\150\045\144\046\151\047\142\050" +
    "\156\051\161\052\153\053\157\001\002\000\004\033\312" +
    "\001\002\000\004\036\313\001\002\000\036\003\123\004" +
    "\121\006\106\013\100\015\125\016\102\020\122\022\124" +
    "\024\126\025\120\030\110\037\uffd6\055\022\056\013\001" +
    "\002\000\004\037\315\001\002\000\042\003\uffbc\004\uffbc" +
    "\006\uffbc\007\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\020" +
    "\uffbc\022\uffbc\024\uffbc\025\uffbc\030\uffbc\037\uffbc\055\uffbc" +
    "\056\uffbc\001\002\000\006\003\320\036\317\001\002\000" +
    "\036\003\123\004\121\006\106\013\100\015\125\016\102" +
    "\020\122\022\124\024\126\025\120\030\110\037\uffd6\055" +
    "\022\056\013\001\002\000\036\003\123\004\121\006\106" +
    "\013\100\015\125\016\102\020\122\022\124\024\126\025" +
    "\120\030\110\037\uffd6\055\022\056\013\001\002\000\004" +
    "\037\322\001\002\000\042\003\uffbb\004\uffbb\006\uffbb\007" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\022\uffbb" +
    "\024\uffbb\025\uffbb\030\uffbb\037\uffbb\055\uffbb\056\uffbb\001" +
    "\002\000\004\037\324\001\002\000\042\003\uffbd\004\uffbd" +
    "\006\uffbd\007\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020" +
    "\uffbd\022\uffbd\024\uffbd\025\uffbd\030\uffbd\037\uffbd\055\uffbd" +
    "\056\uffbd\001\002\000\030\002\ufff0\003\ufff0\005\ufff0\010" +
    "\ufff0\011\ufff0\017\ufff0\021\ufff0\023\ufff0\030\ufff0\055\ufff0" +
    "\056\ufff0\001\002\000\010\007\uffdd\014\uffdd\037\uffdd\001" +
    "\002\000\010\007\uffe2\014\uffe2\037\uffe2\001\002\000\020" +
    "\003\334\005\014\010\012\017\015\021\006\023\024\030" +
    "\333\001\002\000\004\033\374\001\002\000\004\030\362" +
    "\001\002\000\004\043\354\001\002\000\006\033\336\041" +
    "\335\001\002\000\040\027\143\030\145\031\160\032\140" +
    "\042\141\044\150\045\144\046\151\047\142\050\156\051" +
    "\161\052\153\053\157\055\022\056\013\001\002\000\004" +
    "\036\337\001\002\000\036\003\123\004\121\006\106\013" +
    "\100\015\125\016\102\020\122\022\124\024\126\025\120" +
    "\030\110\037\uffd6\055\022\056\013\001\002\000\004\037" +
    "\341\001\002\000\042\003\uffb4\004\uffb4\006\uffb4\007\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\022\uffb4\024" +
    "\uffb4\025\uffb4\030\uffb4\037\uffb4\055\uffb4\056\uffb4\001\002" +
    "\000\026\027\143\041\343\044\150\045\144\046\151\047" +
    "\142\050\156\051\161\052\153\053\157\001\002\000\010" +
    "\003\346\030\347\054\345\001\002\000\004\033\uffaf\001" +
    "\002\000\004\030\353\001\002\000\004\033\uffaa\001\002" +
    "\000\006\043\351\054\350\001\002\000\004\033\uffac\001" +
    "\002\000\004\042\352\001\002\000\004\033\uffad\001\002" +
    "\000\004\033\uffab\001\002\000\040\027\143\030\145\031" +
    "\160\032\140\042\141\044\150\045\144\046\151\047\142" +
    "\050\156\051\161\052\153\053\157\055\022\056\013\001" +
    "\002\000\026\027\143\041\356\044\150\045\144\046\151" +
    "\047\142\050\156\051\161\052\153\053\157\001\002\000" +
    "\040\027\143\030\145\031\160\032\140\042\141\044\150" +
    "\045\144\046\151\047\142\050\156\051\161\052\153\053" +
    "\157\055\022\056\013\001\002\000\026\027\143\041\360" +
    "\044\150\045\144\046\151\047\142\050\156\051\161\052" +
    "\153\053\157\001\002\000\010\003\346\030\347\054\345" +
    "\001\002\000\004\033\uffb0\001\002\000\004\043\363\001" +
    "\002\000\040\027\143\030\145\031\160\032\140\042\141" +
    "\044\150\045\144\046\151\047\142\050\156\051\161\052" +
    "\153\053\157\055\022\056\013\001\002\000\026\027\143" +
    "\041\365\044\150\045\144\046\151\047\142\050\156\051" +
    "\161\052\153\053\157\001\002\000\042\003\367\027\143" +
    "\030\145\031\160\032\140\042\141\044\150\045\144\046" +
    "\151\047\142\050\156\051\161\052\153\053\157\055\022" +
    "\056\013\001\002\000\026\027\143\041\372\044\150\045" +
    "\144\046\151\047\142\050\156\051\161\052\153\053\157" +
    "\001\002\000\004\041\370\001\002\000\010\003\346\030" +
    "\347\054\345\001\002\000\004\033\uffae\001\002\000\010" +
    "\003\346\030\347\054\345\001\002\000\004\033\uffb1\001" +
    "\002\000\006\003\376\036\375\001\002\000\036\003\123" +
    "\004\121\006\106\013\100\015\125\016\102\020\122\022" +
    "\124\024\126\025\120\030\110\037\uffd6\055\022\056\013" +
    "\001\002\000\036\003\123\004\121\006\106\013\100\015" +
    "\125\016\102\020\122\022\124\024\126\025\120\030\110" +
    "\037\uffd6\055\022\056\013\001\002\000\004\037\u0100\001" +
    "\002\000\042\003\uffb3\004\uffb3\006\uffb3\007\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\020\uffb3\022\uffb3\024\uffb3\025" +
    "\uffb3\030\uffb3\037\uffb3\055\uffb3\056\uffb3\001\002\000\004" +
    "\037\u0102\001\002\000\042\003\uffb5\004\uffb5\006\uffb5\007" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\022\uffb5" +
    "\024\uffb5\025\uffb5\030\uffb5\037\uffb5\055\uffb5\056\uffb5\001" +
    "\002\000\042\003\123\004\121\006\106\007\uffd6\013\100" +
    "\014\uffd6\015\125\016\102\020\122\022\124\024\126\025" +
    "\120\030\110\037\uffd6\055\022\056\013\001\002\000\010" +
    "\007\uffdc\014\uffdc\037\uffdc\001\002\000\004\030\u0106\001" +
    "\002\000\004\043\u0108\001\002\000\004\041\u010b\001\002" +
    "\000\042\003\u010a\027\143\030\145\031\160\032\140\042" +
    "\141\044\150\045\144\046\151\047\142\050\156\051\161" +
    "\052\153\053\157\055\022\056\013\001\002\000\026\027" +
    "\143\041\uffc8\044\150\045\144\046\151\047\142\050\156" +
    "\051\161\052\153\053\157\001\002\000\004\041\uffc7\001" +
    "\002\000\052\003\uffca\004\uffca\005\014\006\uffca\010\012" +
    "\011\066\013\uffca\015\uffca\016\uffca\017\015\020\uffca\021" +
    "\006\022\uffca\023\024\024\uffca\025\uffca\030\uffca\037\uffca" +
    "\055\uffca\056\uffca\001\002\000\036\003\uffcc\004\uffcc\006" +
    "\uffcc\013\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\024\uffcc" +
    "\025\uffcc\030\uffcc\037\uffcc\055\uffcc\056\uffcc\001\002\000" +
    "\030\002\ufff1\003\ufff1\005\ufff1\010\ufff1\011\ufff1\017\ufff1" +
    "\021\ufff1\023\ufff1\030\ufff1\055\ufff1\056\ufff1\001\002\000" +
    "\052\003\uffca\004\uffca\005\014\006\uffca\010\012\011\066" +
    "\013\uffca\015\uffca\016\uffca\017\015\020\uffca\021\006\022" +
    "\uffca\023\024\024\uffca\025\uffca\030\uffca\037\uffca\055\uffca" +
    "\056\uffca\001\002\000\036\003\123\004\121\006\106\013" +
    "\100\015\125\016\102\020\122\022\124\024\126\025\120" +
    "\030\110\037\uffd6\055\022\056\013\001\002\000\004\037" +
    "\u0111\001\002\000\030\002\ufff2\003\ufff2\005\ufff2\010\ufff2" +
    "\011\ufff2\017\ufff2\021\ufff2\023\ufff2\030\ufff2\055\ufff2\056" +
    "\ufff2\001\002\000\030\002\ufffd\003\ufffd\005\ufffd\010\ufffd" +
    "\011\ufffd\017\ufffd\021\ufffd\023\ufffd\030\ufffd\055\ufffd\056" +
    "\ufffd\001\002\000\004\033\u0114\001\002\000\006\003\u0116" +
    "\036\u0115\001\002\000\052\003\uffca\004\uffca\005\014\006" +
    "\uffca\010\012\011\066\013\uffca\015\uffca\016\uffca\017\015" +
    "\020\uffca\021\006\022\uffca\023\024\024\uffca\025\uffca\030" +
    "\uffca\037\uffca\055\uffca\056\uffca\001\002\000\004\037\u0117" +
    "\001\002\000\004\002\uffea\001\002\000\036\003\123\004" +
    "\121\006\106\013\100\015\125\016\102\020\122\022\124" +
    "\024\126\025\120\030\110\037\uffd6\055\022\056\013\001" +
    "\002\000\004\037\u011a\001\002\000\004\002\uffeb\001\002" +
    "\000\030\002\ufffc\003\ufffc\005\ufffc\010\ufffc\011\ufffc\017" +
    "\ufffc\021\ufffc\023\ufffc\030\ufffc\055\ufffc\056\ufffc\001\002" +
    "\000\012\003\uff85\030\uff85\040\uff85\041\uff85\001\002\000" +
    "\014\003\uff80\005\u0120\030\uff80\040\uff80\041\uff80\001\002" +
    "\000\012\003\uff84\030\uff84\040\uff84\041\uff84\001\002\000" +
    "\012\003\uff83\030\uff83\040\uff83\041\uff83\001\002\000\012" +
    "\003\uff81\030\uff81\040\uff81\041\uff81\001\002\000\006\030" +
    "\031\033\uff93\001\002\000\004\033\u0123\001\002\000\004" +
    "\041\u0124\001\002\000\030\027\uff7f\033\uff7f\041\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f" +
    "\053\uff7f\001\002\000\006\003\u0126\030\031\001\002\000" +
    "\004\043\u0108\001\002\000\004\043\u0108\001\002\000\004" +
    "\041\u0129\001\002\000\030\002\000\003\000\005\000\010" +
    "\000\011\000\017\000\021\000\023\000\030\000\055\000" +
    "\056\000\001\002\000\004\041\u012b\001\002\000\030\002" +
    "\ufffe\003\ufffe\005\ufffe\010\ufffe\011\ufffe\017\ufffe\021\ufffe" +
    "\023\ufffe\030\ufffe\055\ufffe\056\ufffe\001\002\000\012\003" +
    "\uff8a\030\uff8a\040\uff8a\041\uff8a\001\002\000\014\003\uff86" +
    "\005\u0130\030\uff86\040\uff86\041\uff86\001\002\000\012\003" +
    "\uff89\030\uff89\040\uff89\041\uff89\001\002\000\012\003\uff88" +
    "\030\uff88\040\uff88\041\uff88\001\002\000\012\003\uff87\030" +
    "\uff87\040\uff87\041\uff87\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\020\003\010\006\020\017\016\020\007\021\025" +
    "\053\022\104\024\001\001\000\004\046\u012b\001\001\000" +
    "\010\017\u0124\020\007\021\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u011b\001\001\000\002\001\001" +
    "\000\006\035\046\073\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\031\040\027\001\001\000\002\001\001\000\004\034\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u0111\001\001\000\002\001\001\000\004\043\047\001" +
    "\001\000\002\001\001\000\014\015\052\017\054\020\007" +
    "\021\025\037\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\062\001\001\000\004\075\055\001\001" +
    "\000\004\016\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\061\017\054\020\007\021\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\066\017\067\020\007\021\025\001\001\000\010" +
    "\017\u0104\020\007\021\025\001\001\000\042\005\104\006" +
    "\111\010\110\011\112\012\102\013\115\014\127\044\103" +
    "\052\100\053\022\060\113\074\114\077\106\100\116\101" +
    "\126\104\024\001\001\000\004\067\070\001\001\000\004" +
    "\103\074\001\001\000\004\070\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\076\017\067\020\007" +
    "\021\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\131\006\111\010\110\011\112\012\102\013\115\014" +
    "\127\033\326\044\103\052\100\053\022\060\113\074\114" +
    "\077\106\100\116\101\126\104\024\001\001\000\044\005" +
    "\131\006\111\010\110\011\112\012\102\013\115\014\127" +
    "\033\325\044\103\052\100\053\022\060\113\074\114\077" +
    "\106\100\116\101\126\104\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\005\131\006\111\010\110\011\112\012\102\013\115" +
    "\014\127\033\276\044\103\052\100\053\022\060\113\074" +
    "\114\077\106\100\116\101\126\104\024\001\001\000\002" +
    "\001\001\000\044\005\131\006\111\010\110\011\112\012" +
    "\102\013\115\014\127\033\272\044\103\052\100\053\022" +
    "\060\113\074\114\077\106\100\116\101\126\104\024\001" +
    "\001\000\044\005\131\006\111\010\110\011\112\012\102" +
    "\013\115\014\127\033\271\044\103\052\100\053\022\060" +
    "\113\074\114\077\106\100\116\101\126\104\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\236\006\111\010\110\011\112" +
    "\012\102\013\115\014\127\044\103\052\100\053\022\060" +
    "\113\074\114\077\106\100\116\101\126\104\024\001\001" +
    "\000\016\006\145\022\231\027\151\030\153\053\022\104" +
    "\024\001\001\000\044\005\131\006\111\010\110\011\112" +
    "\012\102\013\115\014\127\033\230\044\103\052\100\053" +
    "\022\060\113\074\114\077\106\100\116\101\126\104\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\005\131\006\111\010\110" +
    "\011\112\012\102\013\115\014\127\033\130\044\103\052" +
    "\100\053\022\060\113\074\114\077\106\100\116\101\126" +
    "\104\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\005\133\006\111\010\110\011\112\012\102\013\115" +
    "\014\127\044\103\052\100\053\022\060\113\074\114\077" +
    "\106\100\116\101\126\104\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\145\022" +
    "\146\027\151\030\153\053\022\104\024\001\001\000\016" +
    "\006\145\022\170\027\151\030\153\053\022\104\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\163\030\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\145\022\162\027\151\030\153\053\022\104\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\163\030\164\001\001\000\016\006\145\022\166\027" +
    "\151\030\153\053\022\104\024\001\001\000\016\006\145" +
    "\022\165\027\151\030\153\053\022\104\024\001\001\000" +
    "\006\027\163\030\164\001\001\000\006\027\163\030\164" +
    "\001\001\000\002\001\001\000\006\027\163\030\164\001" +
    "\001\000\002\001\001\000\004\065\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\200\001\001\000\004\061\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\210\006\111\010\110\011\112" +
    "\012\102\013\115\014\127\044\103\052\100\053\022\060" +
    "\113\062\214\074\114\077\106\100\116\101\126\104\024" +
    "\001\001\000\044\005\210\006\111\010\110\011\112\012" +
    "\102\013\115\014\127\044\103\052\100\053\022\060\113" +
    "\062\207\074\114\077\106\100\116\101\126\104\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\212" +
    "\006\111\010\110\011\112\012\102\013\115\014\127\044" +
    "\103\052\100\053\022\060\113\074\114\077\106\100\116" +
    "\101\126\104\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\217" +
    "\006\111\010\110\011\112\012\102\013\115\014\127\044" +
    "\103\052\100\053\022\060\113\064\221\074\114\077\106" +
    "\100\116\101\126\104\024\001\001\000\002\001\001\000" +
    "\042\005\222\006\111\010\110\011\112\012\102\013\115" +
    "\014\127\044\103\052\100\053\022\060\113\074\114\077" +
    "\106\100\116\101\126\104\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\005\217\006" +
    "\111\010\110\011\112\012\102\013\115\014\127\044\103" +
    "\052\100\053\022\060\113\064\225\074\114\077\106\100" +
    "\116\101\126\104\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\163\030\164\001\001\000\044\005\131\006\111\010\110" +
    "\011\112\012\102\013\115\014\127\033\233\044\103\052" +
    "\100\053\022\060\113\074\114\077\106\100\116\101\126" +
    "\104\024\001\001\000\002\001\001\000\044\005\131\006" +
    "\111\010\110\011\112\012\102\013\115\014\127\033\235" +
    "\044\103\052\100\053\022\060\113\074\114\077\106\100" +
    "\116\101\126\104\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\145\022\240\027\151\030\153\053" +
    "\022\104\024\001\001\000\006\027\163\030\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\244\006" +
    "\111\010\110\011\112\012\102\013\115\014\127\044\103" +
    "\052\100\053\022\060\113\074\114\077\106\100\116\101" +
    "\126\104\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\251\006\111\010\110\011" +
    "\112\012\102\013\115\014\127\044\103\052\100\053\022" +
    "\060\113\074\114\077\106\100\116\101\126\104\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\131\006\111\010\110\011\112\012\102\013" +
    "\115\014\127\033\254\044\103\052\100\053\022\060\113" +
    "\074\114\077\106\100\116\101\126\104\024\001\001\000" +
    "\002\001\001\000\044\005\131\006\111\010\110\011\112" +
    "\012\102\013\115\014\127\033\256\044\103\052\100\053" +
    "\022\060\113\074\114\077\106\100\116\101\126\104\024" +
    "\001\001\000\002\001\001\000\016\006\145\022\267\027" +
    "\151\030\153\053\022\104\024\001\001\000\002\001\001" +
    "\000\016\006\145\022\262\027\151\030\153\053\022\104" +
    "\024\001\001\000\006\027\163\030\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\163\030\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\005\131\006" +
    "\111\010\110\011\112\012\102\013\115\014\127\033\274" +
    "\044\103\052\100\053\022\060\113\074\114\077\106\100" +
    "\116\101\126\104\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\131\006\111\010" +
    "\110\011\112\012\102\013\115\014\127\033\230\044\103" +
    "\052\100\053\022\060\113\074\114\077\106\100\116\101" +
    "\126\104\024\001\001\000\042\005\301\006\111\010\110" +
    "\011\112\012\102\013\115\014\127\044\103\052\100\053" +
    "\022\060\113\074\114\077\106\100\116\101\126\104\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\304\006\111\010\110\011\112\012\102\013\115\014\127" +
    "\044\103\052\100\053\022\060\113\074\114\077\106\100" +
    "\116\101\126\104\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\145\022\307\027\151\030\153\053" +
    "\022\104\024\001\001\000\006\027\163\030\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\313\006" +
    "\111\010\110\011\112\012\102\013\115\014\127\044\103" +
    "\052\100\053\022\060\113\074\114\077\106\100\116\101" +
    "\126\104\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\322\006\111\010\110\011" +
    "\112\012\102\013\115\014\127\044\103\052\100\053\022" +
    "\060\113\074\114\077\106\100\116\101\126\104\024\001" +
    "\001\000\042\005\320\006\111\010\110\011\112\012\102" +
    "\013\115\014\127\044\103\052\100\053\022\060\113\074" +
    "\114\077\106\100\116\101\126\104\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\331\020\007\021\025\025\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\145\022\341\027\151\030\153\053" +
    "\022\104\024\001\001\000\002\001\001\000\042\005\337" +
    "\006\111\010\110\011\112\012\102\013\115\014\127\044" +
    "\103\052\100\053\022\060\113\074\114\077\106\100\116" +
    "\101\126\104\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\163\030\164\001\001\000\004\026\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\145\022" +
    "\354\027\151\030\153\053\022\104\024\001\001\000\006" +
    "\027\163\030\164\001\001\000\016\006\145\022\356\027" +
    "\151\030\153\053\022\104\024\001\001\000\006\027\163" +
    "\030\164\001\001\000\004\026\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\145\022\363\027\151" +
    "\030\153\053\022\104\024\001\001\000\006\027\163\030" +
    "\164\001\001\000\016\006\145\022\365\027\151\030\153" +
    "\053\022\104\024\001\001\000\006\027\163\030\164\001" +
    "\001\000\002\001\001\000\004\026\370\001\001\000\002" +
    "\001\001\000\004\026\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\u0100\006\111\010\110\011\112" +
    "\012\102\013\115\014\127\044\103\052\100\053\022\060" +
    "\113\074\114\077\106\100\116\101\126\104\024\001\001" +
    "\000\042\005\376\006\111\010\110\011\112\012\102\013" +
    "\115\014\127\044\103\052\100\053\022\060\113\074\114" +
    "\077\106\100\116\101\126\104\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\131\006\111\010\110\011\112\012\102\013" +
    "\115\014\127\033\u0103\044\103\052\100\053\022\060\113" +
    "\074\114\077\106\100\116\101\126\104\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0106\001\001" +
    "\000\002\001\001\000\016\006\145\022\u0108\027\151\030" +
    "\153\053\022\104\024\001\001\000\006\027\163\030\164" +
    "\001\001\000\002\001\001\000\012\007\u010b\017\067\020" +
    "\007\021\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\u010e\017\067\020\007\021\025\001\001\000" +
    "\042\005\u010f\006\111\010\110\011\112\012\102\013\115" +
    "\014\127\044\103\052\100\053\022\060\113\074\114\077" +
    "\106\100\116\101\126\104\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\u0117\017\067\020\007\021\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\u0118\006\111\010\110\011\112\012\102\013\115\014\127" +
    "\044\103\052\100\053\022\060\113\074\114\077\106\100" +
    "\116\101\126\104\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\031\040\u0121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u0126" +
    "\001\001\000\004\032\u0129\001\001\000\004\032\u0127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();
    

    public void syntax_error(Symbol cur_token){
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO PARAMS_LL DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object scolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO PARAMS_LL DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARS_AUX ::= Identificador VARS_AUX_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARS_AUX_AUX ::= Coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARS_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS_PREV_VARS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS_PREV_VARS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS_VARS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;
		System.out.println("asd");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_VARS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().insertarTS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV CLOSE_PAR_SEM Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV CLOSE_PAR_SEM Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c error DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CLOSE_PAR_SEM ::= Parentesis_c 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().recuerdaFuncion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLOSE_PAR_SEM",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= DECLARACIONES_INICIALES LLAMADA_FUNCION Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= TIPO MAIN_2 Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= TIPO MAIN_2 Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN_2 ::= Main 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().wipeStack(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN_2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LLAMADA_FUNCION ::= IDENTIFICADOR_FUNCION Parentesis_a PARAMS_LL_PREV Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().evalFuncion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDENTIFICADOR_FUNCION ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_FUNCION",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= LLAMADA_FUNCION Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= CONTINUE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= Return EXP Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= BREAK Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;
		 System.out.println("Error pero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION_VAR ::= ASIG_SEM Asignacion EXP Scolon 
            {
              Object RESULT =null;
		  SemanticStructures.getInstance().evalBinary();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION_VAR ::= ASIG_SEM Unarios Scolon 
            {
              Object RESULT =null;
		 System.out.println("Unarios") ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION_VAR ::= ASIG_SEM Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION_VAR ::= ASIG_SEM error EXP Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIG_SEM ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_SEM",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BREAK ::= Break 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().checkWhile(String.valueOf(i),iright,ileft);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VAR ::= Const TIPO Identificador DECLARACION_VAR_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_VAR ::= TIPO VARS_AUX ESECOLON_DEKLARAZION DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ESECOLON_DEKLARAZION ::= Scolon 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().insertarTS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESECOLON_DEKLARAZION",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= If Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= If Parentesis_a EXP Parentesis_c error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WHILE ::= WHILE_SEMANTIC Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().reduceWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WHILE ::= WHILE_SEMANTIC Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WHILE ::= WHILE_SEMANTIC Parentesis_a EXP Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WHILE_SEMANTIC ::= While 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().addWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_SEMANTIC",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DO_WHILE ::= DO_SEMANTIC Llave_a SENTENCIA Llave_c While Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().reduceWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DO_WHILE ::= DO_SEMANTIC Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().reduceWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DO_SEMANTIC ::= Do 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().addWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_SEMANTIC",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTINUE ::= Continue 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().checkWhile(String.valueOf(i),iright,ileft);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FOR_SEMANTIC ::= For 
            {
              Object RESULT =null;
		 SemanticStructures.getInstance().addWhileCount(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_SEMANTIC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_FOR ::= error Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon error Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= Literal 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= OP_RELACIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERADOR ::= Mas 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERADOR ::= Menos 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERADOR ::= Multiplicacion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERADOR ::= Division 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERADOR ::= Modulo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),iright,ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMS ::= TIPO IDENTIFICADOR_AUX_SEM PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IDENTIFICADOR_AUX_SEM ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),iright,ileft);  SemanticStructures.getInstance().addCountParams(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_AUX_SEM",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),iright,ileft) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TIPO ::= Int 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPO ::= Char 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPO ::= Void 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LONG_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
