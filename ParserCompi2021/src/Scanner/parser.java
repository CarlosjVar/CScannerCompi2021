
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\042\010\000\002\042" +
    "\006\000\002\042\010\000\002\042\006\000\002\042\005" +
    "\000\002\042\002\000\002\067\004\000\002\067\002\000" +
    "\002\070\003\000\002\070\002\000\002\071\003\000\002" +
    "\071\002\000\002\072\005\000\002\043\003\000\002\043" +
    "\011\000\002\043\006\000\002\043\011\000\002\043\002" +
    "\000\002\002\004\000\002\002\005\000\002\003\012\000" +
    "\002\003\010\000\002\003\002\000\002\006\006\000\002" +
    "\006\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\006\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\002\000\002\073" +
    "\002\000\002\044\007\000\002\044\006\000\002\044\006" +
    "\000\002\033\003\000\002\031\003\000\002\031\002\000" +
    "\002\007\010\000\002\007\006\000\002\007\002\000\002" +
    "\032\004\000\002\032\004\000\002\010\011\000\002\010" +
    "\011\000\002\010\007\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\011\007\000" +
    "\002\011\007\000\002\012\011\000\002\012\011\000\002" +
    "\012\011\000\002\013\012\000\002\013\012\000\002\052" +
    "\004\000\002\014\011\000\002\014\011\000\002\014\011" +
    "\000\002\025\012\000\002\025\011\000\002\025\007\000" +
    "\002\025\012\000\002\026\005\000\002\026\004\000\002" +
    "\026\004\000\002\026\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\004\000\002\022\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\037\003\000\002\037\002\000\002\015\005" +
    "\000\002\016\004\000\002\016\002\000\002\040\003\000" +
    "\002\040\002\000\002\035\004\000\002\034\004\000\002" +
    "\034\002\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\021\004" +
    "\000\002\046\003\000\002\046\004\000\002\047\003\000" +
    "\002\047\002\000\002\020\004\000\002\050\003\000\002" +
    "\050\004\000\002\050\002\000\002\051\003\000\002\051" +
    "\002\000\002\053\007\000\002\053\007\000\002\060\012" +
    "\000\002\061\005\000\002\061\005\000\002\061\002\000" +
    "\002\062\005\000\002\062\003\000\002\063\007\000\002" +
    "\063\006\000\002\063\002\000\002\064\005\000\002\064" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\030\002\ufffb\003\ufffb\005\ufffb\010\ufffb\011" +
    "\ufffb\017\ufffb\021\ufffb\023\ufffb\030\ufffb\055\ufffb\056\ufffb" +
    "\001\002\000\004\002\u0127\001\002\000\030\002\uffea\003" +
    "\016\005\014\010\012\011\007\017\015\021\006\023\023" +
    "\030\017\055\022\056\013\001\002\000\006\005\u0124\021" +
    "\u0123\001\002\000\014\005\014\010\012\017\015\021\006" +
    "\023\023\001\002\000\012\003\uff95\030\uff95\040\uff95\041" +
    "\uff95\001\002\000\004\002\uffee\001\002\000\012\003\uff98" +
    "\030\uff98\040\uff98\041\uff98\001\002\000\004\032\u0117\001" +
    "\002\000\012\003\uff99\030\uff99\040\uff99\041\uff99\001\002" +
    "\000\016\003\uff8c\005\u0114\017\u0113\030\uff8c\040\uff8c\041" +
    "\uff8c\001\002\000\004\041\u0111\001\002\000\004\032\163" +
    "\001\002\000\010\003\037\030\030\040\040\001\002\000" +
    "\004\041\036\001\002\000\004\032\026\001\002\000\012" +
    "\003\uff97\030\uff97\040\uff97\041\uff97\001\002\000\070\003" +
    "\uffe8\004\uffe8\006\uffe8\007\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\027\uffe8\030" +
    "\uffe8\033\uffe8\037\uffe8\041\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056" +
    "\uffe8\001\002\000\012\003\uff96\030\uff96\040\uff96\041\uff96" +
    "\001\002\000\004\030\030\001\002\000\004\033\034\001" +
    "\002\000\042\002\uff9a\003\uff9a\005\uff9a\010\uff9a\011\uff9a" +
    "\012\032\017\uff9a\021\uff9a\023\uff9a\030\uff9a\032\uff9a\033" +
    "\uff9a\041\uff9a\043\uff9a\055\uff9a\056\uff9a\001\002\000\040" +
    "\002\uff9c\003\uff9c\005\uff9c\010\uff9c\011\uff9c\017\uff9c\021" +
    "\uff9c\023\uff9c\030\uff9c\032\uff9c\033\uff9c\041\uff9c\043\uff9c" +
    "\055\uff9c\056\uff9c\001\002\000\004\030\030\001\002\000" +
    "\040\002\uff9b\003\uff9b\005\uff9b\010\uff9b\011\uff9b\017\uff9b" +
    "\021\uff9b\023\uff9b\030\uff9b\032\uff9b\033\uff9b\041\uff9b\043" +
    "\uff9b\055\uff9b\056\uff9b\001\002\000\004\041\035\001\002" +
    "\000\070\003\uff88\004\uff88\006\uff88\007\uff88\013\uff88\014" +
    "\uff88\015\uff88\016\uff88\020\uff88\022\uff88\024\uff88\025\uff88" +
    "\027\uff88\030\uff88\033\uff88\037\uff88\041\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88" +
    "\055\uff88\056\uff88\001\002\000\004\002\uffed\001\002\000" +
    "\034\002\uffef\003\uffef\005\uffef\010\uffef\011\uffef\017\uffef" +
    "\021\uffef\023\uffef\030\uffef\032\043\041\044\055\uffef\056" +
    "\uffef\001\002\000\004\032\u0108\001\002\000\034\002\uffef" +
    "\003\uffef\005\uffef\010\uffef\011\uffef\017\uffef\021\uffef\023" +
    "\uffef\030\uffef\032\043\041\044\055\uffef\056\uffef\001\002" +
    "\000\030\002\uffff\003\uffff\005\uffff\010\uffff\011\uffff\017" +
    "\uffff\021\uffff\023\uffff\030\uffff\055\uffff\056\uffff\001\002" +
    "\000\016\005\014\010\012\017\015\021\006\023\023\033" +
    "\uffa2\001\002\000\030\002\ufff3\003\ufff3\005\ufff3\010\ufff3" +
    "\011\ufff3\017\ufff3\021\ufff3\023\ufff3\030\ufff3\055\ufff3\056" +
    "\ufff3\001\002\000\004\033\uffa3\001\002\000\004\033\054" +
    "\001\002\000\004\030\050\001\002\000\006\012\052\033" +
    "\uff9f\001\002\000\004\033\uffa1\001\002\000\014\005\014" +
    "\010\012\017\015\021\006\023\023\001\002\000\004\033" +
    "\uffa0\001\002\000\010\003\057\036\056\041\055\001\002" +
    "\000\030\002\ufff1\003\ufff1\005\ufff1\010\ufff1\011\ufff1\017" +
    "\ufff1\021\ufff1\023\ufff1\030\ufff1\055\ufff1\056\ufff1\001\002" +
    "\000\052\003\uffcf\004\uffcf\005\014\006\uffcf\010\012\011" +
    "\060\013\uffcf\015\uffcf\016\uffcf\017\015\020\uffcf\021\006" +
    "\022\uffcf\023\023\024\uffcf\025\uffcf\030\uffcf\037\uffcf\055" +
    "\uffcf\056\uffcf\001\002\000\052\003\uffcf\004\uffcf\005\014" +
    "\006\uffcf\010\012\011\060\013\uffcf\015\uffcf\016\uffcf\017" +
    "\015\020\uffcf\021\006\022\uffcf\023\023\024\uffcf\025\uffcf" +
    "\030\uffcf\037\uffcf\055\uffcf\056\uffcf\001\002\000\014\005" +
    "\014\010\012\017\015\021\006\023\023\001\002\000\036" +
    "\003\111\004\110\006\077\013\071\015\113\016\073\020" +
    "\107\022\112\024\114\025\106\030\100\037\uffd9\055\022" +
    "\056\013\001\002\000\006\030\064\041\ufff9\001\002\000" +
    "\004\041\067\001\002\000\006\012\065\041\ufff7\001\002" +
    "\000\004\041\ufff8\001\002\000\004\041\ufffa\001\002\000" +
    "\052\003\uffcf\004\uffcf\005\014\006\uffcf\010\012\011\060" +
    "\013\uffcf\015\uffcf\016\uffcf\017\015\020\uffcf\021\006\022" +
    "\uffcf\023\023\024\uffcf\025\uffcf\030\uffcf\037\uffcf\055\uffcf" +
    "\056\uffcf\001\002\000\036\003\uffd0\004\uffd0\006\uffd0\013" +
    "\uffd0\015\uffd0\016\uffd0\020\uffd0\022\uffd0\024\uffd0\025\uffd0" +
    "\030\uffd0\037\uffd0\055\uffd0\056\uffd0\001\002\000\004\041" +
    "\374\001\002\000\042\003\111\004\110\006\077\007\uffd9" +
    "\013\071\014\uffd9\015\113\016\073\020\107\022\112\024" +
    "\114\025\106\030\100\037\uffd9\055\022\056\013\001\002" +
    "\000\004\032\320\001\002\000\042\003\111\004\110\006" +
    "\077\007\uffd9\013\071\014\uffd9\015\113\016\073\020\107" +
    "\022\112\024\114\025\106\030\100\037\uffd9\055\022\056" +
    "\013\001\002\000\042\003\111\004\110\006\077\007\uffd9" +
    "\013\071\014\uffd9\015\113\016\073\020\107\022\112\024" +
    "\114\025\106\030\100\037\uffd9\055\022\056\013\001\002" +
    "\000\004\037\315\001\002\000\004\041\313\001\002\000" +
    "\010\003\301\032\163\043\303\001\002\000\044\003\272" +
    "\004\110\006\077\007\uffd9\013\071\014\uffd9\015\113\016" +
    "\073\020\107\022\112\024\114\025\106\026\270\030\100" +
    "\037\uffd9\055\022\056\013\001\002\000\042\003\111\004" +
    "\110\006\077\007\uffd9\013\071\014\uffd9\015\113\016\073" +
    "\020\107\022\112\024\114\025\106\030\100\037\uffd9\055" +
    "\022\056\013\001\002\000\042\003\111\004\110\006\077" +
    "\007\uffd9\013\071\014\uffd9\015\113\016\073\020\107\022" +
    "\112\024\114\025\106\030\100\037\uffd9\055\022\056\013" +
    "\001\002\000\042\003\111\004\110\006\077\007\uffd9\013" +
    "\071\014\uffd9\015\113\016\073\020\107\022\112\024\114" +
    "\025\106\030\100\037\uffd9\055\022\056\013\001\002\000" +
    "\004\041\263\001\002\000\004\032\247\001\002\000\042" +
    "\027\124\030\126\031\141\032\121\041\243\042\122\044" +
    "\132\045\125\046\131\047\123\050\137\051\142\052\134" +
    "\053\140\055\022\056\013\001\002\000\042\003\111\004" +
    "\110\006\077\007\uffd9\013\071\014\uffd9\015\113\016\073" +
    "\020\107\022\112\024\114\025\106\030\100\037\uffd9\055" +
    "\022\056\013\001\002\000\042\003\111\004\110\006\077" +
    "\007\uffd9\013\071\014\uffd9\015\113\016\073\020\107\022" +
    "\112\024\114\025\106\030\100\037\uffd9\055\022\056\013" +
    "\001\002\000\004\032\202\001\002\000\004\036\171\001" +
    "\002\000\004\032\120\001\002\000\042\003\111\004\110" +
    "\006\077\007\uffd9\013\071\014\uffd9\015\113\016\073\020" +
    "\107\022\112\024\114\025\106\030\100\037\uffd9\055\022" +
    "\056\013\001\002\000\010\007\uffe3\014\uffe3\037\uffe3\001" +
    "\002\000\010\007\uffd4\014\uffd4\037\uffd4\001\002\000\042" +
    "\003\136\027\124\030\126\031\141\032\121\042\122\044" +
    "\132\045\125\046\131\047\123\050\137\051\142\052\134" +
    "\053\140\055\022\056\013\001\002\000\040\027\124\030" +
    "\126\031\141\032\121\042\122\044\132\045\125\046\131" +
    "\047\123\050\137\051\142\052\134\053\140\055\022\056" +
    "\013\001\002\000\030\027\uffac\033\uffac\041\uffac\044\uffac" +
    "\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\001\002\000\044\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8" +
    "\001\002\000\044\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\041\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\001" +
    "\002\000\044\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\041\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\001\002" +
    "\000\032\027\uffae\032\163\033\uffae\041\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\001\002\000\030\027\uffaa\033\uffaa\041\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\001\002\000\026\027\124\033\154\044\132\045\125\046" +
    "\131\047\123\050\137\051\142\052\134\053\140\001\002" +
    "\000\044\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\001\002\000" +
    "\044\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\041\uffc7" +
    "\042\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\001\002\000\030" +
    "\027\uffab\033\uffab\041\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\001\002\000\044" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\041\uffa5\042" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\055\uffa5\056\uffa5\001\002\000\044\027" +
    "\124\030\126\031\141\032\121\033\uffa9\041\uffa9\042\122" +
    "\044\132\045\125\046\131\047\123\050\137\051\142\052" +
    "\134\053\140\055\022\056\013\001\002\000\004\033\143" +
    "\001\002\000\044\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\041\uffa7\042\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\001" +
    "\002\000\044\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056\uffa4\001\002" +
    "\000\030\027\uffad\033\uffad\041\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\001\002" +
    "\000\044\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\041" +
    "\uffa6\042\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\055\uffa6\056\uffa6\001\002\000" +
    "\004\036\144\001\002\000\036\003\111\004\110\006\077" +
    "\013\071\015\113\016\073\020\107\022\112\024\114\025" +
    "\106\030\100\037\uffd9\055\022\056\013\001\002\000\004" +
    "\037\146\001\002\000\042\003\uffc2\004\uffc2\006\uffc2\007" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\022\uffc2" +
    "\024\uffc2\025\uffc2\030\uffc2\037\uffc2\055\uffc2\056\uffc2\001" +
    "\002\000\030\027\124\033\uffb0\041\uffb0\044\132\045\125" +
    "\046\131\047\123\050\137\051\142\052\134\053\140\001" +
    "\002\000\040\027\124\030\126\031\141\032\121\042\122" +
    "\044\132\045\125\046\131\047\123\050\137\051\142\052" +
    "\134\053\140\055\022\056\013\001\002\000\040\027\124" +
    "\030\126\031\141\032\121\042\122\044\132\045\125\046" +
    "\131\047\123\050\137\051\142\052\134\053\140\055\022" +
    "\056\013\001\002\000\030\027\124\033\uffaf\041\uffaf\044" +
    "\132\045\125\046\131\047\123\050\137\051\142\052\134" +
    "\053\140\001\002\000\030\027\124\033\uffb2\041\uffb2\044" +
    "\132\045\125\046\131\047\123\050\137\051\142\052\134" +
    "\053\140\001\002\000\006\003\156\036\155\001\002\000" +
    "\036\003\111\004\110\006\077\013\071\015\113\016\073" +
    "\020\107\022\112\024\114\025\106\030\100\037\uffd9\055" +
    "\022\056\013\001\002\000\036\003\111\004\110\006\077" +
    "\013\071\015\113\016\073\020\107\022\112\024\114\025" +
    "\106\030\100\037\uffd9\055\022\056\013\001\002\000\004" +
    "\037\160\001\002\000\042\003\uffc1\004\uffc1\006\uffc1\007" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\022\uffc1" +
    "\024\uffc1\025\uffc1\030\uffc1\037\uffc1\055\uffc1\056\uffc1\001" +
    "\002\000\004\037\162\001\002\000\042\003\uffc3\004\uffc3" +
    "\006\uffc3\007\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020" +
    "\uffc3\022\uffc3\024\uffc3\025\uffc3\030\uffc3\037\uffc3\055\uffc3" +
    "\056\uffc3\001\002\000\006\030\030\033\uff9d\001\002\000" +
    "\004\033\166\001\002\000\004\033\uff9e\001\002\000\070" +
    "\003\uffe9\004\uffe9\006\uffe9\007\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\020\uffe9\022\uffe9\024\uffe9\025\uffe9\027\uffe9" +
    "\030\uffe9\033\uffe9\037\uffe9\041\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9" +
    "\056\uffe9\001\002\000\026\027\124\033\170\044\132\045" +
    "\125\046\131\047\123\050\137\051\142\052\134\053\140" +
    "\001\002\000\030\027\uffb1\033\uffb1\041\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\001\002\000\036\003\111\004\110\006\077\013\071\015" +
    "\113\016\073\020\107\022\112\024\114\025\106\030\100" +
    "\037\uffd9\055\022\056\013\001\002\000\004\037\173\001" +
    "\002\000\004\024\174\001\002\000\004\032\175\001\002" +
    "\000\042\003\177\027\124\030\126\031\141\032\121\042" +
    "\122\044\132\045\125\046\131\047\123\050\137\051\142" +
    "\052\134\053\140\055\022\056\013\001\002\000\026\027" +
    "\124\033\201\044\132\045\125\046\131\047\123\050\137" +
    "\051\142\052\134\053\140\001\002\000\004\033\200\001" +
    "\002\000\004\041\uffbf\001\002\000\004\041\uffc0\001\002" +
    "\000\006\030\204\031\203\001\002\000\004\033\uff7c\001" +
    "\002\000\006\033\uff7b\043\236\001\002\000\004\033\206" +
    "\001\002\000\004\036\207\001\002\000\010\007\uff7f\014" +
    "\uff7f\037\uff7f\001\002\000\010\007\211\014\212\037\uff84" +
    "\001\002\000\006\003\226\031\225\001\002\000\006\003" +
    "\215\057\216\001\002\000\004\037\214\001\002\000\042" +
    "\003\uff87\004\uff87\006\uff87\007\uff87\013\uff87\014\uff87\015" +
    "\uff87\016\uff87\020\uff87\022\uff87\024\uff87\025\uff87\030\uff87" +
    "\037\uff87\055\uff87\056\uff87\001\002\000\040\003\111\004" +
    "\110\006\077\013\071\015\113\016\073\020\107\022\112" +
    "\024\114\025\106\030\100\036\221\037\uffd9\055\022\056" +
    "\013\001\002\000\040\003\111\004\110\006\077\013\071" +
    "\015\113\016\073\020\107\022\112\024\114\025\106\030" +
    "\100\036\221\037\uffd9\055\022\056\013\001\002\000\004" +
    "\037\uff86\001\002\000\004\037\uff82\001\002\000\036\003" +
    "\111\004\110\006\077\013\071\015\113\016\073\020\107" +
    "\022\112\024\114\025\106\030\100\037\uffd9\055\022\056" +
    "\013\001\002\000\004\037\223\001\002\000\004\037\uff83" +
    "\001\002\000\004\037\uff85\001\002\000\004\057\234\001" +
    "\002\000\044\003\111\004\110\006\077\007\uffd9\013\071" +
    "\014\uffd9\015\113\016\073\020\107\022\112\024\114\025" +
    "\106\030\100\036\230\037\uffd9\055\022\056\013\001\002" +
    "\000\010\007\uff7d\014\uff7d\037\uff7d\001\002\000\036\003" +
    "\111\004\110\006\077\013\071\015\113\016\073\020\107" +
    "\022\112\024\114\025\106\030\100\037\uffd9\055\022\056" +
    "\013\001\002\000\010\007\uff80\014\uff80\037\uff80\001\002" +
    "\000\004\037\233\001\002\000\010\007\uff7e\014\uff7e\037" +
    "\uff7e\001\002\000\044\003\111\004\110\006\077\007\uffd9" +
    "\013\071\014\uffd9\015\113\016\073\020\107\022\112\024" +
    "\114\025\106\030\100\036\230\037\uffd9\055\022\056\013" +
    "\001\002\000\010\007\uff81\014\uff81\037\uff81\001\002\000" +
    "\004\031\237\001\002\000\004\033\uff7a\001\002\000\010" +
    "\007\uffda\014\uffda\037\uffda\001\002\000\010\007\uffdb\014" +
    "\uffdb\037\uffdb\001\002\000\026\027\124\041\245\044\132" +
    "\045\125\046\131\047\123\050\137\051\142\052\134\053" +
    "\140\001\002\000\042\003\111\004\110\006\077\007\uffd9" +
    "\013\071\014\uffd9\015\113\016\073\020\107\022\112\024" +
    "\114\025\106\030\100\037\uffd9\055\022\056\013\001\002" +
    "\000\010\007\uffdd\014\uffdd\037\uffdd\001\002\000\042\003" +
    "\111\004\110\006\077\007\uffd9\013\071\014\uffd9\015\113" +
    "\016\073\020\107\022\112\024\114\025\106\030\100\037" +
    "\uffd9\055\022\056\013\001\002\000\010\007\uffde\014\uffde" +
    "\037\uffde\001\002\000\042\003\251\027\124\030\126\031" +
    "\141\032\121\042\122\044\132\045\125\046\131\047\123" +
    "\050\137\051\142\052\134\053\140\055\022\056\013\001" +
    "\002\000\026\027\124\033\256\044\132\045\125\046\131" +
    "\047\123\050\137\051\142\052\134\053\140\001\002\000" +
    "\004\033\252\001\002\000\004\036\253\001\002\000\036" +
    "\003\111\004\110\006\077\013\071\015\113\016\073\020" +
    "\107\022\112\024\114\025\106\030\100\037\uffd9\055\022" +
    "\056\013\001\002\000\004\037\255\001\002\000\044\003" +
    "\uffcb\004\uffcb\006\uffcb\007\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\030" +
    "\uffcb\037\uffcb\055\uffcb\056\uffcb\001\002\000\006\003\260" +
    "\036\257\001\002\000\036\003\111\004\110\006\077\013" +
    "\071\015\113\016\073\020\107\022\112\024\114\025\106" +
    "\030\100\037\uffd9\055\022\056\013\001\002\000\044\003" +
    "\uffca\004\uffca\006\uffca\007\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\020\uffca\022\uffca\024\uffca\025\uffca\026\uffca\030" +
    "\uffca\037\uffca\055\uffca\056\uffca\001\002\000\004\037\262" +
    "\001\002\000\044\003\uffcc\004\uffcc\006\uffcc\007\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\030\uffcc\037\uffcc\055\uffcc\056\uffcc\001" +
    "\002\000\042\003\111\004\110\006\077\007\uffd9\013\071" +
    "\014\uffd9\015\113\016\073\020\107\022\112\024\114\025" +
    "\106\030\100\037\uffd9\055\022\056\013\001\002\000\010" +
    "\007\uffe4\014\uffe4\037\uffe4\001\002\000\010\007\uffe2\014" +
    "\uffe2\037\uffe2\001\002\000\010\007\uffe6\014\uffe6\037\uffe6" +
    "\001\002\000\010\007\uffe1\014\uffe1\037\uffe1\001\002\000" +
    "\004\036\276\001\002\000\010\007\uffe7\014\uffe7\037\uffe7" +
    "\001\002\000\044\003\111\004\110\006\077\007\uffd9\013" +
    "\071\014\uffd9\015\113\016\073\020\107\022\112\024\114" +
    "\025\106\030\100\036\273\037\uffd9\055\022\056\013\001" +
    "\002\000\036\003\111\004\110\006\077\013\071\015\113" +
    "\016\073\020\107\022\112\024\114\025\106\030\100\037" +
    "\uffd9\055\022\056\013\001\002\000\004\037\275\001\002" +
    "\000\042\003\uffc4\004\uffc4\006\uffc4\007\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\024\uffc4\025\uffc4" +
    "\030\uffc4\037\uffc4\055\uffc4\056\uffc4\001\002\000\036\003" +
    "\111\004\110\006\077\013\071\015\113\016\073\020\107" +
    "\022\112\024\114\025\106\030\100\037\uffd9\055\022\056" +
    "\013\001\002\000\004\037\300\001\002\000\042\003\uffc5" +
    "\004\uffc5\006\uffc5\007\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\022\uffc5\024\uffc5\025\uffc5\030\uffc5\037\uffc5" +
    "\055\uffc5\056\uffc5\001\002\000\040\027\124\030\126\031" +
    "\141\032\121\042\122\044\132\045\125\046\131\047\123" +
    "\050\137\051\142\052\134\053\140\055\022\056\013\001" +
    "\002\000\004\043\306\001\002\000\004\003\304\001\002" +
    "\000\004\041\305\001\002\000\042\003\uffd6\004\uffd6\006" +
    "\uffd6\007\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6" +
    "\022\uffd6\024\uffd6\025\uffd6\030\uffd6\037\uffd6\055\uffd6\056" +
    "\uffd6\001\002\000\040\027\124\030\126\031\141\032\121" +
    "\042\122\044\132\045\125\046\131\047\123\050\137\051" +
    "\142\052\134\053\140\055\022\056\013\001\002\000\026" +
    "\027\124\041\310\044\132\045\125\046\131\047\123\050" +
    "\137\051\142\052\134\053\140\001\002\000\042\003\uffd7" +
    "\004\uffd7\006\uffd7\007\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\020\uffd7\022\uffd7\024\uffd7\025\uffd7\030\uffd7\037\uffd7" +
    "\055\uffd7\056\uffd7\001\002\000\026\027\124\041\312\044" +
    "\132\045\125\046\131\047\123\050\137\051\142\052\134" +
    "\053\140\001\002\000\042\003\uffd5\004\uffd5\006\uffd5\007" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\022\uffd5" +
    "\024\uffd5\025\uffd5\030\uffd5\037\uffd5\055\uffd5\056\uffd5\001" +
    "\002\000\042\003\111\004\110\006\077\007\uffd9\013\071" +
    "\014\uffd9\015\113\016\073\020\107\022\112\024\114\025" +
    "\106\030\100\037\uffd9\055\022\056\013\001\002\000\010" +
    "\007\uffdc\014\uffdc\037\uffdc\001\002\000\030\002\ufff0\003" +
    "\ufff0\005\ufff0\010\ufff0\011\ufff0\017\ufff0\021\ufff0\023\ufff0" +
    "\030\ufff0\055\ufff0\056\ufff0\001\002\000\010\007\uffe0\014" +
    "\uffe0\037\uffe0\001\002\000\010\007\uffe5\014\uffe5\037\uffe5" +
    "\001\002\000\020\003\324\005\014\010\012\017\015\021" +
    "\006\023\023\030\322\001\002\000\004\033\364\001\002" +
    "\000\004\043\356\001\002\000\004\030\344\001\002\000" +
    "\006\033\326\041\325\001\002\000\040\027\124\030\126" +
    "\031\141\032\121\042\122\044\132\045\125\046\131\047" +
    "\123\050\137\051\142\052\134\053\140\055\022\056\013" +
    "\001\002\000\004\036\327\001\002\000\036\003\111\004" +
    "\110\006\077\013\071\015\113\016\073\020\107\022\112" +
    "\024\114\025\106\030\100\037\uffd9\055\022\056\013\001" +
    "\002\000\004\037\331\001\002\000\042\003\uffbc\004\uffbc" +
    "\006\uffbc\007\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\020" +
    "\uffbc\022\uffbc\024\uffbc\025\uffbc\030\uffbc\037\uffbc\055\uffbc" +
    "\056\uffbc\001\002\000\026\027\124\041\333\044\132\045" +
    "\125\046\131\047\123\050\137\051\142\052\134\053\140" +
    "\001\002\000\010\003\335\030\337\054\334\001\002\000" +
    "\004\030\343\001\002\000\004\033\uffb3\001\002\000\004" +
    "\033\uffb8\001\002\000\006\043\341\054\340\001\002\000" +
    "\004\033\uffb5\001\002\000\004\042\342\001\002\000\004" +
    "\033\uffb6\001\002\000\004\033\uffb4\001\002\000\004\043" +
    "\345\001\002\000\040\027\124\030\126\031\141\032\121" +
    "\042\122\044\132\045\125\046\131\047\123\050\137\051" +
    "\142\052\134\053\140\055\022\056\013\001\002\000\026" +
    "\027\124\041\347\044\132\045\125\046\131\047\123\050" +
    "\137\051\142\052\134\053\140\001\002\000\042\003\351" +
    "\027\124\030\126\031\141\032\121\042\122\044\132\045" +
    "\125\046\131\047\123\050\137\051\142\052\134\053\140" +
    "\055\022\056\013\001\002\000\026\027\124\041\354\044" +
    "\132\045\125\046\131\047\123\050\137\051\142\052\134" +
    "\053\140\001\002\000\004\041\352\001\002\000\010\003" +
    "\335\030\337\054\334\001\002\000\004\033\uffb7\001\002" +
    "\000\010\003\335\030\337\054\334\001\002\000\004\033" +
    "\uffba\001\002\000\040\027\124\030\126\031\141\032\121" +
    "\042\122\044\132\045\125\046\131\047\123\050\137\051" +
    "\142\052\134\053\140\055\022\056\013\001\002\000\026" +
    "\027\124\041\360\044\132\045\125\046\131\047\123\050" +
    "\137\051\142\052\134\053\140\001\002\000\040\027\124" +
    "\030\126\031\141\032\121\042\122\044\132\045\125\046" +
    "\131\047\123\050\137\051\142\052\134\053\140\055\022" +
    "\056\013\001\002\000\026\027\124\041\362\044\132\045" +
    "\125\046\131\047\123\050\137\051\142\052\134\053\140" +
    "\001\002\000\010\003\335\030\337\054\334\001\002\000" +
    "\004\033\uffb9\001\002\000\006\003\366\036\365\001\002" +
    "\000\036\003\111\004\110\006\077\013\071\015\113\016" +
    "\073\020\107\022\112\024\114\025\106\030\100\037\uffd9" +
    "\055\022\056\013\001\002\000\036\003\111\004\110\006" +
    "\077\013\071\015\113\016\073\020\107\022\112\024\114" +
    "\025\106\030\100\037\uffd9\055\022\056\013\001\002\000" +
    "\004\037\370\001\002\000\042\003\uffbb\004\uffbb\006\uffbb" +
    "\007\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\022" +
    "\uffbb\024\uffbb\025\uffbb\030\uffbb\037\uffbb\055\uffbb\056\uffbb" +
    "\001\002\000\004\037\372\001\002\000\042\003\uffbd\004" +
    "\uffbd\006\uffbd\007\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\020\uffbd\022\uffbd\024\uffbd\025\uffbd\030\uffbd\037\uffbd\055" +
    "\uffbd\056\uffbd\001\002\000\010\007\uffdf\014\uffdf\037\uffdf" +
    "\001\002\000\042\003\uffbe\004\uffbe\006\uffbe\007\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe\022\uffbe\024\uffbe" +
    "\025\uffbe\030\uffbe\037\uffbe\055\uffbe\056\uffbe\001\002\000" +
    "\004\030\376\001\002\000\004\043\u0100\001\002\000\004" +
    "\041\u0103\001\002\000\042\003\u0102\027\124\030\126\031" +
    "\141\032\121\042\122\044\132\045\125\046\131\047\123" +
    "\050\137\051\142\052\134\053\140\055\022\056\013\001" +
    "\002\000\026\027\124\041\uffce\044\132\045\125\046\131" +
    "\047\123\050\137\051\142\052\134\053\140\001\002\000" +
    "\004\041\uffcd\001\002\000\052\003\uffcf\004\uffcf\005\014" +
    "\006\uffcf\010\012\011\060\013\uffcf\015\uffcf\016\uffcf\017" +
    "\015\020\uffcf\021\006\022\uffcf\023\023\024\uffcf\025\uffcf" +
    "\030\uffcf\037\uffcf\055\uffcf\056\uffcf\001\002\000\036\003" +
    "\uffd1\004\uffd1\006\uffd1\013\uffd1\015\uffd1\016\uffd1\020\uffd1" +
    "\022\uffd1\024\uffd1\025\uffd1\030\uffd1\037\uffd1\055\uffd1\056" +
    "\uffd1\001\002\000\036\003\111\004\110\006\077\013\071" +
    "\015\113\016\073\020\107\022\112\024\114\025\106\030" +
    "\100\037\uffd9\055\022\056\013\001\002\000\004\037\u0107" +
    "\001\002\000\030\002\ufff2\003\ufff2\005\ufff2\010\ufff2\011" +
    "\ufff2\017\ufff2\021\ufff2\023\ufff2\030\ufff2\055\ufff2\056\ufff2" +
    "\001\002\000\004\033\u0109\001\002\000\006\003\u010b\036" +
    "\u010a\001\002\000\052\003\uffcf\004\uffcf\005\014\006\uffcf" +
    "\010\012\011\060\013\uffcf\015\uffcf\016\uffcf\017\015\020" +
    "\uffcf\021\006\022\uffcf\023\023\024\uffcf\025\uffcf\030\uffcf" +
    "\037\uffcf\055\uffcf\056\uffcf\001\002\000\004\037\u010c\001" +
    "\002\000\004\002\uffeb\001\002\000\036\003\111\004\110" +
    "\006\077\013\071\015\113\016\073\020\107\022\112\024" +
    "\114\025\106\030\100\037\uffd9\055\022\056\013\001\002" +
    "\000\004\037\u010f\001\002\000\004\002\uffec\001\002\000" +
    "\030\002\ufffd\003\ufffd\005\ufffd\010\ufffd\011\ufffd\017\ufffd" +
    "\021\ufffd\023\ufffd\030\ufffd\055\ufffd\056\ufffd\001\002\000" +
    "\030\002\ufffc\003\ufffc\005\ufffc\010\ufffc\011\ufffc\017\ufffc" +
    "\021\ufffc\023\ufffc\030\ufffc\055\ufffc\056\ufffc\001\002\000" +
    "\012\003\uff8f\030\uff8f\040\uff8f\041\uff8f\001\002\000\014" +
    "\003\uff8a\005\u0116\030\uff8a\040\uff8a\041\uff8a\001\002\000" +
    "\012\003\uff8e\030\uff8e\040\uff8e\041\uff8e\001\002\000\012" +
    "\003\uff8d\030\uff8d\040\uff8d\041\uff8d\001\002\000\012\003" +
    "\uff8b\030\uff8b\040\uff8b\041\uff8b\001\002\000\006\030\030" +
    "\033\uff9d\001\002\000\004\033\u0119\001\002\000\004\041" +
    "\u011a\001\002\000\070\003\uff89\004\uff89\006\uff89\007\uff89" +
    "\013\uff89\014\uff89\015\uff89\016\uff89\020\uff89\022\uff89\024" +
    "\uff89\025\uff89\027\uff89\030\uff89\033\uff89\037\uff89\041\uff89" +
    "\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052" +
    "\uff89\053\uff89\055\uff89\056\uff89\001\002\000\006\003\u011c" +
    "\030\030\001\002\000\004\043\u0100\001\002\000\004\043" +
    "\u0100\001\002\000\004\041\u011f\001\002\000\030\002\000" +
    "\003\000\005\000\010\000\011\000\017\000\021\000\023" +
    "\000\030\000\055\000\056\000\001\002\000\004\041\u0121" +
    "\001\002\000\030\002\ufffe\003\ufffe\005\ufffe\010\ufffe\011" +
    "\ufffe\017\ufffe\021\ufffe\023\ufffe\030\ufffe\055\ufffe\056\ufffe" +
    "\001\002\000\012\003\uff94\030\uff94\040\uff94\041\uff94\001" +
    "\002\000\014\003\uff90\005\u0126\030\uff90\040\uff90\041\uff90" +
    "\001\002\000\012\003\uff93\030\uff93\040\uff93\041\uff93\001" +
    "\002\000\012\003\uff92\030\uff92\040\uff92\041\uff92\001\002" +
    "\000\012\003\uff91\030\uff91\040\uff91\041\uff91\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\016\003\010\006\020\017\017\020\007\021\024" +
    "\053\023\001\001\000\004\046\u0121\001\001\000\010\017" +
    "\u011a\020\007\021\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0111\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\026\001\001\000\002\001\001\000" +
    "\004\034\030\001\001\000\002\001\001\000\004\035\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u010f\001\001\000\002" +
    "\001\001\000\004\043\041\001\001\000\002\001\001\000" +
    "\014\015\044\017\046\020\007\021\024\037\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\050\001\001\000\002\001\001" +
    "\000\012\015\052\017\046\020\007\021\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\u0104\017\061\020\007\021\024\001\001\000\012\007" +
    "\060\017\061\020\007\021\024\001\001\000\010\017\374" +
    "\020\007\021\024\001\001\000\030\005\075\006\101\010" +
    "\100\011\102\012\073\013\104\014\114\044\074\052\071" +
    "\053\023\060\103\001\001\000\004\067\062\001\001\000" +
    "\002\001\001\000\004\070\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\067\017\061\020\007\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\116\006\101\010\100\011\102\012\073\013\104\014" +
    "\114\033\372\044\074\052\071\053\023\060\103\001\001" +
    "\000\002\001\001\000\032\005\116\006\101\010\100\011" +
    "\102\012\073\013\104\014\114\033\316\044\074\052\071" +
    "\053\023\060\103\001\001\000\032\005\116\006\101\010" +
    "\100\011\102\012\073\013\104\014\114\033\315\044\074" +
    "\052\071\053\023\060\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\301\001\001\000\032\005\116" +
    "\006\101\010\100\011\102\012\073\013\104\014\114\033" +
    "\270\044\074\052\071\053\023\060\103\001\001\000\032" +
    "\005\116\006\101\010\100\011\102\012\073\013\104\014" +
    "\114\033\266\044\074\052\071\053\023\060\103\001\001" +
    "\000\032\005\116\006\101\010\100\011\102\012\073\013" +
    "\104\014\114\033\265\044\074\052\071\053\023\060\103" +
    "\001\001\000\032\005\116\006\101\010\100\011\102\012" +
    "\073\013\104\014\114\033\264\044\074\052\071\053\023" +
    "\060\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\126\022\241\027\132\030\134\053\023\001\001" +
    "\000\030\005\240\006\101\010\100\011\102\012\073\013" +
    "\104\014\114\044\074\052\071\053\023\060\103\001\001" +
    "\000\032\005\116\006\101\010\100\011\102\012\073\013" +
    "\104\014\114\033\237\044\074\052\071\053\023\060\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\116\006\101\010\100\011\102\012\073" +
    "\013\104\014\114\033\115\044\074\052\071\053\023\060" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\126\022\127\027\132\030\134\053\023\001\001\000" +
    "\014\006\126\022\166\027\132\030\134\053\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\147\030\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\126" +
    "\022\146\027\132\030\134\053\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\144\006" +
    "\101\010\100\011\102\012\073\013\104\014\114\044\074" +
    "\052\071\053\023\060\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\147\030\150\001\001\000\014" +
    "\006\126\022\152\027\132\030\134\053\023\001\001\000" +
    "\014\006\126\022\151\027\132\030\134\053\023\001\001" +
    "\000\006\027\147\030\150\001\001\000\006\027\147\030" +
    "\150\001\001\000\002\001\001\000\030\005\160\006\101" +
    "\010\100\011\102\012\073\013\104\014\114\044\074\052" +
    "\071\053\023\060\103\001\001\000\030\005\156\006\101" +
    "\010\100\011\102\012\073\013\104\014\114\044\074\052" +
    "\071\053\023\060\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\164\040\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\147\030\150\001\001\000" +
    "\002\001\001\000\030\005\171\006\101\010\100\011\102" +
    "\012\073\013\104\014\114\044\074\052\071\053\023\060" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\126\022\175\027\132\030\134\053" +
    "\023\001\001\000\006\027\147\030\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\207\001\001\000" +
    "\004\061\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\217\006" +
    "\101\010\100\011\102\012\073\013\104\014\114\044\074" +
    "\052\071\053\023\060\103\062\223\001\001\000\032\005" +
    "\217\006\101\010\100\011\102\012\073\013\104\014\114" +
    "\044\074\052\071\053\023\060\103\062\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\221\006\101" +
    "\010\100\011\102\012\073\013\104\014\114\044\074\052" +
    "\071\053\023\060\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\226\006\101\010\100\011\102\012\073\013\104\014\114" +
    "\044\074\052\071\053\023\060\103\064\230\001\001\000" +
    "\002\001\001\000\030\005\231\006\101\010\100\011\102" +
    "\012\073\013\104\014\114\044\074\052\071\053\023\060" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\226\006\101\010\100\011\102\012" +
    "\073\013\104\014\114\044\074\052\071\053\023\060\103" +
    "\064\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\147\030\150\001\001\000\032\005\116\006\101\010" +
    "\100\011\102\012\073\013\104\014\114\033\243\044\074" +
    "\052\071\053\023\060\103\001\001\000\002\001\001\000" +
    "\032\005\116\006\101\010\100\011\102\012\073\013\104" +
    "\014\114\033\245\044\074\052\071\053\023\060\103\001" +
    "\001\000\002\001\001\000\014\006\126\022\247\027\132" +
    "\030\134\053\023\001\001\000\006\027\147\030\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\253" +
    "\006\101\010\100\011\102\012\073\013\104\014\114\044" +
    "\074\052\071\053\023\060\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\260\006" +
    "\101\010\100\011\102\012\073\013\104\014\114\044\074" +
    "\052\071\053\023\060\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\116\006\101" +
    "\010\100\011\102\012\073\013\104\014\114\033\263\044" +
    "\074\052\071\053\023\060\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\116\006\101" +
    "\010\100\011\102\012\073\013\104\014\114\033\237\044" +
    "\074\052\071\053\023\060\103\001\001\000\030\005\273" +
    "\006\101\010\100\011\102\012\073\013\104\014\114\044" +
    "\074\052\071\053\023\060\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\276\006\101\010\100\011" +
    "\102\012\073\013\104\014\114\044\074\052\071\053\023" +
    "\060\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\126\022\310\027\132\030\134\053\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\126\022\306\027\132\030\134" +
    "\053\023\001\001\000\006\027\147\030\150\001\001\000" +
    "\002\001\001\000\006\027\147\030\150\001\001\000\002" +
    "\001\001\000\032\005\116\006\101\010\100\011\102\012" +
    "\073\013\104\014\114\033\313\044\074\052\071\053\023" +
    "\060\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\322\020\007" +
    "\021\024\025\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\126" +
    "\022\331\027\132\030\134\053\023\001\001\000\002\001" +
    "\001\000\030\005\327\006\101\010\100\011\102\012\073" +
    "\013\104\014\114\044\074\052\071\053\023\060\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\147" +
    "\030\150\001\001\000\004\026\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\126\022\345" +
    "\027\132\030\134\053\023\001\001\000\006\027\147\030" +
    "\150\001\001\000\014\006\126\022\347\027\132\030\134" +
    "\053\023\001\001\000\006\027\147\030\150\001\001\000" +
    "\002\001\001\000\004\026\352\001\001\000\002\001\001" +
    "\000\004\026\354\001\001\000\002\001\001\000\014\006" +
    "\126\022\356\027\132\030\134\053\023\001\001\000\006" +
    "\027\147\030\150\001\001\000\014\006\126\022\360\027" +
    "\132\030\134\053\023\001\001\000\006\027\147\030\150" +
    "\001\001\000\004\026\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\370\006\101\010\100\011\102" +
    "\012\073\013\104\014\114\044\074\052\071\053\023\060" +
    "\103\001\001\000\030\005\366\006\101\010\100\011\102" +
    "\012\073\013\104\014\114\044\074\052\071\053\023\060" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\376\001\001\000\002" +
    "\001\001\000\014\006\126\022\u0100\027\132\030\134\053" +
    "\023\001\001\000\006\027\147\030\150\001\001\000\002" +
    "\001\001\000\012\007\u0103\017\061\020\007\021\024\001" +
    "\001\000\002\001\001\000\030\005\u0105\006\101\010\100" +
    "\011\102\012\073\013\104\014\114\044\074\052\071\053" +
    "\023\060\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\u010c\017" +
    "\061\020\007\021\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\u010d\006\101\010\100\011\102\012" +
    "\073\013\104\014\114\044\074\052\071\053\023\060\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\164\040\u0117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u011c\001" +
    "\001\000\004\032\u011f\001\001\000\004\032\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();
    

    public void syntax_error(Symbol cur_token){
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO PARAMS_LL DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object scolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO PARAMS_LL DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticStructures.getInstance().insertarTS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARS_AUX ::= Identificador VARS_AUX_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARS_AUX_AUX ::= Coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARS_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS_PREV_VARS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS_PREV_VARS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS_VARS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_VARS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c error DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= DECLARACIONES_INICIALES LLAMADA_FUNCION Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= TIPO Main Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= Return EXP Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;
		 System.out.println("Error pero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION_VAR ::= Identificador NT$0 Asignacion EXP Scolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION_VAR ::= Identificador Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION_VAR ::= Identificador error EXP Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_VAR ::= Const TIPO Identificador DECLARACION_VAR_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_VAR ::= TIPO VARS_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().insertarTS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF ::= If Parentesis_a EXP Parentesis_c error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WHILE ::= While Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= While Parentesis_a EXP Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_FOR ::= error Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon error Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaVariable(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= Literal 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaConst(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= OP_RELACIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR ::= Mas 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADOR ::= Menos 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADOR ::= Multiplicacion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADOR ::= Division 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADOR ::= Modulo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticStructures.getInstance().recuerdaOperador(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO ::= Int 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO ::= Char 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO ::= Void 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tleft,tright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LONG_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
