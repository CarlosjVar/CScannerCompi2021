
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\042\010\000\002\042" +
    "\006\000\002\042\010\000\002\042\006\000\002\042\005" +
    "\000\002\042\002\000\002\067\004\000\002\067\002\000" +
    "\002\070\003\000\002\070\002\000\002\071\003\000\002" +
    "\071\002\000\002\072\005\000\002\043\003\000\002\043" +
    "\011\000\002\043\006\000\002\043\011\000\002\043\002" +
    "\000\002\002\004\000\002\002\005\000\002\003\012\000" +
    "\002\003\010\000\002\003\002\000\002\006\006\000\002" +
    "\006\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\006\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\002\000\002\044" +
    "\006\000\002\044\006\000\002\044\006\000\002\033\003" +
    "\000\002\031\003\000\002\031\002\000\002\007\010\000" +
    "\002\007\006\000\002\007\002\000\002\032\004\000\002" +
    "\032\004\000\002\010\011\000\002\010\011\000\002\010" +
    "\007\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\011\007\000\002\011\007\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\013\012\000\002\013\012\000\002\052\004\000\002\014" +
    "\011\000\002\014\011\000\002\014\011\000\002\025\012" +
    "\000\002\025\011\000\002\025\007\000\002\025\012\000" +
    "\002\026\005\000\002\026\004\000\002\026\004\000\002" +
    "\026\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\004\000\002\022\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\037\003\000\002\037\002\000\002\015" +
    "\005\000\002\016\004\000\002\016\002\000\002\040\003" +
    "\000\002\040\002\000\002\035\004\000\002\034\004\000" +
    "\002\034\002\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\004\000\002\046\003\000\002\046\004\000\002\047\003" +
    "\000\002\047\002\000\002\020\004\000\002\050\003\000" +
    "\002\050\004\000\002\050\002\000\002\051\003\000\002" +
    "\051\002\000\002\053\007\000\002\053\007\000\002\060" +
    "\012\000\002\061\005\000\002\061\005\000\002\061\002" +
    "\000\002\062\005\000\002\062\003\000\002\063\007\000" +
    "\002\063\006\000\002\063\002\000\002\064\005\000\002" +
    "\064\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\030\002\ufffb\003\ufffb\005\ufffb\010\ufffb\011" +
    "\ufffb\017\ufffb\021\ufffb\023\ufffb\030\ufffb\053\ufffb\054\ufffb" +
    "\001\002\000\004\002\u0123\001\002\000\030\002\uffea\003" +
    "\016\005\015\010\012\011\007\017\014\021\006\023\023" +
    "\030\017\053\022\054\013\001\002\000\006\005\u0120\021" +
    "\u011f\001\002\000\014\005\015\010\012\017\014\021\006" +
    "\023\023\001\002\000\012\003\uff98\030\uff98\040\uff98\041" +
    "\uff98\001\002\000\004\002\uffee\001\002\000\012\003\uff9b" +
    "\030\uff9b\040\uff9b\041\uff9b\001\002\000\004\032\u0113\001" +
    "\002\000\016\003\uff8f\005\u0110\017\u010f\030\uff8f\040\uff8f" +
    "\041\uff8f\001\002\000\012\003\uff9c\030\uff9c\040\uff9c\041" +
    "\uff9c\001\002\000\004\041\u010d\001\002\000\004\032\157" +
    "\001\002\000\010\003\037\030\030\040\040\001\002\000" +
    "\004\041\036\001\002\000\004\032\026\001\002\000\012" +
    "\003\uff9a\030\uff9a\040\uff9a\041\uff9a\001\002\000\064\003" +
    "\uffe8\004\uffe8\006\uffe8\007\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\027\uffe8\030" +
    "\uffe8\033\uffe8\037\uffe8\041\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\001\002\000" +
    "\012\003\uff99\030\uff99\040\uff99\041\uff99\001\002\000\004" +
    "\030\030\001\002\000\004\033\034\001\002\000\042\002" +
    "\uff9d\003\uff9d\005\uff9d\010\uff9d\011\uff9d\012\032\017\uff9d" +
    "\021\uff9d\023\uff9d\030\uff9d\032\uff9d\033\uff9d\041\uff9d\043" +
    "\uff9d\053\uff9d\054\uff9d\001\002\000\040\002\uff9f\003\uff9f" +
    "\005\uff9f\010\uff9f\011\uff9f\017\uff9f\021\uff9f\023\uff9f\030" +
    "\uff9f\032\uff9f\033\uff9f\041\uff9f\043\uff9f\053\uff9f\054\uff9f" +
    "\001\002\000\004\030\030\001\002\000\040\002\uff9e\003" +
    "\uff9e\005\uff9e\010\uff9e\011\uff9e\017\uff9e\021\uff9e\023\uff9e" +
    "\030\uff9e\032\uff9e\033\uff9e\041\uff9e\043\uff9e\053\uff9e\054" +
    "\uff9e\001\002\000\004\041\035\001\002\000\064\003\uff8b" +
    "\004\uff8b\006\uff8b\007\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\020\uff8b\022\uff8b\024\uff8b\025\uff8b\027\uff8b\030\uff8b" +
    "\033\uff8b\037\uff8b\041\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\053\uff8b\054\uff8b\001\002\000\004" +
    "\002\uffed\001\002\000\034\002\uffef\003\uffef\005\uffef\010" +
    "\uffef\011\uffef\017\uffef\021\uffef\023\uffef\030\uffef\032\043" +
    "\041\044\053\uffef\054\uffef\001\002\000\004\032\u0104\001" +
    "\002\000\034\002\uffef\003\uffef\005\uffef\010\uffef\011\uffef" +
    "\017\uffef\021\uffef\023\uffef\030\uffef\032\043\041\044\053" +
    "\uffef\054\uffef\001\002\000\030\002\uffff\003\uffff\005\uffff" +
    "\010\uffff\011\uffff\017\uffff\021\uffff\023\uffff\030\uffff\053" +
    "\uffff\054\uffff\001\002\000\016\005\015\010\012\017\014" +
    "\021\006\023\023\033\uffa5\001\002\000\030\002\ufff3\003" +
    "\ufff3\005\ufff3\010\ufff3\011\ufff3\017\ufff3\021\ufff3\023\ufff3" +
    "\030\ufff3\053\ufff3\054\ufff3\001\002\000\004\033\uffa6\001" +
    "\002\000\004\033\054\001\002\000\004\030\050\001\002" +
    "\000\006\012\052\033\uffa2\001\002\000\004\033\uffa4\001" +
    "\002\000\014\005\015\010\012\017\014\021\006\023\023" +
    "\001\002\000\004\033\uffa3\001\002\000\010\003\057\036" +
    "\056\041\055\001\002\000\030\002\ufff1\003\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\017\ufff1\021\ufff1\023\ufff1\030\ufff1\053" +
    "\ufff1\054\ufff1\001\002\000\052\003\uffd0\004\uffd0\005\015" +
    "\006\uffd0\010\012\011\060\013\uffd0\015\uffd0\016\uffd0\017" +
    "\014\020\uffd0\021\006\022\uffd0\023\023\024\uffd0\025\uffd0" +
    "\030\uffd0\037\uffd0\053\uffd0\054\uffd0\001\002\000\052\003" +
    "\uffd0\004\uffd0\005\015\006\uffd0\010\012\011\060\013\uffd0" +
    "\015\uffd0\016\uffd0\017\014\020\uffd0\021\006\022\uffd0\023" +
    "\023\024\uffd0\025\uffd0\030\uffd0\037\uffd0\053\uffd0\054\uffd0" +
    "\001\002\000\014\005\015\010\012\017\014\021\006\023" +
    "\023\001\002\000\036\003\111\004\110\006\077\013\071" +
    "\015\113\016\073\020\107\022\112\024\115\025\106\030" +
    "\100\037\uffd9\053\022\054\013\001\002\000\006\030\064" +
    "\041\ufff9\001\002\000\004\041\067\001\002\000\006\012" +
    "\065\041\ufff7\001\002\000\004\041\ufff8\001\002\000\004" +
    "\041\ufffa\001\002\000\052\003\uffd0\004\uffd0\005\015\006" +
    "\uffd0\010\012\011\060\013\uffd0\015\uffd0\016\uffd0\017\014" +
    "\020\uffd0\021\006\022\uffd0\023\023\024\uffd0\025\uffd0\030" +
    "\uffd0\037\uffd0\053\uffd0\054\uffd0\001\002\000\036\003\uffd1" +
    "\004\uffd1\006\uffd1\013\uffd1\015\uffd1\016\uffd1\020\uffd1\022" +
    "\uffd1\024\uffd1\025\uffd1\030\uffd1\037\uffd1\053\uffd1\054\uffd1" +
    "\001\002\000\004\041\370\001\002\000\042\003\111\004" +
    "\110\006\077\007\uffd9\013\071\014\uffd9\015\113\016\073" +
    "\020\107\022\112\024\115\025\106\030\100\037\uffd9\053" +
    "\022\054\013\001\002\000\004\032\314\001\002\000\042" +
    "\003\111\004\110\006\077\007\uffd9\013\071\014\uffd9\015" +
    "\113\016\073\020\107\022\112\024\115\025\106\030\100" +
    "\037\uffd9\053\022\054\013\001\002\000\042\003\111\004" +
    "\110\006\077\007\uffd9\013\071\014\uffd9\015\113\016\073" +
    "\020\107\022\112\024\115\025\106\030\100\037\uffd9\053" +
    "\022\054\013\001\002\000\004\037\311\001\002\000\004" +
    "\041\307\001\002\000\010\003\277\032\157\043\300\001" +
    "\002\000\044\003\270\004\110\006\077\007\uffd9\013\071" +
    "\014\uffd9\015\113\016\073\020\107\022\112\024\115\025" +
    "\106\026\266\030\100\037\uffd9\053\022\054\013\001\002" +
    "\000\042\003\111\004\110\006\077\007\uffd9\013\071\014" +
    "\uffd9\015\113\016\073\020\107\022\112\024\115\025\106" +
    "\030\100\037\uffd9\053\022\054\013\001\002\000\042\003" +
    "\111\004\110\006\077\007\uffd9\013\071\014\uffd9\015\113" +
    "\016\073\020\107\022\112\024\115\025\106\030\100\037" +
    "\uffd9\053\022\054\013\001\002\000\042\003\111\004\110" +
    "\006\077\007\uffd9\013\071\014\uffd9\015\113\016\073\020" +
    "\107\022\112\024\115\025\106\030\100\037\uffd9\053\022" +
    "\054\013\001\002\000\004\041\261\001\002\000\004\032" +
    "\245\001\002\000\036\027\122\030\124\031\136\032\117" +
    "\041\241\042\120\044\127\045\123\046\130\047\121\050" +
    "\135\051\131\053\022\054\013\001\002\000\042\003\111" +
    "\004\110\006\077\007\uffd9\013\071\014\uffd9\015\113\016" +
    "\073\020\107\022\112\024\115\025\106\030\100\037\uffd9" +
    "\053\022\054\013\001\002\000\042\003\111\004\110\006" +
    "\077\007\uffd9\013\071\014\uffd9\015\113\016\073\020\107" +
    "\022\112\024\115\025\106\030\100\037\uffd9\053\022\054" +
    "\013\001\002\000\004\032\200\001\002\000\004\036\167" +
    "\001\002\000\042\003\111\004\110\006\077\007\uffd9\013" +
    "\071\014\uffd9\015\113\016\073\020\107\022\112\024\115" +
    "\025\106\030\100\037\uffd9\053\022\054\013\001\002\000" +
    "\004\032\116\001\002\000\036\003\134\027\122\030\124" +
    "\031\136\032\117\042\120\044\127\045\123\046\130\047" +
    "\121\050\135\051\131\053\022\054\013\001\002\000\034" +
    "\027\122\030\124\031\136\032\117\042\120\044\127\045" +
    "\123\046\130\047\121\050\135\051\131\053\022\054\013" +
    "\001\002\000\024\027\uffad\033\uffad\041\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\001\002\000\040" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\041\uffa9\042" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\053\uffa9\054\uffa9\001\002\000\040\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\041\uffca\042\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\053\uffca\054\uffca\001" +
    "\002\000\040\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\041\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\053\uffc9\054\uffc9\001\002\000\026\027\uffaf" +
    "\032\157\033\uffaf\041\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\001\002\000\024\027\uffab\033\uffab" +
    "\041\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\001\002\000\022\027\122\033\150\044\127\045\123" +
    "\046\130\047\121\050\135\051\131\001\002\000\040\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\041\uffc8\042\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\053" +
    "\uffc8\054\uffc8\001\002\000\040\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\001\002" +
    "\000\040\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\041" +
    "\uffa7\042\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\053\uffa7\054\uffa7\001\002\000\024\027\uffac\033" +
    "\uffac\041\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\001\002\000\040\027\122\030\124\031\136\032" +
    "\117\033\uffaa\041\uffaa\042\120\044\127\045\123\046\130" +
    "\047\121\050\135\051\131\053\022\054\013\001\002\000" +
    "\004\033\137\001\002\000\040\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8\001\002" +
    "\000\024\027\uffae\033\uffae\041\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\001\002\000\004\036\140" +
    "\001\002\000\036\003\111\004\110\006\077\013\071\015" +
    "\113\016\073\020\107\022\112\024\115\025\106\030\100" +
    "\037\uffd9\053\022\054\013\001\002\000\004\037\142\001" +
    "\002\000\042\003\uffc3\004\uffc3\006\uffc3\007\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\020\uffc3\022\uffc3\024\uffc3\025" +
    "\uffc3\030\uffc3\037\uffc3\053\uffc3\054\uffc3\001\002\000\024" +
    "\027\122\033\uffb1\041\uffb1\044\127\045\123\046\130\047" +
    "\121\050\135\051\131\001\002\000\034\027\122\030\124" +
    "\031\136\032\117\042\120\044\127\045\123\046\130\047" +
    "\121\050\135\051\131\053\022\054\013\001\002\000\034" +
    "\027\122\030\124\031\136\032\117\042\120\044\127\045" +
    "\123\046\130\047\121\050\135\051\131\053\022\054\013" +
    "\001\002\000\024\027\122\033\uffb0\041\uffb0\044\127\045" +
    "\123\046\130\047\121\050\135\051\131\001\002\000\024" +
    "\027\122\033\uffb3\041\uffb3\044\127\045\123\046\130\047" +
    "\121\050\135\051\131\001\002\000\006\003\152\036\151" +
    "\001\002\000\036\003\111\004\110\006\077\013\071\015" +
    "\113\016\073\020\107\022\112\024\115\025\106\030\100" +
    "\037\uffd9\053\022\054\013\001\002\000\036\003\111\004" +
    "\110\006\077\013\071\015\113\016\073\020\107\022\112" +
    "\024\115\025\106\030\100\037\uffd9\053\022\054\013\001" +
    "\002\000\004\037\154\001\002\000\042\003\uffc2\004\uffc2" +
    "\006\uffc2\007\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020" +
    "\uffc2\022\uffc2\024\uffc2\025\uffc2\030\uffc2\037\uffc2\053\uffc2" +
    "\054\uffc2\001\002\000\004\037\156\001\002\000\042\003" +
    "\uffc4\004\uffc4\006\uffc4\007\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\020\uffc4\022\uffc4\024\uffc4\025\uffc4\030\uffc4\037" +
    "\uffc4\053\uffc4\054\uffc4\001\002\000\006\030\030\033\uffa0" +
    "\001\002\000\004\033\162\001\002\000\004\033\uffa1\001" +
    "\002\000\064\003\uffe9\004\uffe9\006\uffe9\007\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\020\uffe9\022\uffe9\024\uffe9\025" +
    "\uffe9\027\uffe9\030\uffe9\033\uffe9\037\uffe9\041\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\053\uffe9\054" +
    "\uffe9\001\002\000\022\027\122\033\164\044\127\045\123" +
    "\046\130\047\121\050\135\051\131\001\002\000\024\027" +
    "\uffb2\033\uffb2\041\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\001\002\000\010\007\uffe3\014\uffe3\037" +
    "\uffe3\001\002\000\010\007\uffd5\014\uffd5\037\uffd5\001\002" +
    "\000\036\003\111\004\110\006\077\013\071\015\113\016" +
    "\073\020\107\022\112\024\115\025\106\030\100\037\uffd9" +
    "\053\022\054\013\001\002\000\004\037\171\001\002\000" +
    "\004\024\172\001\002\000\004\032\173\001\002\000\036" +
    "\003\175\027\122\030\124\031\136\032\117\042\120\044" +
    "\127\045\123\046\130\047\121\050\135\051\131\053\022" +
    "\054\013\001\002\000\022\027\122\033\177\044\127\045" +
    "\123\046\130\047\121\050\135\051\131\001\002\000\004" +
    "\033\176\001\002\000\004\041\uffc0\001\002\000\004\041" +
    "\uffc1\001\002\000\006\030\202\031\201\001\002\000\004" +
    "\033\uff7f\001\002\000\006\033\uff7e\043\234\001\002\000" +
    "\004\033\204\001\002\000\004\036\205\001\002\000\010" +
    "\007\uff82\014\uff82\037\uff82\001\002\000\010\007\210\014" +
    "\207\037\uff87\001\002\000\006\003\224\055\225\001\002" +
    "\000\006\003\214\031\213\001\002\000\004\037\212\001" +
    "\002\000\042\003\uff8a\004\uff8a\006\uff8a\007\uff8a\013\uff8a" +
    "\014\uff8a\015\uff8a\016\uff8a\020\uff8a\022\uff8a\024\uff8a\025" +
    "\uff8a\030\uff8a\037\uff8a\053\uff8a\054\uff8a\001\002\000\004" +
    "\055\222\001\002\000\044\003\111\004\110\006\077\007" +
    "\uffd9\013\071\014\uffd9\015\113\016\073\020\107\022\112" +
    "\024\115\025\106\030\100\036\216\037\uffd9\053\022\054" +
    "\013\001\002\000\010\007\uff80\014\uff80\037\uff80\001\002" +
    "\000\036\003\111\004\110\006\077\013\071\015\113\016" +
    "\073\020\107\022\112\024\115\025\106\030\100\037\uffd9" +
    "\053\022\054\013\001\002\000\010\007\uff83\014\uff83\037" +
    "\uff83\001\002\000\004\037\221\001\002\000\010\007\uff81" +
    "\014\uff81\037\uff81\001\002\000\044\003\111\004\110\006" +
    "\077\007\uffd9\013\071\014\uffd9\015\113\016\073\020\107" +
    "\022\112\024\115\025\106\030\100\036\216\037\uffd9\053" +
    "\022\054\013\001\002\000\010\007\uff84\014\uff84\037\uff84" +
    "\001\002\000\040\003\111\004\110\006\077\013\071\015" +
    "\113\016\073\020\107\022\112\024\115\025\106\030\100" +
    "\036\230\037\uffd9\053\022\054\013\001\002\000\040\003" +
    "\111\004\110\006\077\013\071\015\113\016\073\020\107" +
    "\022\112\024\115\025\106\030\100\036\230\037\uffd9\053" +
    "\022\054\013\001\002\000\004\037\uff89\001\002\000\004" +
    "\037\uff85\001\002\000\036\003\111\004\110\006\077\013" +
    "\071\015\113\016\073\020\107\022\112\024\115\025\106" +
    "\030\100\037\uffd9\053\022\054\013\001\002\000\004\037" +
    "\232\001\002\000\004\037\uff86\001\002\000\004\037\uff88" +
    "\001\002\000\004\031\235\001\002\000\004\033\uff7d\001" +
    "\002\000\010\007\uffda\014\uffda\037\uffda\001\002\000\010" +
    "\007\uffdb\014\uffdb\037\uffdb\001\002\000\022\027\122\041" +
    "\243\044\127\045\123\046\130\047\121\050\135\051\131" +
    "\001\002\000\042\003\111\004\110\006\077\007\uffd9\013" +
    "\071\014\uffd9\015\113\016\073\020\107\022\112\024\115" +
    "\025\106\030\100\037\uffd9\053\022\054\013\001\002\000" +
    "\010\007\uffdd\014\uffdd\037\uffdd\001\002\000\042\003\111" +
    "\004\110\006\077\007\uffd9\013\071\014\uffd9\015\113\016" +
    "\073\020\107\022\112\024\115\025\106\030\100\037\uffd9" +
    "\053\022\054\013\001\002\000\010\007\uffde\014\uffde\037" +
    "\uffde\001\002\000\036\003\247\027\122\030\124\031\136" +
    "\032\117\042\120\044\127\045\123\046\130\047\121\050" +
    "\135\051\131\053\022\054\013\001\002\000\022\027\122" +
    "\033\254\044\127\045\123\046\130\047\121\050\135\051" +
    "\131\001\002\000\004\033\250\001\002\000\004\036\251" +
    "\001\002\000\036\003\111\004\110\006\077\013\071\015" +
    "\113\016\073\020\107\022\112\024\115\025\106\030\100" +
    "\037\uffd9\053\022\054\013\001\002\000\004\037\253\001" +
    "\002\000\044\003\uffcc\004\uffcc\006\uffcc\007\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\030\uffcc\037\uffcc\053\uffcc\054\uffcc\001\002" +
    "\000\006\003\256\036\255\001\002\000\036\003\111\004" +
    "\110\006\077\013\071\015\113\016\073\020\107\022\112" +
    "\024\115\025\106\030\100\037\uffd9\053\022\054\013\001" +
    "\002\000\044\003\uffcb\004\uffcb\006\uffcb\007\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\020\uffcb\022\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\030\uffcb\037\uffcb\053\uffcb\054\uffcb\001\002" +
    "\000\004\037\260\001\002\000\044\003\uffcd\004\uffcd\006" +
    "\uffcd\007\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd" +
    "\022\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\037\uffcd\053" +
    "\uffcd\054\uffcd\001\002\000\042\003\111\004\110\006\077" +
    "\007\uffd9\013\071\014\uffd9\015\113\016\073\020\107\022" +
    "\112\024\115\025\106\030\100\037\uffd9\053\022\054\013" +
    "\001\002\000\010\007\uffe4\014\uffe4\037\uffe4\001\002\000" +
    "\010\007\uffe2\014\uffe2\037\uffe2\001\002\000\010\007\uffe6" +
    "\014\uffe6\037\uffe6\001\002\000\010\007\uffe1\014\uffe1\037" +
    "\uffe1\001\002\000\004\036\274\001\002\000\010\007\uffe7" +
    "\014\uffe7\037\uffe7\001\002\000\044\003\111\004\110\006" +
    "\077\007\uffd9\013\071\014\uffd9\015\113\016\073\020\107" +
    "\022\112\024\115\025\106\030\100\036\271\037\uffd9\053" +
    "\022\054\013\001\002\000\036\003\111\004\110\006\077" +
    "\013\071\015\113\016\073\020\107\022\112\024\115\025" +
    "\106\030\100\037\uffd9\053\022\054\013\001\002\000\004" +
    "\037\273\001\002\000\042\003\uffc5\004\uffc5\006\uffc5\007" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5" +
    "\024\uffc5\025\uffc5\030\uffc5\037\uffc5\053\uffc5\054\uffc5\001" +
    "\002\000\036\003\111\004\110\006\077\013\071\015\113" +
    "\016\073\020\107\022\112\024\115\025\106\030\100\037" +
    "\uffd9\053\022\054\013\001\002\000\004\037\276\001\002" +
    "\000\042\003\uffc6\004\uffc6\006\uffc6\007\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\020\uffc6\022\uffc6\024\uffc6\025\uffc6" +
    "\030\uffc6\037\uffc6\053\uffc6\054\uffc6\001\002\000\034\027" +
    "\122\030\124\031\136\032\117\042\120\044\127\045\123" +
    "\046\130\047\121\050\135\051\131\053\022\054\013\001" +
    "\002\000\036\003\302\027\122\030\124\031\136\032\117" +
    "\042\120\044\127\045\123\046\130\047\121\050\135\051" +
    "\131\053\022\054\013\001\002\000\022\027\122\041\304" +
    "\044\127\045\123\046\130\047\121\050\135\051\131\001" +
    "\002\000\004\041\303\001\002\000\042\003\uffd7\004\uffd7" +
    "\006\uffd7\007\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020" +
    "\uffd7\022\uffd7\024\uffd7\025\uffd7\030\uffd7\037\uffd7\053\uffd7" +
    "\054\uffd7\001\002\000\042\003\uffd8\004\uffd8\006\uffd8\007" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\022\uffd8" +
    "\024\uffd8\025\uffd8\030\uffd8\037\uffd8\053\uffd8\054\uffd8\001" +
    "\002\000\022\027\122\041\306\044\127\045\123\046\130" +
    "\047\121\050\135\051\131\001\002\000\042\003\uffd6\004" +
    "\uffd6\006\uffd6\007\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\020\uffd6\022\uffd6\024\uffd6\025\uffd6\030\uffd6\037\uffd6\053" +
    "\uffd6\054\uffd6\001\002\000\042\003\111\004\110\006\077" +
    "\007\uffd9\013\071\014\uffd9\015\113\016\073\020\107\022" +
    "\112\024\115\025\106\030\100\037\uffd9\053\022\054\013" +
    "\001\002\000\010\007\uffdc\014\uffdc\037\uffdc\001\002\000" +
    "\030\002\ufff0\003\ufff0\005\ufff0\010\ufff0\011\ufff0\017\ufff0" +
    "\021\ufff0\023\ufff0\030\ufff0\053\ufff0\054\ufff0\001\002\000" +
    "\010\007\uffe0\014\uffe0\037\uffe0\001\002\000\010\007\uffe5" +
    "\014\uffe5\037\uffe5\001\002\000\020\003\320\005\015\010" +
    "\012\017\014\021\006\023\023\030\317\001\002\000\004" +
    "\033\360\001\002\000\004\030\346\001\002\000\004\043" +
    "\340\001\002\000\006\033\322\041\321\001\002\000\034" +
    "\027\122\030\124\031\136\032\117\042\120\044\127\045" +
    "\123\046\130\047\121\050\135\051\131\053\022\054\013" +
    "\001\002\000\004\036\323\001\002\000\036\003\111\004" +
    "\110\006\077\013\071\015\113\016\073\020\107\022\112" +
    "\024\115\025\106\030\100\037\uffd9\053\022\054\013\001" +
    "\002\000\004\037\325\001\002\000\042\003\uffbd\004\uffbd" +
    "\006\uffbd\007\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020" +
    "\uffbd\022\uffbd\024\uffbd\025\uffbd\030\uffbd\037\uffbd\053\uffbd" +
    "\054\uffbd\001\002\000\022\027\122\041\327\044\127\045" +
    "\123\046\130\047\121\050\135\051\131\001\002\000\010" +
    "\003\330\030\333\052\332\001\002\000\004\033\uffb4\001" +
    "\002\000\004\033\uffb9\001\002\000\004\030\337\001\002" +
    "\000\006\043\335\052\334\001\002\000\004\033\uffb6\001" +
    "\002\000\004\042\336\001\002\000\004\033\uffb7\001\002" +
    "\000\004\033\uffb5\001\002\000\034\027\122\030\124\031" +
    "\136\032\117\042\120\044\127\045\123\046\130\047\121" +
    "\050\135\051\131\053\022\054\013\001\002\000\022\027" +
    "\122\041\342\044\127\045\123\046\130\047\121\050\135" +
    "\051\131\001\002\000\034\027\122\030\124\031\136\032" +
    "\117\042\120\044\127\045\123\046\130\047\121\050\135" +
    "\051\131\053\022\054\013\001\002\000\022\027\122\041" +
    "\344\044\127\045\123\046\130\047\121\050\135\051\131" +
    "\001\002\000\010\003\330\030\333\052\332\001\002\000" +
    "\004\033\uffba\001\002\000\004\043\347\001\002\000\034" +
    "\027\122\030\124\031\136\032\117\042\120\044\127\045" +
    "\123\046\130\047\121\050\135\051\131\053\022\054\013" +
    "\001\002\000\022\027\122\041\351\044\127\045\123\046" +
    "\130\047\121\050\135\051\131\001\002\000\036\003\353" +
    "\027\122\030\124\031\136\032\117\042\120\044\127\045" +
    "\123\046\130\047\121\050\135\051\131\053\022\054\013" +
    "\001\002\000\022\027\122\041\356\044\127\045\123\046" +
    "\130\047\121\050\135\051\131\001\002\000\004\041\354" +
    "\001\002\000\010\003\330\030\333\052\332\001\002\000" +
    "\004\033\uffb8\001\002\000\010\003\330\030\333\052\332" +
    "\001\002\000\004\033\uffbb\001\002\000\006\003\362\036" +
    "\361\001\002\000\036\003\111\004\110\006\077\013\071" +
    "\015\113\016\073\020\107\022\112\024\115\025\106\030" +
    "\100\037\uffd9\053\022\054\013\001\002\000\036\003\111" +
    "\004\110\006\077\013\071\015\113\016\073\020\107\022" +
    "\112\024\115\025\106\030\100\037\uffd9\053\022\054\013" +
    "\001\002\000\004\037\364\001\002\000\042\003\uffbc\004" +
    "\uffbc\006\uffbc\007\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\020\uffbc\022\uffbc\024\uffbc\025\uffbc\030\uffbc\037\uffbc\053" +
    "\uffbc\054\uffbc\001\002\000\004\037\366\001\002\000\042" +
    "\003\uffbe\004\uffbe\006\uffbe\007\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\020\uffbe\022\uffbe\024\uffbe\025\uffbe\030\uffbe" +
    "\037\uffbe\053\uffbe\054\uffbe\001\002\000\010\007\uffdf\014" +
    "\uffdf\037\uffdf\001\002\000\042\003\uffbf\004\uffbf\006\uffbf" +
    "\007\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\022" +
    "\uffbf\024\uffbf\025\uffbf\030\uffbf\037\uffbf\053\uffbf\054\uffbf" +
    "\001\002\000\004\030\372\001\002\000\004\043\374\001" +
    "\002\000\004\041\377\001\002\000\036\003\376\027\122" +
    "\030\124\031\136\032\117\042\120\044\127\045\123\046" +
    "\130\047\121\050\135\051\131\053\022\054\013\001\002" +
    "\000\022\027\122\041\uffcf\044\127\045\123\046\130\047" +
    "\121\050\135\051\131\001\002\000\004\041\uffce\001\002" +
    "\000\052\003\uffd0\004\uffd0\005\015\006\uffd0\010\012\011" +
    "\060\013\uffd0\015\uffd0\016\uffd0\017\014\020\uffd0\021\006" +
    "\022\uffd0\023\023\024\uffd0\025\uffd0\030\uffd0\037\uffd0\053" +
    "\uffd0\054\uffd0\001\002\000\036\003\uffd2\004\uffd2\006\uffd2" +
    "\013\uffd2\015\uffd2\016\uffd2\020\uffd2\022\uffd2\024\uffd2\025" +
    "\uffd2\030\uffd2\037\uffd2\053\uffd2\054\uffd2\001\002\000\036" +
    "\003\111\004\110\006\077\013\071\015\113\016\073\020" +
    "\107\022\112\024\115\025\106\030\100\037\uffd9\053\022" +
    "\054\013\001\002\000\004\037\u0103\001\002\000\030\002" +
    "\ufff2\003\ufff2\005\ufff2\010\ufff2\011\ufff2\017\ufff2\021\ufff2" +
    "\023\ufff2\030\ufff2\053\ufff2\054\ufff2\001\002\000\004\033" +
    "\u0105\001\002\000\006\003\u0107\036\u0106\001\002\000\052" +
    "\003\uffd0\004\uffd0\005\015\006\uffd0\010\012\011\060\013" +
    "\uffd0\015\uffd0\016\uffd0\017\014\020\uffd0\021\006\022\uffd0" +
    "\023\023\024\uffd0\025\uffd0\030\uffd0\037\uffd0\053\uffd0\054" +
    "\uffd0\001\002\000\004\037\u0108\001\002\000\004\002\uffeb" +
    "\001\002\000\036\003\111\004\110\006\077\013\071\015" +
    "\113\016\073\020\107\022\112\024\115\025\106\030\100" +
    "\037\uffd9\053\022\054\013\001\002\000\004\037\u010b\001" +
    "\002\000\004\002\uffec\001\002\000\030\002\ufffd\003\ufffd" +
    "\005\ufffd\010\ufffd\011\ufffd\017\ufffd\021\ufffd\023\ufffd\030" +
    "\ufffd\053\ufffd\054\ufffd\001\002\000\030\002\ufffc\003\ufffc" +
    "\005\ufffc\010\ufffc\011\ufffc\017\ufffc\021\ufffc\023\ufffc\030" +
    "\ufffc\053\ufffc\054\ufffc\001\002\000\012\003\uff92\030\uff92" +
    "\040\uff92\041\uff92\001\002\000\014\003\uff8d\005\u0112\030" +
    "\uff8d\040\uff8d\041\uff8d\001\002\000\012\003\uff91\030\uff91" +
    "\040\uff91\041\uff91\001\002\000\012\003\uff90\030\uff90\040" +
    "\uff90\041\uff90\001\002\000\012\003\uff8e\030\uff8e\040\uff8e" +
    "\041\uff8e\001\002\000\006\030\030\033\uffa0\001\002\000" +
    "\004\033\u0115\001\002\000\004\041\u0116\001\002\000\064" +
    "\003\uff8c\004\uff8c\006\uff8c\007\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\020\uff8c\022\uff8c\024\uff8c\025\uff8c\027\uff8c" +
    "\030\uff8c\033\uff8c\037\uff8c\041\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\053\uff8c\054\uff8c\001\002" +
    "\000\006\003\u0118\030\030\001\002\000\004\043\374\001" +
    "\002\000\004\043\374\001\002\000\004\041\u011b\001\002" +
    "\000\030\002\000\003\000\005\000\010\000\011\000\017" +
    "\000\021\000\023\000\030\000\053\000\054\000\001\002" +
    "\000\004\041\u011d\001\002\000\030\002\ufffe\003\ufffe\005" +
    "\ufffe\010\ufffe\011\ufffe\017\ufffe\021\ufffe\023\ufffe\030\ufffe" +
    "\053\ufffe\054\ufffe\001\002\000\012\003\uff97\030\uff97\040" +
    "\uff97\041\uff97\001\002\000\014\003\uff93\005\u0122\030\uff93" +
    "\040\uff93\041\uff93\001\002\000\012\003\uff96\030\uff96\040" +
    "\uff96\041\uff96\001\002\000\012\003\uff95\030\uff95\040\uff95" +
    "\041\uff95\001\002\000\012\003\uff94\030\uff94\040\uff94\041" +
    "\uff94\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\016\003\010\006\020\017\017\020\007\021\024" +
    "\053\023\001\001\000\004\046\u011d\001\001\000\010\017" +
    "\u0116\020\007\021\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u010d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\026\001\001\000\002\001\001\000" +
    "\004\034\030\001\001\000\002\001\001\000\004\035\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u010b\001\001\000\002" +
    "\001\001\000\004\043\041\001\001\000\002\001\001\000" +
    "\014\015\044\017\046\020\007\021\024\037\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\050\001\001\000\002\001\001" +
    "\000\012\015\052\017\046\020\007\021\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\u0100\017\061\020\007\021\024\001\001\000\012\007" +
    "\060\017\061\020\007\021\024\001\001\000\010\017\370" +
    "\020\007\021\024\001\001\000\030\005\075\006\101\010" +
    "\100\011\102\012\073\013\104\014\113\044\074\052\071" +
    "\053\023\060\103\001\001\000\004\067\062\001\001\000" +
    "\002\001\001\000\004\070\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\067\017\061\020\007\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\165\006\101\010\100\011\102\012\073\013\104\014" +
    "\113\033\366\044\074\052\071\053\023\060\103\001\001" +
    "\000\002\001\001\000\032\005\165\006\101\010\100\011" +
    "\102\012\073\013\104\014\113\033\312\044\074\052\071" +
    "\053\023\060\103\001\001\000\032\005\165\006\101\010" +
    "\100\011\102\012\073\013\104\014\113\033\311\044\074" +
    "\052\071\053\023\060\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\165\006\101" +
    "\010\100\011\102\012\073\013\104\014\113\033\266\044" +
    "\074\052\071\053\023\060\103\001\001\000\032\005\165" +
    "\006\101\010\100\011\102\012\073\013\104\014\113\033" +
    "\264\044\074\052\071\053\023\060\103\001\001\000\032" +
    "\005\165\006\101\010\100\011\102\012\073\013\104\014" +
    "\113\033\263\044\074\052\071\053\023\060\103\001\001" +
    "\000\032\005\165\006\101\010\100\011\102\012\073\013" +
    "\104\014\113\033\262\044\074\052\071\053\023\060\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\124\022\237\027\131\030\132\053\023\001\001\000\030" +
    "\005\236\006\101\010\100\011\102\012\073\013\104\014" +
    "\113\044\074\052\071\053\023\060\103\001\001\000\032" +
    "\005\165\006\101\010\100\011\102\012\073\013\104\014" +
    "\113\033\235\044\074\052\071\053\023\060\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\165\006" +
    "\101\010\100\011\102\012\073\013\104\014\113\033\164" +
    "\044\074\052\071\053\023\060\103\001\001\000\002\001" +
    "\001\000\014\006\124\022\125\027\131\030\132\053\023" +
    "\001\001\000\014\006\124\022\162\027\131\030\132\053" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\143\030\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\124\022\142\027\131\030\132\053\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\140\006\101\010\100\011\102" +
    "\012\073\013\104\014\113\044\074\052\071\053\023\060" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\143\030\144\001\001\000\014\006\124\022\146\027" +
    "\131\030\132\053\023\001\001\000\014\006\124\022\145" +
    "\027\131\030\132\053\023\001\001\000\006\027\143\030" +
    "\144\001\001\000\006\027\143\030\144\001\001\000\002" +
    "\001\001\000\030\005\154\006\101\010\100\011\102\012" +
    "\073\013\104\014\113\044\074\052\071\053\023\060\103" +
    "\001\001\000\030\005\152\006\101\010\100\011\102\012" +
    "\073\013\104\014\113\044\074\052\071\053\023\060\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\160\040\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\143\030\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\167\006\101\010" +
    "\100\011\102\012\073\013\104\014\113\044\074\052\071" +
    "\053\023\060\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\124\022\173\027\131" +
    "\030\132\053\023\001\001\000\006\027\143\030\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\205" +
    "\001\001\000\004\061\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\214\006\101\010\100\011\102\012" +
    "\073\013\104\014\113\044\074\052\071\053\023\060\103" +
    "\064\216\001\001\000\002\001\001\000\030\005\217\006" +
    "\101\010\100\011\102\012\073\013\104\014\113\044\074" +
    "\052\071\053\023\060\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\214\006\101" +
    "\010\100\011\102\012\073\013\104\014\113\044\074\052" +
    "\071\053\023\060\103\064\222\001\001\000\002\001\001" +
    "\000\032\005\226\006\101\010\100\011\102\012\073\013" +
    "\104\014\113\044\074\052\071\053\023\060\103\062\232" +
    "\001\001\000\032\005\226\006\101\010\100\011\102\012" +
    "\073\013\104\014\113\044\074\052\071\053\023\060\103" +
    "\062\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\230\006\101\010\100\011\102\012\073\013\104" +
    "\014\113\044\074\052\071\053\023\060\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\143\030\144\001\001\000\032\005\165" +
    "\006\101\010\100\011\102\012\073\013\104\014\113\033" +
    "\241\044\074\052\071\053\023\060\103\001\001\000\002" +
    "\001\001\000\032\005\165\006\101\010\100\011\102\012" +
    "\073\013\104\014\113\033\243\044\074\052\071\053\023" +
    "\060\103\001\001\000\002\001\001\000\014\006\124\022" +
    "\245\027\131\030\132\053\023\001\001\000\006\027\143" +
    "\030\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\251\006\101\010\100\011\102\012\073\013\104" +
    "\014\113\044\074\052\071\053\023\060\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\256\006\101\010\100\011\102\012\073\013\104\014" +
    "\113\044\074\052\071\053\023\060\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\165\006\101\010\100\011\102\012\073\013\104\014\113" +
    "\033\261\044\074\052\071\053\023\060\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\165\006\101\010\100\011\102\012\073\013\104\014\113" +
    "\033\235\044\074\052\071\053\023\060\103\001\001\000" +
    "\030\005\271\006\101\010\100\011\102\012\073\013\104" +
    "\014\113\044\074\052\071\053\023\060\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\274\006\101" +
    "\010\100\011\102\012\073\013\104\014\113\044\074\052" +
    "\071\053\023\060\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\124\022\304\027\131\030\132\053" +
    "\023\001\001\000\014\006\124\022\300\027\131\030\132" +
    "\053\023\001\001\000\006\027\143\030\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\143\030\144\001\001\000\002\001\001\000\032\005" +
    "\165\006\101\010\100\011\102\012\073\013\104\014\113" +
    "\033\307\044\074\052\071\053\023\060\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\315\020\007\021\024\025\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\124\022\325\027\131\030" +
    "\132\053\023\001\001\000\002\001\001\000\030\005\323" +
    "\006\101\010\100\011\102\012\073\013\104\014\113\044" +
    "\074\052\071\053\023\060\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\143\030\144\001\001\000" +
    "\004\026\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\124\022\340\027\131\030\132\053\023\001\001\000" +
    "\006\027\143\030\144\001\001\000\014\006\124\022\342" +
    "\027\131\030\132\053\023\001\001\000\006\027\143\030" +
    "\144\001\001\000\004\026\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\124\022\347\027\131\030" +
    "\132\053\023\001\001\000\006\027\143\030\144\001\001" +
    "\000\014\006\124\022\351\027\131\030\132\053\023\001" +
    "\001\000\006\027\143\030\144\001\001\000\002\001\001" +
    "\000\004\026\354\001\001\000\002\001\001\000\004\026" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\364\006\101\010\100\011\102\012\073\013\104\014" +
    "\113\044\074\052\071\053\023\060\103\001\001\000\030" +
    "\005\362\006\101\010\100\011\102\012\073\013\104\014" +
    "\113\044\074\052\071\053\023\060\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\372\001\001\000\002\001\001\000\014\006" +
    "\124\022\374\027\131\030\132\053\023\001\001\000\006" +
    "\027\143\030\144\001\001\000\002\001\001\000\012\007" +
    "\377\017\061\020\007\021\024\001\001\000\002\001\001" +
    "\000\030\005\u0101\006\101\010\100\011\102\012\073\013" +
    "\104\014\113\044\074\052\071\053\023\060\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\u0108\017\061\020\007\021\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\u0109\006\101\010\100\011\102\012\073\013\104\014\113" +
    "\044\074\052\071\053\023\060\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u0110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\160" +
    "\040\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u0118\001\001\000\004\032\u011b" +
    "\001\001\000\004\032\u0119\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();
    

    public void syntax_error(Symbol cur_token){
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO PARAMS_LL DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object scolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO PARAMS_LL DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticStructures.getInstance().insertarTS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error DECLARACION_VAR_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARS_AUX ::= Identificador VARS_AUX_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARS_AUX_AUX ::= Coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARS_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS_AUX_AUX",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS_PREV_VARS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS_PREV_VARS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV_VARS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS_VARS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_VARS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c error DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= DECLARACIONES_INICIALES LLAMADA_FUNCION Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= TIPO Main Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= Return EXP Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;
		 System.out.println("Error pero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION_VAR ::= Identificador Asignacion EXP Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION_VAR ::= Identificador Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION_VAR ::= Identificador error EXP Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_VAR ::= Const TIPO Identificador DECLARACION_VAR_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_VAR ::= TIPO VARS_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
		SemanticStructures.getInstance().insertarTS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_a EXP Parentesis_c error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // WHILE ::= While Parentesis_a EXP Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WHILE ::= While Parentesis_a EXP Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_FOR ::= error Scolon EXP Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon error Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= OP_RELACIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SemanticStructures.getInstance().recuerdaId(String.valueOf(i),ileft,iright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO ::= Int 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO ::= Char 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPO ::= Void 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t; SemanticStructures.getInstance().recuerdaTipo(String.valueOf(t),tleft,tright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LONG_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
