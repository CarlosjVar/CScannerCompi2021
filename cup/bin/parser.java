
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\003\006\000\002\002" +
    "\006\000\002\004\011\000\002\005\015\000\002\005\002" +
    "\000\002\007\007\000\002\006\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\005\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\002\000\002\036\003\000\002\034\003\000\002\034\002" +
    "\000\002\010\006\000\002\035\004\000\002\035\002\000" +
    "\002\012\011\000\002\026\003\000\002\026\005\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\013\010\000\002\044\004\000" +
    "\002\044\002\000\002\014\012\000\002\015\013\000\002" +
    "\016\011\000\002\030\012\000\002\030\011\000\002\031" +
    "\005\000\002\031\004\000\002\031\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\042\003\000\002\042" +
    "\002\000\002\017\005\000\002\020\004\000\002\020\002" +
    "\000\002\043\003\000\002\043\002\000\002\040\004\000" +
    "\002\037\004\000\002\037\002\000\002\021\003\000\002" +
    "\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\010\005\011\010\004\023\005\001\002\000" +
    "\006\030\uffc1\040\uffc1\001\002\000\006\030\uffc0\040\uffc0" +
    "\001\002\000\010\005\ufffc\010\ufffc\023\ufffc\001\002\000" +
    "\004\002\017\001\002\000\004\030\012\001\002\000\006" +
    "\030\uffc2\040\uffc2\001\002\000\004\041\013\001\002\000" +
    "\012\004\014\005\uffde\010\uffde\023\uffde\001\002\000\016" +
    "\004\014\005\uffde\010\uffde\023\uffde\024\uffde\036\uffde\001" +
    "\002\000\010\005\000\010\000\023\000\001\002\000\016" +
    "\005\uffdf\010\uffdf\023\uffdf\024\uffdf\026\uffdf\036\uffdf\001" +
    "\002\000\004\002\001\001\002\000\010\005\011\010\004" +
    "\023\005\001\002\000\004\041\236\001\002\000\006\030" +
    "\024\040\023\001\002\000\004\032\231\001\002\000\004" +
    "\032\025\001\002\000\012\005\011\010\004\023\005\033" +
    "\uffcb\001\002\000\004\033\uffcc\001\002\000\004\030\225" +
    "\001\002\000\004\033\031\001\002\000\004\036\032\001" +
    "\002\000\030\004\044\005\uffef\010\uffef\011\033\015\042" +
    "\016\047\023\uffef\024\037\025\035\030\050\037\ufff2\001" +
    "\002\000\010\005\ufff0\010\ufff0\023\ufff0\001\002\000\030" +
    "\004\044\005\uffef\010\uffef\011\033\015\042\016\047\023" +
    "\uffef\024\037\025\035\030\050\037\ufff2\001\002\000\004" +
    "\032\216\001\002\000\030\004\044\005\uffef\010\uffef\011" +
    "\033\015\042\016\047\023\uffef\024\037\025\035\030\050" +
    "\037\ufff2\001\002\000\004\032\206\001\002\000\010\005" +
    "\011\010\004\023\005\001\002\000\004\041\177\001\002" +
    "\000\004\036\167\001\002\000\030\004\044\005\uffef\010" +
    "\uffef\011\033\015\042\016\047\023\uffef\024\037\025\035" +
    "\030\050\037\ufff2\001\002\000\030\004\044\005\uffef\010" +
    "\uffef\011\033\015\042\016\047\023\uffef\024\037\025\035" +
    "\030\050\037\ufff2\001\002\000\032\004\160\005\uffef\010" +
    "\uffef\011\033\015\042\016\047\023\uffef\024\037\025\035" +
    "\026\uffde\030\050\037\ufff2\001\002\000\004\037\153\001" +
    "\002\000\004\032\070\001\002\000\004\032\057\001\002" +
    "\000\030\004\044\005\uffef\010\uffef\011\033\015\042\016" +
    "\047\023\uffef\024\037\025\035\030\050\037\ufff2\001\002" +
    "\000\004\041\053\001\002\000\030\004\044\005\uffef\010" +
    "\uffef\011\033\015\042\016\047\023\uffef\024\037\025\035" +
    "\030\050\037\ufff2\001\002\000\004\037\ufff6\001\002\000" +
    "\004\037\ufff1\001\002\000\004\037\ufff4\001\002\000\006" +
    "\030\062\033\uffc6\001\002\000\004\033\066\001\002\000" +
    "\004\033\uffc7\001\002\000\006\012\064\033\uffc3\001\002" +
    "\000\004\033\uffc5\001\002\000\004\030\062\001\002\000" +
    "\004\033\uffc4\001\002\000\004\041\067\001\002\000\030" +
    "\004\ufffb\005\ufffb\010\ufffb\011\ufffb\015\ufffb\016\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\030\ufffb\037\ufffb\001\002\000\012" +
    "\005\011\010\004\023\005\030\072\001\002\000\004\033" +
    "\147\001\002\000\004\043\141\001\002\000\004\030\074" +
    "\001\002\000\004\043\075\001\002\000\020\030\102\031" +
    "\100\032\101\042\104\047\106\050\077\051\103\001\002" +
    "\000\014\033\uffd0\041\uffd0\047\uffd0\050\uffd0\051\uffd0\001" +
    "\002\000\024\030\uffce\031\uffce\032\uffce\033\uffce\041\uffce" +
    "\042\uffce\047\uffce\050\uffce\051\uffce\001\002\000\014\033" +
    "\uffd2\041\uffd2\047\uffd2\050\uffd2\051\uffd2\001\002\000\020" +
    "\030\102\031\100\032\101\042\104\047\106\050\077\051" +
    "\103\001\002\000\014\033\uffd3\041\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\001\002\000\024\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\041\uffcd\042\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002" +
    "\000\014\033\uffd1\041\uffd1\047\uffd1\050\uffd1\051\uffd1\001" +
    "\002\000\012\041\107\047\106\050\077\051\103\001\002" +
    "\000\024\030\uffcf\031\uffcf\032\uffcf\033\uffcf\041\uffcf\042" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000\010\030\116" +
    "\031\113\042\112\001\002\000\020\030\102\031\100\032" +
    "\101\042\104\047\106\050\077\051\103\001\002\000\014" +
    "\033\uffd5\041\uffd5\047\106\050\077\051\103\001\002\000" +
    "\006\033\uffe8\041\uffe8\001\002\000\006\033\uffe7\041\uffe7" +
    "\001\002\000\004\041\127\001\002\000\006\033\uffea\041" +
    "\uffea\001\002\000\020\027\117\033\uffe6\041\uffe6\044\124" +
    "\045\121\046\120\052\122\001\002\000\010\030\uffe5\031" +
    "\uffe5\042\uffe5\001\002\000\010\030\uffe1\031\uffe1\042\uffe1" +
    "\001\002\000\010\030\uffe3\031\uffe3\042\uffe3\001\002\000" +
    "\010\030\uffe4\031\uffe4\042\uffe4\001\002\000\010\030\126" +
    "\031\113\042\112\001\002\000\010\030\uffe2\031\uffe2\042" +
    "\uffe2\001\002\000\006\033\uffe9\041\uffe9\001\002\000\006" +
    "\033\uffe6\041\uffe6\001\002\000\006\030\132\052\130\001" +
    "\002\000\004\030\136\001\002\000\004\033\uffda\001\002" +
    "\000\006\043\134\052\133\001\002\000\004\033\uffd7\001" +
    "\002\000\004\042\135\001\002\000\004\033\uffd8\001\002" +
    "\000\004\033\uffd6\001\002\000\012\033\140\047\106\050" +
    "\077\051\103\001\002\000\014\033\uffd4\041\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\001\002\000\020\030\102\031\100\032" +
    "\101\042\104\047\106\050\077\051\103\001\002\000\012" +
    "\041\143\047\106\050\077\051\103\001\002\000\010\030" +
    "\116\031\113\042\112\001\002\000\004\041\145\001\002" +
    "\000\006\030\132\052\130\001\002\000\004\033\uffd9\001" +
    "\002\000\004\036\150\001\002\000\030\004\044\005\uffef" +
    "\010\uffef\011\033\015\042\016\047\023\uffef\024\037\025" +
    "\035\030\050\037\ufff2\001\002\000\004\037\152\001\002" +
    "\000\030\004\uffdb\005\uffdb\010\uffdb\011\uffdb\015\uffdb\016" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\037\uffdb\001\002" +
    "\000\004\041\154\001\002\000\012\004\014\005\uffde\010" +
    "\uffde\023\uffde\001\002\000\010\005\ufffd\010\ufffd\023\ufffd" +
    "\001\002\000\004\037\ufff9\001\002\000\004\026\162\001" +
    "\002\000\032\004\160\005\uffef\010\uffef\011\033\015\042" +
    "\016\047\023\uffef\024\037\025\035\026\uffde\030\050\037" +
    "\ufff2\001\002\000\004\037\ufff3\001\002\000\004\036\163" +
    "\001\002\000\030\004\044\005\uffef\010\uffef\011\033\015" +
    "\042\016\047\023\uffef\024\037\025\035\030\050\037\ufff2" +
    "\001\002\000\004\037\165\001\002\000\030\004\uffe0\005" +
    "\uffe0\010\uffe0\011\uffe0\015\uffe0\016\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\030\uffe0\037\uffe0\001\002\000\004\037\ufff8\001" +
    "\002\000\030\004\044\005\uffef\010\uffef\011\033\015\042" +
    "\016\047\023\uffef\024\037\025\035\030\050\037\ufff2\001" +
    "\002\000\004\037\171\001\002\000\006\004\014\024\uffde" +
    "\001\002\000\004\024\173\001\002\000\004\032\174\001" +
    "\002\000\010\030\116\031\113\042\112\001\002\000\004" +
    "\033\176\001\002\000\004\041\uffdc\001\002\000\030\004" +
    "\044\005\uffef\010\uffef\011\033\015\042\016\047\023\uffef" +
    "\024\037\025\035\030\050\037\ufff2\001\002\000\004\037" +
    "\ufffa\001\002\000\004\030\202\001\002\000\006\041\uffec" +
    "\043\204\001\002\000\004\041\uffee\001\002\000\020\030" +
    "\102\031\100\032\101\042\104\047\106\050\077\051\103" +
    "\001\002\000\012\041\uffed\047\106\050\077\051\103\001" +
    "\002\000\010\030\116\031\113\042\112\001\002\000\004" +
    "\033\210\001\002\000\006\004\014\036\uffde\001\002\000" +
    "\004\036\212\001\002\000\030\004\044\005\uffef\010\uffef" +
    "\011\033\015\042\016\047\023\uffef\024\037\025\035\030" +
    "\050\037\ufff2\001\002\000\004\037\214\001\002\000\030" +
    "\004\uffdd\005\uffdd\010\uffdd\011\uffdd\015\uffdd\016\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\030\uffdd\037\uffdd\001\002\000\004" +
    "\037\ufff5\001\002\000\010\030\116\031\113\042\112\001" +
    "\002\000\004\033\220\001\002\000\004\036\221\001\002" +
    "\000\030\004\044\005\uffef\010\uffef\011\033\015\042\016" +
    "\047\023\uffef\024\037\025\035\030\050\037\ufff2\001\002" +
    "\000\004\037\223\001\002\000\032\004\uffeb\005\uffeb\010" +
    "\uffeb\011\uffeb\015\uffeb\016\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\030\uffeb\037\uffeb\001\002\000\004\037\ufff7\001" +
    "\002\000\006\012\227\033\uffc8\001\002\000\004\033\uffca" +
    "\001\002\000\010\005\011\010\004\023\005\001\002\000" +
    "\004\033\uffc9\001\002\000\004\033\232\001\002\000\004" +
    "\036\233\001\002\000\030\004\044\005\uffef\010\uffef\011" +
    "\033\015\042\016\047\023\uffef\024\037\025\035\030\050" +
    "\037\ufff2\001\002\000\004\037\235\001\002\000\004\041" +
    "\ufffe\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\010\002\006\003\005\021\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\014\001\001\000\004\044\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\020\021\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\025\021\026\042\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\045\007\050\010\040\012\044\013\042\014\033" +
    "\015\051\016\035\034\037\001\001\000\002\001\001\000" +
    "\026\006\054\007\050\010\040\012\044\013\042\014\033" +
    "\015\051\016\035\034\037\036\223\001\001\000\002\001" +
    "\001\000\026\006\054\007\050\010\040\012\044\013\042" +
    "\014\033\015\051\016\035\034\037\036\214\001\001\000" +
    "\002\001\001\000\004\021\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\054\007\050\010\040\012" +
    "\044\013\042\014\033\015\051\016\035\034\037\036\165" +
    "\001\001\000\024\006\160\007\050\010\040\012\044\013" +
    "\042\014\033\015\051\016\035\034\037\001\001\000\030" +
    "\006\054\007\050\010\040\012\044\013\042\014\033\015" +
    "\051\016\035\034\037\036\155\044\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\054\007\050\010\040\012\044\013\042\014\033\015\051" +
    "\016\035\034\037\036\055\001\001\000\002\001\001\000" +
    "\026\006\054\007\050\010\040\012\044\013\042\014\033" +
    "\015\051\016\035\034\037\036\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\060" +
    "\043\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\062\001\001\000\002\001\001\000\004\040\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\072\030\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\104\032\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\136\032\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\107\001\001\000\002\001\001\000\006\026" +
    "\113\027\114\001\001\000\006\025\110\032\075\001\001" +
    "\000\004\032\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\107\001\001\000\002" +
    "\001\001\000\006\025\141\032\075\001\001\000\004\032" +
    "\107\001\001\000\006\026\143\027\114\001\001\000\002" +
    "\001\001\000\004\031\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\150\007\050\010\040\012\044" +
    "\013\042\014\033\015\051\016\035\034\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\160\007\050\010\040\012\044" +
    "\013\042\014\033\015\051\016\035\034\037\044\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\163" +
    "\007\050\010\040\012\044\013\042\014\033\015\051\016" +
    "\035\034\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\167\007\050\010\040\012" +
    "\044\013\042\014\033\015\051\016\035\034\037\001\001" +
    "\000\002\001\001\000\004\044\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\174\027\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\054\007" +
    "\050\010\040\012\044\013\042\014\033\015\051\016\035" +
    "\034\037\036\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\202\001\001\000\002\001\001\000\006" +
    "\025\204\032\075\001\001\000\004\032\107\001\001\000" +
    "\006\026\206\027\114\001\001\000\002\001\001\000\004" +
    "\044\210\001\001\000\002\001\001\000\024\006\212\007" +
    "\050\010\040\012\044\013\042\014\033\015\051\016\035" +
    "\034\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\216\027\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\221\007\050\010" +
    "\040\012\044\013\042\014\033\015\051\016\035\034\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\225\001\001\000\002\001\001\000\006" +
    "\017\227\021\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\233\007\050\010\040" +
    "\012\044\013\042\014\033\015\051\016\035\034\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // GLOBALES ::= TIPO Identificador Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLOBALES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= GLOBALES DECLARACION_FUNCION MAIN Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION_FUNCION ::= DECLARACION_FUNCION TIPO Identificador Parentesis_a PARAMS_PREV Parentesis_c Llave_a SENTENCIA Llave_c Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION_FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION_VAR Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_VAR ::= CONST_AUX TIPO Identificador DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_VAR_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op_booleano ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op_booleano ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op_booleano ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_RELACIONALES ::= Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF_ELSE ::= IF LINEA_AUX Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINEA_AUX ::= Linea LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINEA_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c LINEA_AUX Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c LINEA_AUX While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
