
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\003\003\000\002\002" +
    "\006\000\002\002\005\000\002\004\011\000\002\005\015" +
    "\000\002\005\002\000\002\007\006\000\002\007\007\000" +
    "\002\006\005\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\005\000\002\006\004\000\002\006" +
    "\004\000\002\006\002\000\002\036\003\000\002\034\003" +
    "\000\002\034\002\000\002\010\006\000\002\035\004\000" +
    "\002\035\002\000\002\012\011\000\002\026\003\000\002" +
    "\026\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\013\010\000" +
    "\002\041\004\000\002\041\002\000\002\014\012\000\002" +
    "\015\013\000\002\016\011\000\002\030\012\000\002\030" +
    "\011\000\002\031\005\000\002\031\004\000\002\031\004" +
    "\000\002\025\005\000\002\025\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\017" +
    "\005\000\002\020\004\000\002\020\002\000\002\040\004" +
    "\000\002\037\004\000\002\037\002\000\002\021\003\000" +
    "\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\012\005\ufffb\010\ufffb\023\ufffb\041\004\001" +
    "\002\000\010\005\000\010\000\023\000\001\002\000\010" +
    "\005\015\010\012\023\013\001\002\000\010\005\ufffb\010" +
    "\ufffb\023\ufffb\001\002\000\004\002\010\001\002\000\004" +
    "\002\001\001\002\000\010\005\015\010\012\023\013\001" +
    "\002\000\006\030\uffc4\040\uffc4\001\002\000\006\030\uffc3" +
    "\040\uffc3\001\002\000\004\041\217\001\002\000\006\030" +
    "\uffc5\040\uffc5\001\002\000\006\030\017\040\020\001\002" +
    "\000\004\032\202\001\002\000\004\032\021\001\002\000" +
    "\004\033\022\001\002\000\004\036\023\001\002\000\026" +
    "\004\035\005\uffee\010\uffee\011\025\015\033\016\040\023" +
    "\uffee\024\030\025\026\037\ufff1\001\002\000\026\004\035" +
    "\005\uffee\010\uffee\011\025\015\033\016\040\023\uffee\024" +
    "\030\025\026\037\ufff1\001\002\000\010\005\uffef\010\uffef" +
    "\023\uffef\001\002\000\004\032\173\001\002\000\026\004" +
    "\035\005\uffee\010\uffee\011\025\015\033\016\040\023\uffee" +
    "\024\030\025\026\037\ufff1\001\002\000\004\032\163\001" +
    "\002\000\010\005\015\010\012\023\013\001\002\000\004" +
    "\041\154\001\002\000\004\036\143\001\002\000\026\004" +
    "\035\005\uffee\010\uffee\011\025\015\033\016\040\023\uffee" +
    "\024\030\025\026\037\ufff1\001\002\000\026\004\035\005" +
    "\uffee\010\uffee\011\025\015\033\016\040\023\uffee\024\030" +
    "\025\026\037\ufff1\001\002\000\030\004\133\005\uffee\010" +
    "\uffee\011\025\015\033\016\040\023\uffee\024\030\025\026" +
    "\026\uffdd\037\ufff1\001\002\000\004\037\130\001\002\000" +
    "\004\032\045\001\002\000\004\041\042\001\002\000\026" +
    "\004\035\005\uffee\010\uffee\011\025\015\033\016\040\023" +
    "\uffee\024\030\025\026\037\ufff1\001\002\000\004\037\ufff4" +
    "\001\002\000\004\037\ufff0\001\002\000\012\005\015\010" +
    "\012\023\013\030\047\001\002\000\004\033\124\001\002" +
    "\000\004\043\116\001\002\000\004\030\051\001\002\000" +
    "\004\043\052\001\002\000\020\030\057\031\054\032\056" +
    "\042\061\047\063\050\055\051\060\001\002\000\014\033" +
    "\uffcf\041\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000\014" +
    "\033\uffd1\041\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002\000" +
    "\024\030\uffcd\031\uffcd\032\uffcd\033\uffcd\041\uffcd\042\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\001\002\000\020\030\057\031" +
    "\054\032\056\042\061\047\063\050\055\051\060\001\002" +
    "\000\014\033\uffd2\041\uffd2\047\uffd2\050\uffd2\051\uffd2\001" +
    "\002\000\024\030\uffcc\031\uffcc\032\uffcc\033\uffcc\041\uffcc" +
    "\042\uffcc\047\uffcc\050\uffcc\051\uffcc\001\002\000\014\033" +
    "\uffd0\041\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000\012" +
    "\041\064\047\063\050\055\051\060\001\002\000\024\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\041\uffce\042\uffce\047\uffce" +
    "\050\uffce\051\uffce\001\002\000\010\030\073\031\070\042" +
    "\067\001\002\000\020\030\057\031\054\032\056\042\061" +
    "\047\063\050\055\051\060\001\002\000\014\033\uffd4\041" +
    "\uffd4\047\063\050\055\051\060\001\002\000\006\033\uffe7" +
    "\041\uffe7\001\002\000\006\033\uffe6\041\uffe6\001\002\000" +
    "\004\041\104\001\002\000\006\033\uffe9\041\uffe9\001\002" +
    "\000\020\027\074\033\uffe5\041\uffe5\044\101\045\076\046" +
    "\075\052\077\001\002\000\010\030\uffe4\031\uffe4\042\uffe4" +
    "\001\002\000\010\030\uffe0\031\uffe0\042\uffe0\001\002\000" +
    "\010\030\uffe2\031\uffe2\042\uffe2\001\002\000\010\030\uffe3" +
    "\031\uffe3\042\uffe3\001\002\000\010\030\103\031\070\042" +
    "\067\001\002\000\010\030\uffe1\031\uffe1\042\uffe1\001\002" +
    "\000\006\033\uffe8\041\uffe8\001\002\000\006\033\uffe5\041" +
    "\uffe5\001\002\000\006\030\107\052\105\001\002\000\004" +
    "\030\113\001\002\000\004\033\uffd9\001\002\000\006\043" +
    "\111\052\110\001\002\000\004\033\uffd6\001\002\000\004" +
    "\042\112\001\002\000\004\033\uffd7\001\002\000\004\033" +
    "\uffd5\001\002\000\012\033\115\047\063\050\055\051\060" +
    "\001\002\000\014\033\uffd3\041\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\001\002\000\020\030\057\031\054\032\056\042\061" +
    "\047\063\050\055\051\060\001\002\000\012\041\120\047" +
    "\063\050\055\051\060\001\002\000\010\030\073\031\070" +
    "\042\067\001\002\000\004\041\122\001\002\000\006\030" +
    "\107\052\105\001\002\000\004\033\uffd8\001\002\000\004" +
    "\036\125\001\002\000\026\004\035\005\uffee\010\uffee\011" +
    "\025\015\033\016\040\023\uffee\024\030\025\026\037\ufff1" +
    "\001\002\000\004\037\127\001\002\000\026\004\uffda\005" +
    "\uffda\010\uffda\011\uffda\015\uffda\016\uffda\023\uffda\024\uffda" +
    "\025\uffda\037\uffda\001\002\000\004\041\ufffd\001\002\000" +
    "\004\037\ufff7\001\002\000\004\026\136\001\002\000\030" +
    "\004\133\005\uffee\010\uffee\011\025\015\033\016\040\023" +
    "\uffee\024\030\025\026\026\uffdd\037\ufff1\001\002\000\016" +
    "\005\uffde\010\uffde\023\uffde\024\uffde\026\uffde\036\uffde\001" +
    "\002\000\004\037\ufff2\001\002\000\004\036\137\001\002" +
    "\000\026\004\035\005\uffee\010\uffee\011\025\015\033\016" +
    "\040\023\uffee\024\030\025\026\037\ufff1\001\002\000\004" +
    "\037\141\001\002\000\026\004\uffdf\005\uffdf\010\uffdf\011" +
    "\uffdf\015\uffdf\016\uffdf\023\uffdf\024\uffdf\025\uffdf\037\uffdf" +
    "\001\002\000\004\037\ufff6\001\002\000\026\004\035\005" +
    "\uffee\010\uffee\011\025\015\033\016\040\023\uffee\024\030" +
    "\025\026\037\ufff1\001\002\000\004\037\145\001\002\000" +
    "\006\004\146\024\uffdd\001\002\000\016\004\146\005\uffdd" +
    "\010\uffdd\023\uffdd\024\uffdd\036\uffdd\001\002\000\004\024" +
    "\150\001\002\000\004\032\151\001\002\000\010\030\073" +
    "\031\070\042\067\001\002\000\004\033\153\001\002\000" +
    "\004\041\uffdb\001\002\000\026\004\035\005\uffee\010\uffee" +
    "\011\025\015\033\016\040\023\uffee\024\030\025\026\037" +
    "\ufff1\001\002\000\004\037\ufff8\001\002\000\004\030\157" +
    "\001\002\000\006\041\uffeb\043\161\001\002\000\004\041" +
    "\uffed\001\002\000\020\030\057\031\054\032\056\042\061" +
    "\047\063\050\055\051\060\001\002\000\012\041\uffec\047" +
    "\063\050\055\051\060\001\002\000\010\030\073\031\070" +
    "\042\067\001\002\000\004\033\165\001\002\000\006\004" +
    "\146\036\uffdd\001\002\000\004\036\167\001\002\000\026" +
    "\004\035\005\uffee\010\uffee\011\025\015\033\016\040\023" +
    "\uffee\024\030\025\026\037\ufff1\001\002\000\004\037\171" +
    "\001\002\000\026\004\uffdc\005\uffdc\010\uffdc\011\uffdc\015" +
    "\uffdc\016\uffdc\023\uffdc\024\uffdc\025\uffdc\037\uffdc\001\002" +
    "\000\004\037\ufff3\001\002\000\010\030\073\031\070\042" +
    "\067\001\002\000\004\033\175\001\002\000\004\036\176" +
    "\001\002\000\026\004\035\005\uffee\010\uffee\011\025\015" +
    "\033\016\040\023\uffee\024\030\025\026\037\ufff1\001\002" +
    "\000\004\037\200\001\002\000\030\004\uffea\005\uffea\010" +
    "\uffea\011\uffea\015\uffea\016\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\037\uffea\001\002\000\004\037\ufff5\001\002\000" +
    "\010\005\015\010\012\023\013\001\002\000\004\033\211" +
    "\001\002\000\004\030\205\001\002\000\006\012\207\033" +
    "\uffc9\001\002\000\004\033\uffcb\001\002\000\010\005\015" +
    "\010\012\023\013\001\002\000\004\033\uffca\001\002\000" +
    "\004\036\212\001\002\000\026\004\035\005\uffee\010\uffee" +
    "\011\025\015\033\016\040\023\uffee\024\030\025\026\037" +
    "\ufff1\001\002\000\004\037\214\001\002\000\004\041\215" +
    "\001\002\000\012\004\146\005\uffdd\010\uffdd\023\uffdd\001" +
    "\002\000\010\005\ufffc\010\ufffc\023\ufffc\001\002\000\004" +
    "\002\uffff\001\002\000\004\041\221\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\010\002\006\003\005\005\004\001\001\000" +
    "\002\001\001\000\006\004\217\021\015\001\001\000\004" +
    "\005\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\013\021\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\036\010\031\012\035\013" +
    "\033\014\023\015\040\016\026\034\030\001\001\000\024" +
    "\006\043\010\031\012\035\013\033\014\023\015\040\016" +
    "\026\034\030\036\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\043\010\031\012\035\013\033\014" +
    "\023\015\040\016\026\034\030\036\171\001\001\000\002" +
    "\001\001\000\004\021\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\043\010\031\012\035\013\033" +
    "\014\023\015\040\016\026\034\030\036\141\001\001\000" +
    "\022\006\134\010\031\012\035\013\033\014\023\015\040" +
    "\016\026\034\030\001\001\000\026\006\043\010\031\012" +
    "\035\013\033\014\023\015\040\016\026\034\030\036\130" +
    "\041\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\043\010\031\012\035\013\033" +
    "\014\023\015\040\016\026\034\030\036\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\047\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\061\032\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\113\032\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\064\001\001\000" +
    "\002\001\001\000\006\026\070\027\071\001\001\000\006" +
    "\025\065\032\052\001\001\000\004\032\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\064\001\001\000\002\001\001\000\006\025\116\032" +
    "\052\001\001\000\004\032\064\001\001\000\006\026\120" +
    "\027\071\001\001\000\002\001\001\000\004\031\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\125" +
    "\010\031\012\035\013\033\014\023\015\040\016\026\034" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\134\010\031\012\035\013\033\014\023\015\040\016\026" +
    "\034\030\041\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\137\010\031\012\035" +
    "\013\033\014\023\015\040\016\026\034\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\143\010\031\012\035\013\033\014\023\015\040\016" +
    "\026\034\030\001\001\000\002\001\001\000\004\041\146" +
    "\001\001\000\004\041\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\151\027\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\043\010\031\012" +
    "\035\013\033\014\023\015\040\016\026\034\030\036\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\157\001\001\000\002\001\001\000\006\025\161\032\052" +
    "\001\001\000\004\032\064\001\001\000\006\026\163\027" +
    "\071\001\001\000\002\001\001\000\004\041\165\001\001" +
    "\000\002\001\001\000\022\006\167\010\031\012\035\013" +
    "\033\014\023\015\040\016\026\034\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\173\027\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\176\010\031\012\035\013\033\014\023\015" +
    "\040\016\026\034\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\202\021\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\205" +
    "\001\001\000\002\001\001\000\006\017\207\021\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\212" +
    "\010\031\012\035\013\033\014\023\015\040\016\026\034" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // GLOBALES ::= Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLOBALES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= GLOBALES DECLARACION_FUNCION MAIN Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DECLARACION_FUNCION MAIN Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION_FUNCION ::= DECLARACION_FUNCION TIPO Identificador Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIA Llave_c Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LLAMADA_FUNCION ::= Identificador Parentesis_a Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DECLARACION_VAR Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_VAR ::= CONST_AUX TIPO Identificador DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_VAR_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op_booleano ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op_booleano ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op_booleano ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_RELACIONALES ::= Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF_ELSE ::= IF LINEA_AUX Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINEA_AUX ::= Linea LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINEA_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c LINEA_AUX Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c LINEA_AUX While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
