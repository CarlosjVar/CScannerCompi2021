
package Scanner;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal 
    Linea,
    Int,
    Break,
    Case,
    Char,
    Const,
    Continue,
    Default,
    Do,
    For,
    Long,
    Return,
    Short,
    Switch,
    Void,
    While,           
    If,
    Else,
    Relacionales,
    Identificador,
    Literal,
    Parentesis_a,
    Parentesis_c,
    Corchete_a,
    Corchete_c,
    Llave_a,
    Llave_c,
    Main,
    Scolon,
    Numero,
    Asignacion,
    Or,
    And,
    Not,
    Mas,
    Menos,
    Timesslash,
    Unarios,
    LEX_ERROR
    ;


non  terminal INICIO, 
GLOBALES, 
MAIN, 
DECLARACION_FUNCION, 
SENTENCIA, 
LLAMADA_FUNCION, 
DECLARACION_VAR, 
ASIGNACION, 
IF, 
IF_ELSE,
WHILE, 
DO_WHILE,
FOR,
PARAMS , 
TIPO, 
LONG , 
SHORT,
EXP, 
SENTENCIA_BOOLEANA,
Op_booleano , 
SENTENCIA_FOR, 
DECLARACION_FOR, 
OPERADOR,OP_RELACIONALES , 
CONST_AUX , 
DECLARACION_VAR_AUX,
DECL_AUX,
LINEA_AUX
;


precedence right Asignacion;
precedence left Or;
precedence left And;
precedence nonassoc Relacionales;
precedence left Mas, Menos;
precedence left Timesslash;
precedence right Not;

start with INICIO;
TIPO::= Int | Char | Void ;

GLOBALES::=  Scolon ;

INICIO ::= GLOBALES DECLARACION_FUNCION MAIN Scolon|  DECLARACION_FUNCION MAIN Scolon | MAIN Scolon ;

MAIN ::= TIPO Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c  ;

SENTENCIA::=    DECLARACION_VAR Scolon DECL_AUX |
                IF DECL_AUX |
                IF_ELSE  DECL_AUX |
                WHILE DECL_AUX|
                DO_WHILE Scolon DECL_AUX |
                FOR Scolon DECL_AUX  |
                Linea SENTENCIA|  
                ;

DECL_AUX::= SENTENCIA  ;

DECLARACION_VAR::=   TIPO Identificador DECLARACION_VAR_AUX ;

DECLARACION_VAR_AUX::=  Asignacion EXP  |  ;

IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c ;

SENTENCIA_BOOLEANA ::= 
    Op_booleano  |
    Identificador OP_RELACIONALES Op_booleano ;

Op_booleano::= Numero | Literal | Identificador;

OP_RELACIONALES::= Relacionales|  Unarios | And | Or | Not;

IF_ELSE::=  IF  LINEA_AUX Else Llave_a SENTENCIA Llave_c ;

LINEA_AUX::= Linea   | ;

WHILE::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c LINEA_AUX Llave_a SENTENCIA Llave_c ;

DO_WHILE::= Do Llave_a  SENTENCIA Llave_c LINEA_AUX While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c ;

FOR::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c ;

SENTENCIA_FOR ::=
    TIPO Identificador Asignacion Numero Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR |
    Identificador Asignacion Numero Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR
;

EXP::= EXP OPERADOR EXP | Parentesis_a EXP Parentesis_c | Identificador | Literal | Numero | OPERADOR;

OPERADOR::= Mas| Menos | Timesslash  ; 

