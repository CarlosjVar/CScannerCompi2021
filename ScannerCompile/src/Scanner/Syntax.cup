
package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
parser code
{:

    public ArrayList<String> errores = new ArrayList<String>();


    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    
:};

terminal 
    Linea,
    Int,
    Break,
    Case,
    Char,
    Const,
    Coma,
    Continue,
    Default,
    Do,
    For,
    Long,
    Return,
    Short,
    Switch,
    Void,
    While,           
    If,
    Else,
    Relacionales,
    Identificador,
    Literal,
    Parentesis_a,
    Parentesis_c,
    Corchete_a,
    Corchete_c,
    Llave_a,
    Llave_c,
    Main,
    Scolon,
    Numero,
    Asignacion,
    Or,
    And,
    Not,
    Mas,
    Menos,
    Timesslash,
    Unarios,
    Write,
    Read,
    Dos_puntos,
    LEX_ERROR
    ;


non  terminal INICIO, 
MAIN, 
DECLARACION_FUNCION, 
SENTENCIA, 
LLAMADA_FUNCION, 
DECLARACION_VAR, 
IF, 
IF_ELSE,
WHILE, 
DO_WHILE,
FOR,
PARAMS, 
PARAMS_AUX,
TIPO, 
LONG , 
SHORT,
EXP, 
SENTENCIA_BOOLEANA,
Op_booleano , 
SENTENCIA_FOR, 
DECLARACION_FOR, 
OPERADOR,OP_RELACIONALES , 
CONST_AUX , 
DECLARACION_VAR_AUX,
DECL_AUX,
PARAMS_LL_AUX,
PARAMS_LL,
LLAMADA_FUNCION_AUX,
PARAMS_PREV,
PARAMS_LL_PREV,
LINEA_AUX,
DECLARACIONES_INICIALES,
DECLARACIONES_INICIALES_AUX,
ASIGNACION_VAR,
DECLARACIONES_INICIALES_AUX_AUX,
SHORT_AUX,
SHORT_AUX_AUX,
LONG_AUX,
LONG_AUX_AUX,
CONTINUE,
LANG_FUNCS,
ARRAY_AUX,
ARRAY_AUX_AUX,
NUMERO_AUX,
ARRAY_EXP_AUX,
SW,
DEFAULT_AUX,
DEFAULT_OPTIONS,
CASE_AUX,
CASE_OPTIONS,
OPTIONS,
ARRAY_AUX_CONST
;

precedence right Asignacion;
precedence left Or;
precedence left And;
precedence nonassoc Relacionales;
precedence left Mas, Menos;
precedence left Timesslash;
precedence right Not;
 
start with INICIO;

DECLARACIONES_INICIALES::= DECLARACIONES_INICIALES Const TIPO Identificador ARRAY_AUX_CONST Scolon | DECLARACIONES_INICIALES TIPO Identificador DECLARACIONES_INICIALES_AUX | ;

DECLARACIONES_INICIALES_AUX::= Scolon | Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c Scolon | ;

INICIO::= DECLARACIONES_INICIALES MAIN ;

MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c ;

LLAMADA_FUNCION::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon | LANG_FUNCS ;

SENTENCIA::=    
                IF DECL_AUX |
                IF_ELSE  DECL_AUX |
                WHILE DECL_AUX|
                DO_WHILE Scolon DECL_AUX |
                FOR DECL_AUX |
                SW DECL_AUX|
                LLAMADA_FUNCION DECL_AUX |
                ASIGNACION_VAR DECL_AUX|
                CONTINUE DECL_AUX |
                Return Scolon DECL_AUX|
                Break Scolon DECL_AUX|
                Linea SENTENCIA |
                error DECL_AUX|                
                ;
ASIGNACION_VAR::= Identificador Asignacion ARRAY_AUX_AUX Scolon;

DECL_AUX::= SENTENCIA  ;

CONST_AUX::= Const | ;

DECLARACION_VAR::=  Const TIPO Identificador ARRAY_AUX_CONST Scolon DECLARACION_VAR | TIPO Identificador ARRAY_AUX Scolon DECLARACION_VAR |    ;

ARRAY_AUX::= Corchete_a EXP Corchete_c  | error |   ;

ARRAY_AUX_CONST::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX  |  DECLARACION_VAR_AUX ;


DECLARACION_VAR_AUX::=  Asignacion EXP | Asignacion error  ;

ARRAY_AUX_AUX::= EXP | Llave_a  ARRAY_EXP_AUX   Llave_c ;

ARRAY_EXP_AUX::= EXP |  EXP Coma ARRAY_EXP_AUX;


IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c |
       If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c  ;

SENTENCIA_BOOLEANA ::= 
    EXP  |
    Identificador OP_RELACIONALES EXP ;


OP_RELACIONALES::= Relacionales | And | Or | Not;

IF_ELSE::=  IF  Else Llave_a SENTENCIA Llave_c | IF error Llave_a SENTENCIA Llave_c ;

WHILE::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c  Llave_a  SENTENCIA  Llave_c | While Parentesis_a error  Parentesis_c  Llave_a  SENTENCIA  Llave_c  ;

DO_WHILE::= Do Llave_a  SENTENCIA  Llave_c  While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c |
            Do Llave_a  SENTENCIA  Llave_c  While Parentesis_a error Parentesis_c ;

CONTINUE::= Continue Scolon ;

FOR::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c |
       For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c ;

SENTENCIA_FOR ::=
    TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR |
    Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR
;

DECLARACION_FOR ::= 
    Identificador Asignacion Numero |
    Identificador Unarios | 
    Unarios Identificador
;

EXP::= EXP OPERADOR EXP | Parentesis_a EXP Parentesis_c | Identificador | Literal | Numero | OPERADOR   ;

OPERADOR::= Mas | Menos | Timesslash ;

PARAMS_PREV::= PARAMS | ;

PARAMS::= TIPO Identificador PARAMS_AUX ;

PARAMS_AUX::= Coma PARAMS | ;

PARAMS_LL_PREV::= PARAMS_LL | ;

PARAMS_LL::= Identificador PARAMS_LL_AUX ;

PARAMS_LL_AUX::= Coma PARAMS_LL | ;

TIPO::= Int | Char | Void | SHORT | LONG;

SHORT::= Short SHORT_AUX ;

SHORT_AUX::= Int | Short SHORT_AUX_AUX ; 

SHORT_AUX_AUX::=  Int | ;

LONG::= Long LONG_AUX;

LONG_AUX::= Int | Long LONG_AUX_AUX;

LONG_AUX_AUX::= Int | ;

LANG_FUNCS ::=Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon| Write Parentesis_a PARAMS_LL Parentesis_c Scolon  ;

SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a 
     CASE_AUX
    DEFAULT_AUX
Llave_c;

DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS | Default error DEFAULT_OPTIONS | ; 

DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c | SENTENCIA;

CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS| CASE_AUX Case error CASE_OPTIONS | ;

CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c | SENTENCIA ;

OPTIONS::= Literal | Identificador | Identificador Asignacion Literal ;

