
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\003\007\000\002\003\002" +
    "\000\002\024\004\000\002\024\003\000\002\002\006\000" +
    "\002\002\005\000\002\002\004\000\002\005\011\000\002" +
    "\007\005\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\005\000\002\007\004\000\002\007\004" +
    "\000\002\007\002\000\002\036\003\000\002\034\003\000" +
    "\002\034\002\000\002\011\006\000\002\035\004\000\002" +
    "\035\002\000\002\013\011\000\002\026\003\000\002\026" +
    "\005\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\014\010\000\002" +
    "\037\003\000\002\037\002\000\002\015\012\000\002\016" +
    "\013\000\002\017\011\000\002\030\012\000\002\030\011" +
    "\000\002\031\005\000\002\031\004\000\002\031\004\000" +
    "\002\025\005\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\010\005\012\010\005\022\004\001\002\000" +
    "\004\027\ufffe\001\002\000\004\027\uffff\001\002\000\004" +
    "\040\214\001\002\000\010\005\012\010\005\022\004\001" +
    "\002\000\002\001\002\000\004\002\204\001\002\000\004" +
    "\027\000\001\002\000\004\027\014\001\002\000\010\031" +
    "\016\040\uffe8\042\017\001\002\000\004\040\177\001\002" +
    "\000\004\032\035\001\002\000\020\027\024\030\021\031" +
    "\023\041\026\046\030\047\022\050\025\001\002\000\014" +
    "\032\uffcc\040\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000" +
    "\014\032\uffce\040\uffce\046\uffce\047\uffce\050\uffce\001\002" +
    "\000\024\027\uffca\030\uffca\031\uffca\032\uffca\040\uffca\041" +
    "\uffca\046\uffca\047\uffca\050\uffca\001\002\000\020\027\024" +
    "\030\021\031\023\041\026\046\030\047\022\050\025\001" +
    "\002\000\014\032\uffcf\040\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\001\002\000\024\027\uffc9\030\uffc9\031\uffc9\032\uffc9\040" +
    "\uffc9\041\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\014" +
    "\032\uffcd\040\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000" +
    "\012\040\uffe9\046\030\047\022\050\025\001\002\000\024" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\040\uffcb\041\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\001\002\000\020\027\024\030\021" +
    "\031\023\041\026\046\030\047\022\050\025\001\002\000" +
    "\014\032\uffd1\040\uffd1\046\030\047\022\050\025\001\002" +
    "\000\012\032\034\046\030\047\022\050\025\001\002\000" +
    "\014\032\uffd0\040\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002" +
    "\000\004\035\036\001\002\000\026\004\051\005\uffeb\010" +
    "\uffeb\011\040\014\047\015\053\022\uffeb\023\043\024\041" +
    "\036\uffee\001\002\000\026\004\051\005\uffeb\010\uffeb\011" +
    "\040\014\047\015\053\022\uffeb\023\043\024\041\036\uffee" +
    "\001\002\000\010\005\uffec\010\uffec\022\uffec\001\002\000" +
    "\004\031\167\001\002\000\026\004\051\005\uffeb\010\uffeb" +
    "\011\040\014\047\015\053\022\uffeb\023\043\024\041\036" +
    "\uffee\001\002\000\004\031\157\001\002\000\010\005\012" +
    "\010\005\022\004\001\002\000\004\040\152\001\002\000" +
    "\026\004\051\005\uffeb\010\uffeb\011\040\014\047\015\053" +
    "\022\uffeb\023\043\024\041\036\uffee\001\002\000\004\035" +
    "\140\001\002\000\004\036\137\001\002\000\026\004\051" +
    "\005\uffeb\010\uffeb\011\040\014\047\015\053\022\uffeb\023" +
    "\043\024\041\036\uffee\001\002\000\030\004\131\005\uffeb" +
    "\010\uffeb\011\040\014\047\015\053\022\uffeb\023\043\024" +
    "\041\025\uffda\036\uffee\001\002\000\004\031\060\001\002" +
    "\000\004\040\055\001\002\000\026\004\051\005\uffeb\010" +
    "\uffeb\011\040\014\047\015\053\022\uffeb\023\043\024\041" +
    "\036\uffee\001\002\000\004\036\ufff1\001\002\000\004\036" +
    "\uffed\001\002\000\012\005\012\010\005\022\004\027\062" +
    "\001\002\000\004\032\123\001\002\000\004\042\115\001" +
    "\002\000\004\027\064\001\002\000\004\042\065\001\002" +
    "\000\020\027\024\030\021\031\023\041\026\046\030\047" +
    "\022\050\025\001\002\000\012\040\067\046\030\047\022" +
    "\050\025\001\002\000\010\027\074\030\071\041\070\001" +
    "\002\000\006\032\uffe4\040\uffe4\001\002\000\006\032\uffe3" +
    "\040\uffe3\001\002\000\004\040\105\001\002\000\006\032" +
    "\uffe6\040\uffe6\001\002\000\020\026\075\032\uffe2\040\uffe2" +
    "\043\102\044\077\045\076\051\100\001\002\000\010\027" +
    "\uffe1\030\uffe1\041\uffe1\001\002\000\010\027\uffdd\030\uffdd" +
    "\041\uffdd\001\002\000\010\027\uffdf\030\uffdf\041\uffdf\001" +
    "\002\000\010\027\uffe0\030\uffe0\041\uffe0\001\002\000\010" +
    "\027\104\030\071\041\070\001\002\000\010\027\uffde\030" +
    "\uffde\041\uffde\001\002\000\006\032\uffe5\040\uffe5\001\002" +
    "\000\006\032\uffe2\040\uffe2\001\002\000\006\027\110\051" +
    "\106\001\002\000\004\027\114\001\002\000\004\032\uffd6" +
    "\001\002\000\006\042\112\051\111\001\002\000\004\032" +
    "\uffd3\001\002\000\004\041\113\001\002\000\004\032\uffd4" +
    "\001\002\000\004\032\uffd2\001\002\000\020\027\024\030" +
    "\021\031\023\041\026\046\030\047\022\050\025\001\002" +
    "\000\012\040\117\046\030\047\022\050\025\001\002\000" +
    "\010\027\074\030\071\041\070\001\002\000\004\040\121" +
    "\001\002\000\006\027\110\051\106\001\002\000\004\032" +
    "\uffd5\001\002\000\004\035\124\001\002\000\026\004\051" +
    "\005\uffeb\010\uffeb\011\040\014\047\015\053\022\uffeb\023" +
    "\043\024\041\036\uffee\001\002\000\004\036\126\001\002" +
    "\000\026\004\uffd7\005\uffd7\010\uffd7\011\uffd7\014\uffd7\015" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\036\uffd7\001\002\000\004" +
    "\036\ufff4\001\002\000\004\025\133\001\002\000\030\004" +
    "\051\005\uffeb\010\uffeb\011\040\014\047\015\053\022\uffeb" +
    "\023\043\024\041\025\uffdb\036\uffee\001\002\000\004\036" +
    "\uffef\001\002\000\004\035\134\001\002\000\026\004\051" +
    "\005\uffeb\010\uffeb\011\040\014\047\015\053\022\uffeb\023" +
    "\043\024\041\036\uffee\001\002\000\004\036\136\001\002" +
    "\000\026\004\uffdc\005\uffdc\010\uffdc\011\uffdc\014\uffdc\015" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\036\uffdc\001\002\000\004" +
    "\040\ufff6\001\002\000\026\004\051\005\uffeb\010\uffeb\011" +
    "\040\014\047\015\053\022\uffeb\023\043\024\041\036\uffee" +
    "\001\002\000\004\036\142\001\002\000\006\004\143\023" +
    "\uffda\001\002\000\006\023\uffdb\035\uffdb\001\002\000\004" +
    "\023\145\001\002\000\004\031\146\001\002\000\010\027" +
    "\074\030\071\041\070\001\002\000\004\032\150\001\002" +
    "\000\004\040\uffd8\001\002\000\004\036\ufff3\001\002\000" +
    "\026\004\051\005\uffeb\010\uffeb\011\040\014\047\015\053" +
    "\022\uffeb\023\043\024\041\036\uffee\001\002\000\004\036" +
    "\ufff5\001\002\000\004\027\155\001\002\000\006\040\uffe8" +
    "\042\017\001\002\000\004\040\uffea\001\002\000\010\027" +
    "\074\030\071\041\070\001\002\000\004\032\161\001\002" +
    "\000\006\004\143\035\uffda\001\002\000\004\035\163\001" +
    "\002\000\026\004\051\005\uffeb\010\uffeb\011\040\014\047" +
    "\015\053\022\uffeb\023\043\024\041\036\uffee\001\002\000" +
    "\004\036\165\001\002\000\026\004\uffd9\005\uffd9\010\uffd9" +
    "\011\uffd9\014\uffd9\015\uffd9\022\uffd9\023\uffd9\024\uffd9\036" +
    "\uffd9\001\002\000\004\036\ufff0\001\002\000\010\027\074" +
    "\030\071\041\070\001\002\000\004\032\171\001\002\000" +
    "\004\035\172\001\002\000\026\004\051\005\uffeb\010\uffeb" +
    "\011\040\014\047\015\053\022\uffeb\023\043\024\041\036" +
    "\uffee\001\002\000\004\036\174\001\002\000\030\004\uffe7" +
    "\005\uffe7\010\uffe7\011\uffe7\014\uffe7\015\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\036\uffe7\001\002\000\004\036\ufff2" +
    "\001\002\000\010\005\012\010\005\022\004\001\002\000" +
    "\012\004\200\005\ufffa\010\ufffa\022\ufffa\001\002\000\010" +
    "\005\ufffb\010\ufffb\022\ufffb\001\002\000\002\001\002\000" +
    "\004\027\203\001\002\000\006\040\uffe8\042\017\001\002" +
    "\000\004\002\001\001\002\000\010\005\012\010\005\022" +
    "\004\001\002\000\004\040\211\001\002\000\004\027\210" +
    "\001\002\000\004\031\016\001\002\000\004\002\ufff9\001" +
    "\002\000\004\040\213\001\002\000\004\002\ufff8\001\002" +
    "\000\004\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\014\002\010\003\007\005\005\006\006\021" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\211\021\206\001\001\000\004\006" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\014\001\001\000\004\024\175\001" +
    "\001\000\002\001\001\000\006\025\026\032\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\032\032\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\030\001\001\000" +
    "\002\001\001\000\006\025\031\032\017\001\001\000\004" +
    "\032\030\001\001\000\004\032\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\047\011\044\013\051" +
    "\014\045\015\036\016\053\017\041\034\043\001\001\000" +
    "\024\007\056\011\044\013\051\014\045\015\036\016\053" +
    "\017\041\034\043\036\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\056\011\044\013\051\014\045" +
    "\015\036\016\053\017\041\034\043\036\165\001\001\000" +
    "\002\001\001\000\004\021\153\001\001\000\002\001\001" +
    "\000\024\007\056\011\044\013\051\014\045\015\036\016" +
    "\053\017\041\034\043\036\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\131\011\044\013\051\014" +
    "\045\015\036\016\053\017\041\034\043\001\001\000\026" +
    "\007\056\011\044\013\051\014\045\015\036\016\053\017" +
    "\041\034\043\036\126\037\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\056\011\044\013\051\014" +
    "\045\015\036\016\053\017\041\034\043\036\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\062\030" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\065\032\017\001" +
    "\001\000\004\032\030\001\001\000\006\026\071\027\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\115\032\017\001\001\000\004\032\030" +
    "\001\001\000\006\026\117\027\072\001\001\000\002\001" +
    "\001\000\004\031\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\124\011\044\013\051\014\045\015" +
    "\036\016\053\017\041\034\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\131\011\044\013\051\014\045\015\036\016\053" +
    "\017\041\034\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\134\011\044\013\051\014\045\015\036" +
    "\016\053\017\041\034\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\140\011\044" +
    "\013\051\014\045\015\036\016\053\017\041\034\043\001" +
    "\001\000\002\001\001\000\004\037\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\146\027\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\056\011\044\013\051\014" +
    "\045\015\036\016\053\017\041\034\043\036\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\155\001" +
    "\001\000\002\001\001\000\006\026\157\027\072\001\001" +
    "\000\002\001\001\000\004\037\161\001\001\000\002\001" +
    "\001\000\022\007\163\011\044\013\051\014\045\015\036" +
    "\016\053\017\041\034\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\167\027\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\172\011\044\013\051\014\045\015\036\016\053\017\041" +
    "\034\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\200\021\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\014\001\001\000\002\001\001\000\006" +
    "\005\205\021\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GLOBALES ::= TIPO Identificador DECLARACION_VAR_AUX SCOL_LINEA GLOBALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLOBALES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLOBALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLOBALES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SCOL_LINEA ::= Scolon Linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCOL_LINEA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SCOL_LINEA ::= Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCOL_LINEA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= GLOBALES DECLARACION_FUNCION MAIN Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= DECLARACION_FUNCION MAIN Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= MAIN Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN ::= TIPO Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= DECLARACION_VAR Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_VAR ::= CONST_AUX TIPO Identificador DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_VAR_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op_booleano ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op_booleano ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op_booleano ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_RELACIONALES ::= Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF_ELSE ::= IF LINEA_AUX Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINEA_AUX ::= Linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LINEA_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c LINEA_AUX Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c LINEA_AUX While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
