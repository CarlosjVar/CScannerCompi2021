
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\042\006\000\002\042" +
    "\002\000\002\043\005\000\002\043\012\000\002\045\004" +
    "\000\002\045\002\000\002\002\004\000\002\003\011\000" +
    "\002\004\015\000\002\004\002\000\002\006\007\000\002" +
    "\006\003\000\002\005\005\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\002\000\002\044\006\000\002\033" +
    "\003\000\002\031\003\000\002\031\002\000\002\007\006" +
    "\000\002\054\007\000\002\054\003\000\002\055\003\000" +
    "\002\055\005\000\002\057\003\000\002\057\005\000\002" +
    "\032\004\000\002\032\002\000\002\010\011\000\002\023" +
    "\003\000\002\023\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\011\010\000\002" +
    "\041\004\000\002\041\002\000\002\012\012\000\002\013" +
    "\013\000\002\052\004\000\002\014\011\000\002\025\012" +
    "\000\002\025\011\000\002\026\005\000\002\026\004\000" +
    "\002\026\004\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\037\003\000\002\037\002\000\002\015\005\000" +
    "\002\016\004\000\002\016\002\000\002\040\003\000\002" +
    "\040\002\000\002\035\004\000\002\034\004\000\002\034" +
    "\002\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\021\004\000" +
    "\002\046\003\000\002\046\004\000\002\047\003\000\002" +
    "\047\002\000\002\020\004\000\002\050\003\000\002\050" +
    "\004\000\002\051\003\000\002\051\002\000\002\053\007" +
    "\000\002\053\007\000\002\060\012\000\002\061\005\000" +
    "\002\061\002\000\002\062\005\000\002\062\003\000\002" +
    "\063\007\000\002\063\002\000\002\064\005\000\002\064" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\014\005\uffff\010\uffff\017\uffff\021\uffff\023" +
    "\uffff\001\002\000\004\002\357\001\002\000\014\005\012" +
    "\010\011\017\013\021\006\023\015\001\002\000\006\005" +
    "\354\021\353\001\002\000\006\030\uffac\040\uffac\001\002" +
    "\000\004\002\ufffa\001\002\000\006\030\uffaf\040\uffaf\001" +
    "\002\000\006\030\uffb0\040\uffb0\001\002\000\006\005\347" +
    "\017\346\001\002\000\006\030\020\040\017\001\002\000" +
    "\006\030\uffae\040\uffae\001\002\000\006\030\uffad\040\uffad" +
    "\001\002\000\004\032\340\001\002\000\010\032\021\041" +
    "\ufffb\043\024\001\002\000\016\005\012\010\011\017\013" +
    "\021\006\023\015\033\uffb9\001\002\000\014\005\000\010" +
    "\000\017\000\021\000\023\000\001\002\000\004\041\042" +
    "\001\002\000\020\030\031\031\027\032\030\042\033\047" +
    "\035\050\026\051\032\001\002\000\022\012\uffbe\033\uffbe" +
    "\035\uffbe\037\uffbe\041\uffbe\047\uffbe\050\uffbe\051\uffbe\001" +
    "\002\000\032\012\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\035\uffbc\037\uffbc\041\uffbc\042\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\001\002\000\022\012\uffc0\033\uffc0\035\uffc0\037\uffc0" +
    "\041\uffc0\047\uffc0\050\uffc0\051\uffc0\001\002\000\020\030" +
    "\031\031\027\032\030\042\033\047\035\050\026\051\032" +
    "\001\002\000\022\012\uffc1\033\uffc1\035\uffc1\037\uffc1\041" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\001\002\000\032\012\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb\037\uffbb\041" +
    "\uffbb\042\uffbb\047\uffbb\050\uffbb\051\uffbb\001\002\000\022" +
    "\012\uffbf\033\uffbf\035\uffbf\037\uffbf\041\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\001\002\000\012\041\ufffc\047\035\050\026" +
    "\051\032\001\002\000\032\012\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\035\uffbd\037\uffbd\041\uffbd\042\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\001\002\000\020\030\031\031\027\032" +
    "\030\042\033\047\035\050\026\051\032\001\002\000\022" +
    "\012\uffc3\033\uffc3\035\uffc3\037\uffc3\041\uffc3\047\035\050" +
    "\026\051\032\001\002\000\012\033\041\047\035\050\026" +
    "\051\032\001\002\000\022\012\uffc2\033\uffc2\035\uffc2\037" +
    "\uffc2\041\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002\000\016" +
    "\004\043\005\uffcd\010\uffcd\017\uffcd\021\uffcd\023\uffcd\001" +
    "\002\000\022\004\043\005\uffcd\010\uffcd\017\uffcd\021\uffcd" +
    "\023\uffcd\024\uffcd\036\uffcd\001\002\000\014\005\ufffe\010" +
    "\ufffe\017\ufffe\021\ufffe\023\ufffe\001\002\000\022\005\uffce" +
    "\010\uffce\017\uffce\021\uffce\023\uffce\024\uffce\026\uffce\036" +
    "\uffce\001\002\000\004\033\uffba\001\002\000\004\033\055" +
    "\001\002\000\004\030\051\001\002\000\006\012\053\033" +
    "\uffb6\001\002\000\004\033\uffb8\001\002\000\014\005\012" +
    "\010\011\017\013\021\006\023\015\001\002\000\004\033" +
    "\uffb7\001\002\000\004\036\056\001\002\000\050\004\101" +
    "\005\uffe3\006\066\010\uffe3\011\073\013\057\015\104\016" +
    "\061\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106" +
    "\025\100\030\070\037\uffe7\053\062\054\110\001\002\000" +
    "\004\041\337\001\002\000\054\004\101\005\uffe3\006\066" +
    "\007\uffe7\010\uffe3\011\073\013\057\014\uffe7\015\104\016" +
    "\061\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106" +
    "\025\100\030\070\037\uffe7\053\062\054\110\001\002\000" +
    "\004\032\303\001\002\000\004\032\277\001\002\000\054" +
    "\004\101\005\uffe3\006\066\007\uffe7\010\uffe3\011\073\013" +
    "\057\014\uffe7\015\104\016\061\017\uffe3\020\102\021\uffe3" +
    "\022\103\023\uffe3\024\106\025\100\030\070\037\uffe7\053" +
    "\062\054\110\001\002\000\054\004\101\005\uffe3\006\066" +
    "\007\uffe7\010\uffe3\011\073\013\057\014\uffe7\015\104\016" +
    "\061\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106" +
    "\025\100\030\070\037\uffe7\053\062\054\110\001\002\000" +
    "\004\037\272\001\002\000\004\041\270\001\002\000\054" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\030\ufff5\037\ufff5\053" +
    "\ufff5\054\ufff5\001\002\000\006\032\261\043\262\001\002" +
    "\000\056\004\254\005\uffe3\006\066\007\uffe7\010\uffe3\011" +
    "\073\013\057\014\uffe7\015\104\016\061\017\uffe3\020\102" +
    "\021\uffe3\022\103\023\uffe3\024\106\025\100\026\uffcd\030" +
    "\070\037\uffe7\053\062\054\110\001\002\000\054\004\101" +
    "\005\uffe3\006\066\007\uffe7\010\uffe3\011\073\013\057\014" +
    "\uffe7\015\104\016\061\017\uffe3\020\102\021\uffe3\022\103" +
    "\023\uffe3\024\106\025\100\030\070\037\uffe7\053\062\054" +
    "\110\001\002\000\014\005\uffe4\010\uffe4\017\uffe4\021\uffe4" +
    "\023\uffe4\001\002\000\054\004\101\005\uffe3\006\066\007" +
    "\uffe7\010\uffe3\011\073\013\057\014\uffe7\015\104\016\061" +
    "\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106\025" +
    "\100\030\070\037\uffe7\053\062\054\110\001\002\000\054" +
    "\004\101\005\uffe3\006\066\007\uffe7\010\uffe3\011\073\013" +
    "\057\014\uffe7\015\104\016\061\017\uffe3\020\102\021\uffe3" +
    "\022\103\023\uffe3\024\106\025\100\030\070\037\uffe7\053" +
    "\062\054\110\001\002\000\004\041\245\001\002\000\014" +
    "\005\012\010\011\017\013\021\006\023\015\001\002\000" +
    "\004\032\215\001\002\000\054\004\101\005\uffe3\006\066" +
    "\007\uffe7\010\uffe3\011\073\013\057\014\uffe7\015\104\016" +
    "\061\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106" +
    "\025\100\030\070\037\uffe7\053\062\054\110\001\002\000" +
    "\004\041\212\001\002\000\004\032\160\001\002\000\004" +
    "\036\150\001\002\000\054\004\101\005\uffe3\006\066\007" +
    "\uffe7\010\uffe3\011\073\013\057\014\uffe7\015\104\016\061" +
    "\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106\025" +
    "\100\030\070\037\uffe7\053\062\054\110\001\002\000\004" +
    "\032\125\001\002\000\004\041\122\001\002\000\004\032" +
    "\111\001\002\000\006\030\113\033\uffb4\001\002\000\004" +
    "\033\120\001\002\000\006\012\116\033\uffb1\001\002\000" +
    "\004\033\uffb5\001\002\000\004\033\uffb3\001\002\000\004" +
    "\030\113\001\002\000\004\033\uffb2\001\002\000\004\041" +
    "\121\001\002\000\054\004\uffa1\005\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\030\uffa1\037\uffa1\053\uffa1\054\uffa1\001\002\000\054\004" +
    "\101\005\uffe3\006\066\007\uffe7\010\uffe3\011\073\013\057" +
    "\014\uffe7\015\104\016\061\017\uffe3\020\102\021\uffe3\022" +
    "\103\023\uffe3\024\106\025\100\030\070\037\uffe7\053\062" +
    "\054\110\001\002\000\010\007\ufff4\014\ufff4\037\ufff4\001" +
    "\002\000\010\007\uffe5\014\uffe5\037\uffe5\001\002\000\010" +
    "\030\132\031\127\042\126\001\002\000\006\033\uffd6\041" +
    "\uffd6\001\002\000\006\033\uffd5\041\uffd5\001\002\000\004" +
    "\033\142\001\002\000\006\033\uffd8\041\uffd8\001\002\000" +
    "\016\027\133\033\uffd4\041\uffd4\044\137\045\134\046\135" +
    "\001\002\000\010\030\uffd3\031\uffd3\042\uffd3\001\002\000" +
    "\010\030\uffd2\031\uffd2\042\uffd2\001\002\000\010\030\uffd0" +
    "\031\uffd0\042\uffd0\001\002\000\010\030\141\031\127\042" +
    "\126\001\002\000\010\030\uffd1\031\uffd1\042\uffd1\001\002" +
    "\000\006\033\uffd7\041\uffd7\001\002\000\006\033\uffd4\041" +
    "\uffd4\001\002\000\006\004\043\036\uffcd\001\002\000\004" +
    "\036\144\001\002\000\050\004\101\005\uffe3\006\066\010" +
    "\uffe3\011\073\013\057\015\104\016\061\017\uffe3\020\102" +
    "\021\uffe3\022\103\023\uffe3\024\106\025\100\030\070\037" +
    "\uffe7\053\062\054\110\001\002\000\004\037\146\001\002" +
    "\000\054\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\037" +
    "\uffcc\053\uffcc\054\uffcc\001\002\000\010\007\uffef\014\uffef" +
    "\037\uffef\001\002\000\050\004\101\005\uffe3\006\066\010" +
    "\uffe3\011\073\013\057\015\104\016\061\017\uffe3\020\102" +
    "\021\uffe3\022\103\023\uffe3\024\106\025\100\030\070\037" +
    "\uffe7\053\062\054\110\001\002\000\004\037\152\001\002" +
    "\000\006\004\043\024\uffcd\001\002\000\004\024\154\001" +
    "\002\000\004\032\155\001\002\000\010\030\132\031\127" +
    "\042\126\001\002\000\004\033\157\001\002\000\004\041" +
    "\uffcb\001\002\000\006\030\162\031\161\001\002\000\004" +
    "\033\uff96\001\002\000\006\033\uff95\043\210\001\002\000" +
    "\004\033\164\001\002\000\004\036\165\001\002\000\010" +
    "\007\uff99\014\uff99\037\uff99\001\002\000\010\007\170\014" +
    "\167\037\uff9d\001\002\000\004\055\202\001\002\000\004" +
    "\031\173\001\002\000\004\037\172\001\002\000\054\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\030\uff9f\037\uff9f\053\uff9f" +
    "\054\uff9f\001\002\000\004\055\174\001\002\000\056\004" +
    "\101\005\uffe3\006\066\007\uffe7\010\uffe3\011\073\013\057" +
    "\014\uffe7\015\104\016\061\017\uffe3\020\102\021\uffe3\022" +
    "\103\023\uffe3\024\106\025\100\030\070\036\176\037\uffe7" +
    "\053\062\054\110\001\002\000\010\007\uff97\014\uff97\037" +
    "\uff97\001\002\000\050\004\101\005\uffe3\006\066\010\uffe3" +
    "\011\073\013\057\015\104\016\061\017\uffe3\020\102\021" +
    "\uffe3\022\103\023\uffe3\024\106\025\100\030\070\037\uffe7" +
    "\053\062\054\110\001\002\000\010\007\uff9a\014\uff9a\037" +
    "\uff9a\001\002\000\004\037\201\001\002\000\010\007\uff98" +
    "\014\uff98\037\uff98\001\002\000\052\004\101\005\uffe3\006" +
    "\066\010\uffe3\011\073\013\057\015\104\016\061\017\uffe3" +
    "\020\102\021\uffe3\022\103\023\uffe3\024\106\025\100\030" +
    "\070\036\205\037\uffe7\053\062\054\110\001\002\000\004" +
    "\037\uff9e\001\002\000\004\037\uff9b\001\002\000\050\004" +
    "\101\005\uffe3\006\066\010\uffe3\011\073\013\057\015\104" +
    "\016\061\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024" +
    "\106\025\100\030\070\037\uffe7\053\062\054\110\001\002" +
    "\000\004\037\207\001\002\000\004\037\uff9c\001\002\000" +
    "\004\031\211\001\002\000\004\033\uff94\001\002\000\054" +
    "\004\101\005\uffe3\006\066\007\uffe7\010\uffe3\011\073\013" +
    "\057\014\uffe7\015\104\016\061\017\uffe3\020\102\021\uffe3" +
    "\022\103\023\uffe3\024\106\025\100\030\070\037\uffe7\053" +
    "\062\054\110\001\002\000\010\007\uffea\014\uffea\037\uffea" +
    "\001\002\000\010\007\uffe8\014\uffe8\037\uffe8\001\002\000" +
    "\010\030\132\031\127\042\126\001\002\000\004\033\217" +
    "\001\002\000\004\036\220\001\002\000\050\004\101\005" +
    "\uffe3\006\066\010\uffe3\011\073\013\057\015\104\016\061" +
    "\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106\025" +
    "\100\030\070\037\uffe7\053\062\054\110\001\002\000\004" +
    "\037\222\001\002\000\056\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\030\uffd9\037\uffd9\053\uffd9\054\uffd9\001\002" +
    "\000\004\030\224\001\002\000\010\034\226\041\uffda\043" +
    "\227\001\002\000\004\041\uffe0\001\002\000\020\030\031" +
    "\031\027\032\030\042\033\047\035\050\026\051\032\001" +
    "\002\000\020\030\031\031\027\032\030\042\033\047\035" +
    "\050\026\051\032\001\002\000\004\041\uffe2\001\002\000" +
    "\012\041\uffdb\047\035\050\026\051\032\001\002\000\012" +
    "\035\233\047\035\050\026\051\032\001\002\000\004\043" +
    "\234\001\002\000\022\030\031\031\027\032\030\036\236" +
    "\042\033\047\035\050\026\051\032\001\002\000\004\041" +
    "\uffe1\001\002\000\020\030\031\031\027\032\030\042\033" +
    "\047\035\050\026\051\032\001\002\000\012\041\uffdf\047" +
    "\035\050\026\051\032\001\002\000\004\037\244\001\002" +
    "\000\014\012\242\037\uffdd\047\035\050\026\051\032\001" +
    "\002\000\020\030\031\031\027\032\030\042\033\047\035" +
    "\050\026\051\032\001\002\000\004\037\uffdc\001\002\000" +
    "\004\041\uffde\001\002\000\054\004\101\005\uffe3\006\066" +
    "\007\uffe7\010\uffe3\011\073\013\057\014\uffe7\015\104\016" +
    "\061\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106" +
    "\025\100\030\070\037\uffe7\053\062\054\110\001\002\000" +
    "\010\007\ufff0\014\ufff0\037\ufff0\001\002\000\010\007\ufff2" +
    "\014\ufff2\037\ufff2\001\002\000\010\007\uffee\014\uffee\037" +
    "\uffee\001\002\000\010\007\uffed\014\uffed\037\uffed\001\002" +
    "\000\010\007\ufff3\014\ufff3\037\ufff3\001\002\000\004\026" +
    "\255\001\002\000\056\004\254\005\uffe3\006\066\007\uffe7" +
    "\010\uffe3\011\073\013\057\014\uffe7\015\104\016\061\017" +
    "\uffe3\020\102\021\uffe3\022\103\023\uffe3\024\106\025\100" +
    "\026\uffcd\030\070\037\uffe7\053\062\054\110\001\002\000" +
    "\004\036\256\001\002\000\050\004\101\005\uffe3\006\066" +
    "\010\uffe3\011\073\013\057\015\104\016\061\017\uffe3\020" +
    "\102\021\uffe3\022\103\023\uffe3\024\106\025\100\030\070" +
    "\037\uffe7\053\062\054\110\001\002\000\004\037\260\001" +
    "\002\000\054\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\030\uffcf" +
    "\037\uffcf\053\uffcf\054\uffcf\001\002\000\006\030\113\033" +
    "\uffb4\001\002\000\020\030\031\031\027\032\030\042\033" +
    "\047\035\050\026\051\032\001\002\000\012\041\264\047" +
    "\035\050\026\051\032\001\002\000\054\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\030\uffe6\037\uffe6\053\uffe6\054\uffe6\001" +
    "\002\000\004\033\266\001\002\000\004\041\267\001\002" +
    "\000\054\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\030\ufff6\037" +
    "\ufff6\053\ufff6\054\ufff6\001\002\000\054\004\101\005\uffe3" +
    "\006\066\007\uffe7\010\uffe3\011\073\013\057\014\uffe7\015" +
    "\104\016\061\017\uffe3\020\102\021\uffe3\022\103\023\uffe3" +
    "\024\106\025\100\030\070\037\uffe7\053\062\054\110\001" +
    "\002\000\010\007\uffe9\014\uffe9\037\uffe9\001\002\000\004" +
    "\041\273\001\002\000\016\004\043\005\uffcd\010\uffcd\017" +
    "\uffcd\021\uffcd\023\uffcd\001\002\000\014\005\ufffd\010\ufffd" +
    "\017\ufffd\021\ufffd\023\ufffd\001\002\000\010\007\uffec\014" +
    "\uffec\037\uffec\001\002\000\010\007\ufff1\014\ufff1\037\ufff1" +
    "\001\002\000\004\030\113\001\002\000\004\033\301\001" +
    "\002\000\004\041\302\001\002\000\054\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\030\uffa0\037\uffa0\053\uffa0\054\uffa0\001" +
    "\002\000\016\005\012\010\011\017\013\021\006\023\015" +
    "\030\305\001\002\000\004\033\332\001\002\000\004\043" +
    "\324\001\002\000\004\030\307\001\002\000\004\043\310" +
    "\001\002\000\020\030\031\031\027\032\030\042\033\047" +
    "\035\050\026\051\032\001\002\000\012\041\312\047\035" +
    "\050\026\051\032\001\002\000\010\030\132\031\127\042" +
    "\126\001\002\000\004\041\314\001\002\000\006\030\317" +
    "\052\315\001\002\000\004\030\323\001\002\000\004\033" +
    "\uffc8\001\002\000\006\043\321\052\320\001\002\000\004" +
    "\033\uffc5\001\002\000\004\042\322\001\002\000\004\033" +
    "\uffc6\001\002\000\004\033\uffc4\001\002\000\020\030\031" +
    "\031\027\032\030\042\033\047\035\050\026\051\032\001" +
    "\002\000\012\041\326\047\035\050\026\051\032\001\002" +
    "\000\010\030\132\031\127\042\126\001\002\000\004\041" +
    "\330\001\002\000\006\030\317\052\315\001\002\000\004" +
    "\033\uffc7\001\002\000\004\036\333\001\002\000\050\004" +
    "\101\005\uffe3\006\066\010\uffe3\011\073\013\057\015\104" +
    "\016\061\017\uffe3\020\102\021\uffe3\022\103\023\uffe3\024" +
    "\106\025\100\030\070\037\uffe7\053\062\054\110\001\002" +
    "\000\004\037\335\001\002\000\054\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\030\uffc9\037\uffc9\053\uffc9\054\uffc9\001\002" +
    "\000\010\007\uffeb\014\uffeb\037\uffeb\001\002\000\054\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\030\uffca\037\uffca\053\uffca" +
    "\054\uffca\001\002\000\004\033\341\001\002\000\004\036" +
    "\342\001\002\000\050\004\101\005\uffe3\006\066\010\uffe3" +
    "\011\073\013\057\015\104\016\061\017\uffe3\020\102\021" +
    "\uffe3\022\103\023\uffe3\024\106\025\100\030\070\037\uffe7" +
    "\053\062\054\110\001\002\000\004\037\344\001\002\000" +
    "\004\002\ufff9\001\002\000\006\030\uffa6\040\uffa6\001\002" +
    "\000\010\005\351\030\uffa2\040\uffa2\001\002\000\006\030" +
    "\uffa5\040\uffa5\001\002\000\006\030\uffa4\040\uffa4\001\002" +
    "\000\006\030\uffa3\040\uffa3\001\002\000\006\030\uffab\040" +
    "\uffab\001\002\000\010\005\356\030\uffa7\040\uffa7\001\002" +
    "\000\006\030\uffaa\040\uffaa\001\002\000\006\030\uffa9\040" +
    "\uffa9\001\002\000\006\030\uffa8\040\uffa8\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\012\003\007\017\013\020\006\021\015\001\001" +
    "\000\004\046\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\021\045\022\001\001" +
    "\000\014\015\045\017\047\020\006\021\015\037\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\033" +
    "\027\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\037\027\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\035\001\001\000\002\001\001\000\006\022\036\027\024" +
    "\001\001\000\004\027\035\001\001\000\004\027\035\001" +
    "\001\000\002\001\001\000\004\041\043\001\001\000\004" +
    "\041\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\051\001\001\000\002\001\001\000\012\015\053\017" +
    "\047\020\006\021\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\064\006\071\007\106\010\070\011" +
    "\074\012\062\013\075\014\104\031\076\044\063\052\057" +
    "\053\066\060\073\001\001\000\002\001\001\000\036\005" +
    "\123\006\071\007\106\010\070\011\074\012\062\013\075" +
    "\014\104\031\076\033\335\044\063\052\057\053\066\060" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\123\006\071\007\106\010\070\011\074\012\062\013" +
    "\075\014\104\031\076\033\275\044\063\052\057\053\066" +
    "\060\073\001\001\000\036\005\123\006\071\007\106\010" +
    "\070\011\074\012\062\013\075\014\104\031\076\033\274" +
    "\044\063\052\057\053\066\060\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\005\123\006\071\007\106\010\070\011\074\012" +
    "\062\013\075\014\104\031\076\033\251\041\252\044\063" +
    "\052\057\053\066\060\073\001\001\000\036\005\123\006" +
    "\071\007\106\010\070\011\074\012\062\013\075\014\104" +
    "\031\076\033\250\044\063\052\057\053\066\060\073\001" +
    "\001\000\002\001\001\000\036\005\123\006\071\007\106" +
    "\010\070\011\074\012\062\013\075\014\104\031\076\033" +
    "\247\044\063\052\057\053\066\060\073\001\001\000\036" +
    "\005\123\006\071\007\106\010\070\011\074\012\062\013" +
    "\075\014\104\031\076\033\246\044\063\052\057\053\066" +
    "\060\073\001\001\000\002\001\001\000\010\017\222\020" +
    "\006\021\015\001\001\000\002\001\001\000\034\005\213" +
    "\006\071\007\106\010\070\011\074\012\062\013\075\014" +
    "\104\031\076\044\063\052\057\053\066\060\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\123\006\071\007\106\010\070\011\074\012\062" +
    "\013\075\014\104\031\076\033\146\044\063\052\057\053" +
    "\066\060\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\113\040\111\001\001\000" +
    "\002\001\001\000\004\034\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\123" +
    "\006\071\007\106\010\070\011\074\012\062\013\075\014" +
    "\104\031\076\033\122\044\063\052\057\053\066\060\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\127\024\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\142\001\001\000\002" +
    "\001\001\000\034\005\144\006\071\007\106\010\070\011" +
    "\074\012\062\013\075\014\104\031\076\044\063\052\057" +
    "\053\066\060\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\150\006\071\007\106" +
    "\010\070\011\074\012\062\013\075\014\104\031\076\044" +
    "\063\052\057\053\066\060\073\001\001\000\002\001\001" +
    "\000\004\041\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\155\024\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\165\001\001\000\004\061\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\174\006\071\007" +
    "\106\010\070\011\074\012\062\013\075\014\104\031\076" +
    "\044\063\052\057\053\066\060\073\064\176\001\001\000" +
    "\002\001\001\000\034\005\177\006\071\007\106\010\070" +
    "\011\074\012\062\013\075\014\104\031\076\044\063\052" +
    "\057\053\066\060\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\203\006\071\007" +
    "\106\010\070\011\074\012\062\013\075\014\104\031\076" +
    "\044\063\052\057\053\066\060\073\062\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\205\006\071" +
    "\007\106\010\070\011\074\012\062\013\075\014\104\031" +
    "\076\044\063\052\057\053\066\060\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\123\006\071\007\106\010\070\011\074" +
    "\012\062\013\075\014\104\031\076\033\212\044\063\052" +
    "\057\053\066\060\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\215\024\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\220\006\071\007\106" +
    "\010\070\011\074\012\062\013\075\014\104\031\076\044" +
    "\063\052\057\053\066\060\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\224\054" +
    "\227\001\001\000\002\001\001\000\006\022\231\027\024" +
    "\001\001\000\006\022\230\027\024\001\001\000\002\001" +
    "\001\000\004\027\035\001\001\000\004\027\035\001\001" +
    "\000\002\001\001\000\010\022\236\027\024\055\234\001" +
    "\001\000\002\001\001\000\010\022\240\027\024\057\237" +
    "\001\001\000\004\027\035\001\001\000\002\001\001\000" +
    "\004\027\035\001\001\000\010\022\240\027\024\057\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\005" +
    "\123\006\071\007\106\010\070\011\074\012\062\013\075" +
    "\014\104\031\076\033\245\044\063\052\057\053\066\060" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\213\006\071\007\106\010\070\011\074" +
    "\012\062\013\075\014\104\031\076\041\044\044\063\052" +
    "\057\053\066\060\073\001\001\000\002\001\001\000\034" +
    "\005\256\006\071\007\106\010\070\011\074\012\062\013" +
    "\075\014\104\031\076\044\063\052\057\053\066\060\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\113\040\264\001\001\000\006\022\262\027\024\001\001" +
    "\000\004\027\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\123" +
    "\006\071\007\106\010\070\011\074\012\062\013\075\014" +
    "\104\031\076\033\270\044\063\052\057\053\066\060\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\305\020\006" +
    "\021\015\025\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\310" +
    "\027\024\001\001\000\004\027\035\001\001\000\006\023" +
    "\312\024\130\001\001\000\002\001\001\000\004\026\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\324\027\024\001\001\000" +
    "\004\027\035\001\001\000\006\023\326\024\130\001\001" +
    "\000\002\001\001\000\004\026\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\333\006\071\007\106" +
    "\010\070\011\074\012\062\013\075\014\104\031\076\044" +
    "\063\052\057\053\066\060\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\342\006\071" +
    "\007\106\010\070\011\074\012\062\013\075\014\104\031" +
    "\076\044\063\052\057\053\066\060\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES_AUX ::= DECLARACIONES_INICIALES_AUX_AUX Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a SENTENCIA Llave_c Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES_AUX_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_FUNCION ::= DECLARACION_FUNCION TIPO Identificador Parentesis_a PARAMS_PREV Parentesis_c Llave_a SENTENCIA Llave_c Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DECLARACION_VAR Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION_VAR ::= Identificador Asignacion EXP Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_VAR ::= CONST_AUX TIPO Identificador ARRAY_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARRAY_AUX ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARRAY_AUX ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_VAR_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Op_booleano ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Op_booleano ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Op_booleano ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF_ELSE ::= IF LINEA_AUX Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LINEA_AUX ::= Linea LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LINEA_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c LINEA_AUX Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c LINEA_AUX While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()),  RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
