
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\042\006\000\002\042" +
    "\002\000\002\043\005\000\002\043\012\000\002\045\004" +
    "\000\002\045\002\000\002\002\004\000\002\003\011\000" +
    "\002\004\015\000\002\004\002\000\002\006\007\000\002" +
    "\006\003\000\002\005\005\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\002\000\002\044\006\000\002" +
    "\033\003\000\002\031\003\000\002\031\002\000\002\007" +
    "\006\000\002\032\004\000\002\032\002\000\002\010\011" +
    "\000\002\023\003\000\002\023\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\011" +
    "\010\000\002\041\004\000\002\041\002\000\002\012\012" +
    "\000\002\013\013\000\002\052\004\000\002\014\011\000" +
    "\002\025\012\000\002\025\011\000\002\026\005\000\002" +
    "\026\004\000\002\026\004\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\002\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\037\003\000\002\037\002\000\002" +
    "\015\005\000\002\016\004\000\002\016\002\000\002\040" +
    "\003\000\002\040\002\000\002\035\004\000\002\034\004" +
    "\000\002\034\002\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\021\004\000\002\046\003\000\002\046\004\000\002\047" +
    "\003\000\002\047\002\000\002\020\004\000\002\050\003" +
    "\000\002\050\004\000\002\051\003\000\002\051\002\000" +
    "\002\053\007\000\002\053\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\014\005\uffff\010\uffff\017\uffff\021\uffff\023" +
    "\uffff\001\002\000\004\002\276\001\002\000\014\005\012" +
    "\010\011\017\013\021\006\023\015\001\002\000\006\005" +
    "\273\021\272\001\002\000\006\030\uffb5\040\uffb5\001\002" +
    "\000\004\002\ufffa\001\002\000\006\030\uffb8\040\uffb8\001" +
    "\002\000\006\030\uffb9\040\uffb9\001\002\000\006\005\266" +
    "\017\265\001\002\000\006\030\020\040\017\001\002\000" +
    "\006\030\uffb7\040\uffb7\001\002\000\006\030\uffb6\040\uffb6" +
    "\001\002\000\004\032\257\001\002\000\010\032\021\041" +
    "\ufffb\043\024\001\002\000\016\005\012\010\011\017\013" +
    "\021\006\023\015\033\uffc2\001\002\000\014\005\000\010" +
    "\000\017\000\021\000\023\000\001\002\000\004\041\041" +
    "\001\002\000\022\030\031\031\026\032\027\041\uffc7\042" +
    "\025\047\uffc7\050\uffc7\051\uffc7\001\002\000\014\033\uffc8" +
    "\041\uffc8\047\uffc8\050\uffc8\051\uffc8\001\002\000\014\033" +
    "\uffc9\041\uffc9\047\uffc9\050\uffc9\051\uffc9\001\002\000\022" +
    "\030\031\031\026\032\027\033\uffc7\042\025\047\uffc7\050" +
    "\uffc7\051\uffc7\001\002\000\012\041\ufffc\047\033\050\034" +
    "\051\032\001\002\000\014\033\uffca\041\uffca\047\uffca\050" +
    "\uffca\051\uffca\001\002\000\024\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\041\uffc4\042\uffc4\047\uffc4\050\uffc4\051\uffc4\001" +
    "\002\000\024\030\uffc6\031\uffc6\032\uffc6\033\uffc6\041\uffc6" +
    "\042\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000\024\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\041\uffc5\042\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\001\002\000\024\030\031\031\026\032" +
    "\027\033\uffc7\041\uffc7\042\025\047\uffc7\050\uffc7\051\uffc7" +
    "\001\002\000\014\033\uffcc\041\uffcc\047\033\050\034\051" +
    "\032\001\002\000\012\033\040\047\033\050\034\051\032" +
    "\001\002\000\014\033\uffcb\041\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\001\002\000\016\004\042\005\uffd6\010\uffd6\017\uffd6" +
    "\021\uffd6\023\uffd6\001\002\000\022\004\042\005\uffd6\010" +
    "\uffd6\017\uffd6\021\uffd6\023\uffd6\024\uffd6\036\uffd6\001\002" +
    "\000\014\005\ufffe\010\ufffe\017\ufffe\021\ufffe\023\ufffe\001" +
    "\002\000\022\005\uffd7\010\uffd7\017\uffd7\021\uffd7\023\uffd7" +
    "\024\uffd7\026\uffd7\036\uffd7\001\002\000\004\033\uffc3\001" +
    "\002\000\004\033\054\001\002\000\004\030\050\001\002" +
    "\000\006\012\052\033\uffbf\001\002\000\004\033\uffc1\001" +
    "\002\000\014\005\012\010\011\017\013\021\006\023\015" +
    "\001\002\000\004\033\uffc0\001\002\000\004\036\055\001" +
    "\002\000\042\004\076\005\uffe6\010\uffe6\011\072\013\056" +
    "\015\077\016\057\017\uffe6\021\uffe6\023\uffe6\024\100\025" +
    "\075\030\066\037\uffea\053\061\054\103\001\002\000\004" +
    "\041\256\001\002\000\004\032\223\001\002\000\042\004" +
    "\076\005\uffe6\010\uffe6\011\072\013\056\015\077\016\057" +
    "\017\uffe6\021\uffe6\023\uffe6\024\100\025\075\030\066\037" +
    "\uffea\053\061\054\103\001\002\000\004\032\216\001\002" +
    "\000\042\004\076\005\uffe6\010\uffe6\011\072\013\056\015" +
    "\077\016\057\017\uffe6\021\uffe6\023\uffe6\024\100\025\075" +
    "\030\066\037\uffea\053\061\054\103\001\002\000\042\004" +
    "\076\005\uffe6\010\uffe6\011\072\013\056\015\077\016\057" +
    "\017\uffe6\021\uffe6\023\uffe6\024\100\025\075\030\066\037" +
    "\uffea\053\061\054\103\001\002\000\004\037\211\001\002" +
    "\000\042\004\ufff5\005\ufff5\010\ufff5\011\ufff5\013\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\030\ufff5\037\ufff5\053\ufff5\054\ufff5\001\002\000\006\032" +
    "\202\043\203\001\002\000\044\004\175\005\uffe6\010\uffe6" +
    "\011\072\013\056\015\077\016\057\017\uffe6\021\uffe6\023" +
    "\uffe6\024\100\025\075\026\uffd6\030\066\037\uffea\053\061" +
    "\054\103\001\002\000\042\004\076\005\uffe6\010\uffe6\011" +
    "\072\013\056\015\077\016\057\017\uffe6\021\uffe6\023\uffe6" +
    "\024\100\025\075\030\066\037\uffea\053\061\054\103\001" +
    "\002\000\042\004\076\005\uffe6\010\uffe6\011\072\013\056" +
    "\015\077\016\057\017\uffe6\021\uffe6\023\uffe6\024\100\025" +
    "\075\030\066\037\uffea\053\061\054\103\001\002\000\014" +
    "\005\uffe7\010\uffe7\017\uffe7\021\uffe7\023\uffe7\001\002\000" +
    "\004\041\167\001\002\000\014\005\012\010\011\017\013" +
    "\021\006\023\015\001\002\000\004\032\154\001\002\000" +
    "\042\004\076\005\uffe6\010\uffe6\011\072\013\056\015\077" +
    "\016\057\017\uffe6\021\uffe6\023\uffe6\024\100\025\075\030" +
    "\066\037\uffea\053\061\054\103\001\002\000\004\036\143" +
    "\001\002\000\004\032\121\001\002\000\042\004\076\005" +
    "\uffe6\010\uffe6\011\072\013\056\015\077\016\057\017\uffe6" +
    "\021\uffe6\023\uffe6\024\100\025\075\030\066\037\uffea\053" +
    "\061\054\103\001\002\000\004\041\115\001\002\000\004" +
    "\032\104\001\002\000\006\030\106\033\uffbd\001\002\000" +
    "\004\033\113\001\002\000\006\012\111\033\uffba\001\002" +
    "\000\004\033\uffbe\001\002\000\004\033\uffbc\001\002\000" +
    "\004\030\106\001\002\000\004\033\uffbb\001\002\000\004" +
    "\041\114\001\002\000\042\004\uffaa\005\uffaa\010\uffaa\011" +
    "\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\030\uffaa\037\uffaa\053\uffaa\054\uffaa\001" +
    "\002\000\042\004\076\005\uffe6\010\uffe6\011\072\013\056" +
    "\015\077\016\057\017\uffe6\021\uffe6\023\uffe6\024\100\025" +
    "\075\030\066\037\uffea\053\061\054\103\001\002\000\004" +
    "\037\ufff4\001\002\000\004\037\uffe8\001\002\000\004\037" +
    "\uffef\001\002\000\010\030\126\031\123\042\122\001\002" +
    "\000\006\033\uffdf\041\uffdf\001\002\000\006\033\uffde\041" +
    "\uffde\001\002\000\004\033\136\001\002\000\006\033\uffe1" +
    "\041\uffe1\001\002\000\016\027\127\033\uffdd\041\uffdd\044" +
    "\133\045\131\046\130\001\002\000\010\030\uffdc\031\uffdc" +
    "\042\uffdc\001\002\000\010\030\uffd9\031\uffd9\042\uffd9\001" +
    "\002\000\010\030\uffdb\031\uffdb\042\uffdb\001\002\000\010" +
    "\030\135\031\123\042\122\001\002\000\010\030\uffda\031" +
    "\uffda\042\uffda\001\002\000\006\033\uffe0\041\uffe0\001\002" +
    "\000\006\033\uffdd\041\uffdd\001\002\000\006\004\042\036" +
    "\uffd6\001\002\000\004\036\140\001\002\000\042\004\076" +
    "\005\uffe6\010\uffe6\011\072\013\056\015\077\016\057\017" +
    "\uffe6\021\uffe6\023\uffe6\024\100\025\075\030\066\037\uffea" +
    "\053\061\054\103\001\002\000\004\037\142\001\002\000" +
    "\042\004\uffd5\005\uffd5\010\uffd5\011\uffd5\013\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\030" +
    "\uffd5\037\uffd5\053\uffd5\054\uffd5\001\002\000\042\004\076" +
    "\005\uffe6\010\uffe6\011\072\013\056\015\077\016\057\017" +
    "\uffe6\021\uffe6\023\uffe6\024\100\025\075\030\066\037\uffea" +
    "\053\061\054\103\001\002\000\004\037\145\001\002\000" +
    "\006\004\042\024\uffd6\001\002\000\004\024\147\001\002" +
    "\000\004\032\150\001\002\000\010\030\126\031\123\042" +
    "\122\001\002\000\004\033\152\001\002\000\004\041\uffd4" +
    "\001\002\000\004\037\uffeb\001\002\000\010\030\126\031" +
    "\123\042\122\001\002\000\004\033\156\001\002\000\004" +
    "\036\157\001\002\000\042\004\076\005\uffe6\010\uffe6\011" +
    "\072\013\056\015\077\016\057\017\uffe6\021\uffe6\023\uffe6" +
    "\024\100\025\075\030\066\037\uffea\053\061\054\103\001" +
    "\002\000\004\037\161\001\002\000\044\004\uffe2\005\uffe2" +
    "\010\uffe2\011\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\021" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\037\uffe2" +
    "\053\uffe2\054\uffe2\001\002\000\004\030\163\001\002\000" +
    "\006\041\uffe3\043\165\001\002\000\004\041\uffe5\001\002" +
    "\000\022\030\031\031\026\032\027\041\uffc7\042\025\047" +
    "\uffc7\050\uffc7\051\uffc7\001\002\000\012\041\uffe4\047\033" +
    "\050\034\051\032\001\002\000\042\004\076\005\uffe6\010" +
    "\uffe6\011\072\013\056\015\077\016\057\017\uffe6\021\uffe6" +
    "\023\uffe6\024\100\025\075\030\066\037\uffea\053\061\054" +
    "\103\001\002\000\004\037\ufff0\001\002\000\004\037\ufff2" +
    "\001\002\000\004\037\uffee\001\002\000\004\037\ufff3\001" +
    "\002\000\004\026\176\001\002\000\044\004\175\005\uffe6" +
    "\010\uffe6\011\072\013\056\015\077\016\057\017\uffe6\021" +
    "\uffe6\023\uffe6\024\100\025\075\026\uffd6\030\066\037\uffea" +
    "\053\061\054\103\001\002\000\004\036\177\001\002\000" +
    "\042\004\076\005\uffe6\010\uffe6\011\072\013\056\015\077" +
    "\016\057\017\uffe6\021\uffe6\023\uffe6\024\100\025\075\030" +
    "\066\037\uffea\053\061\054\103\001\002\000\004\037\201" +
    "\001\002\000\042\004\uffd8\005\uffd8\010\uffd8\011\uffd8\013" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\030\uffd8\037\uffd8\053\uffd8\054\uffd8\001\002\000" +
    "\006\030\106\033\uffbd\001\002\000\022\030\031\031\026" +
    "\032\027\041\uffc7\042\025\047\uffc7\050\uffc7\051\uffc7\001" +
    "\002\000\012\041\205\047\033\050\034\051\032\001\002" +
    "\000\042\004\uffe9\005\uffe9\010\uffe9\011\uffe9\013\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\030\uffe9\037\uffe9\053\uffe9\054\uffe9\001\002\000\004\033" +
    "\207\001\002\000\004\041\210\001\002\000\042\004\ufff6" +
    "\005\ufff6\010\ufff6\011\ufff6\013\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\030\ufff6\037\ufff6" +
    "\053\ufff6\054\ufff6\001\002\000\004\041\212\001\002\000" +
    "\016\004\042\005\uffd6\010\uffd6\017\uffd6\021\uffd6\023\uffd6" +
    "\001\002\000\014\005\ufffd\010\ufffd\017\ufffd\021\ufffd\023" +
    "\ufffd\001\002\000\004\037\uffed\001\002\000\004\037\ufff1" +
    "\001\002\000\004\030\106\001\002\000\004\033\220\001" +
    "\002\000\004\041\221\001\002\000\042\004\uffa9\005\uffa9" +
    "\010\uffa9\011\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\021" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\037\uffa9\053\uffa9" +
    "\054\uffa9\001\002\000\004\037\uffec\001\002\000\016\005" +
    "\012\010\011\017\013\021\006\023\015\030\225\001\002" +
    "\000\004\033\252\001\002\000\004\043\244\001\002\000" +
    "\004\030\227\001\002\000\004\043\230\001\002\000\022" +
    "\030\031\031\026\032\027\041\uffc7\042\025\047\uffc7\050" +
    "\uffc7\051\uffc7\001\002\000\012\041\232\047\033\050\034" +
    "\051\032\001\002\000\010\030\126\031\123\042\122\001" +
    "\002\000\004\041\234\001\002\000\006\030\237\052\236" +
    "\001\002\000\004\033\uffd1\001\002\000\004\030\243\001" +
    "\002\000\006\043\241\052\240\001\002\000\004\033\uffce" +
    "\001\002\000\004\042\242\001\002\000\004\033\uffcf\001" +
    "\002\000\004\033\uffcd\001\002\000\022\030\031\031\026" +
    "\032\027\041\uffc7\042\025\047\uffc7\050\uffc7\051\uffc7\001" +
    "\002\000\012\041\246\047\033\050\034\051\032\001\002" +
    "\000\010\030\126\031\123\042\122\001\002\000\004\041" +
    "\250\001\002\000\006\030\237\052\236\001\002\000\004" +
    "\033\uffd0\001\002\000\004\036\253\001\002\000\042\004" +
    "\076\005\uffe6\010\uffe6\011\072\013\056\015\077\016\057" +
    "\017\uffe6\021\uffe6\023\uffe6\024\100\025\075\030\066\037" +
    "\uffea\053\061\054\103\001\002\000\004\037\255\001\002" +
    "\000\042\004\uffd2\005\uffd2\010\uffd2\011\uffd2\013\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\030\uffd2\037\uffd2\053\uffd2\054\uffd2\001\002\000\042\004" +
    "\uffd3\005\uffd3\010\uffd3\011\uffd3\013\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\030\uffd3\037" +
    "\uffd3\053\uffd3\054\uffd3\001\002\000\004\033\260\001\002" +
    "\000\004\036\261\001\002\000\042\004\076\005\uffe6\010" +
    "\uffe6\011\072\013\056\015\077\016\057\017\uffe6\021\uffe6" +
    "\023\uffe6\024\100\025\075\030\066\037\uffea\053\061\054" +
    "\103\001\002\000\004\037\263\001\002\000\004\002\ufff9" +
    "\001\002\000\006\030\uffaf\040\uffaf\001\002\000\010\005" +
    "\270\030\uffab\040\uffab\001\002\000\006\030\uffae\040\uffae" +
    "\001\002\000\006\030\uffad\040\uffad\001\002\000\006\030" +
    "\uffac\040\uffac\001\002\000\006\030\uffb4\040\uffb4\001\002" +
    "\000\010\005\275\030\uffb0\040\uffb0\001\002\000\006\030" +
    "\uffb3\040\uffb3\001\002\000\006\030\uffb2\040\uffb2\001\002" +
    "\000\006\030\uffb1\040\uffb1\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\012\003\007\017\013\020\006\021\015\001\001" +
    "\000\004\046\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\021\045\022\001\001" +
    "\000\014\015\044\017\046\020\006\021\015\037\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\036\001\001\000\004\027\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\035\001\001\000\004\027\034\001\001\000\004" +
    "\027\034\001\001\000\002\001\001\000\004\041\042\001" +
    "\001\000\004\041\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\050\001\001\000\002\001\001\000\012" +
    "\015\052\017\046\020\006\021\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\063\006\067\007\101" +
    "\010\066\011\070\012\061\013\072\014\100\031\073\044" +
    "\062\052\057\053\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\116\006\067\007\101\010\066\011" +
    "\070\012\061\013\072\014\100\031\073\033\221\044\062" +
    "\052\057\053\064\001\001\000\002\001\001\000\034\005" +
    "\116\006\067\007\101\010\066\011\070\012\061\013\072" +
    "\014\100\031\073\033\214\044\062\052\057\053\064\001" +
    "\001\000\034\005\116\006\067\007\101\010\066\011\070" +
    "\012\061\013\072\014\100\031\073\033\213\044\062\052" +
    "\057\053\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\116\006\067\007\101\010" +
    "\066\011\070\012\061\013\072\014\100\031\073\033\172" +
    "\041\173\044\062\052\057\053\064\001\001\000\034\005" +
    "\116\006\067\007\101\010\066\011\070\012\061\013\072" +
    "\014\100\031\073\033\171\044\062\052\057\053\064\001" +
    "\001\000\034\005\116\006\067\007\101\010\066\011\070" +
    "\012\061\013\072\014\100\031\073\033\170\044\062\052" +
    "\057\053\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\161\020\006\021\015\001\001\000\002\001" +
    "\001\000\032\005\152\006\067\007\101\010\066\011\070" +
    "\012\061\013\072\014\100\031\073\044\062\052\057\053" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\116\006\067\007\101\010\066\011\070\012\061\013" +
    "\072\014\100\031\073\033\117\044\062\052\057\053\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\106\040\104\001\001\000\002\001\001\000\004\034\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\116\006\067\007\101\010\066\011" +
    "\070\012\061\013\072\014\100\031\073\033\115\044\062" +
    "\052\057\053\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\123\024\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\136\001\001\000\002\001\001\000\032\005" +
    "\140\006\067\007\101\010\066\011\070\012\061\013\072" +
    "\014\100\031\073\044\062\052\057\053\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\143\006\067" +
    "\007\101\010\066\011\070\012\061\013\072\014\100\031" +
    "\073\044\062\052\057\053\064\001\001\000\002\001\001" +
    "\000\004\041\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\150\024\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\154\024" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\157\006\067\007\101\010\066\011\070\012\061\013" +
    "\072\014\100\031\073\044\062\052\057\053\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\163\001\001\000\002\001\001\000\004\022\165" +
    "\001\001\000\004\027\034\001\001\000\034\005\116\006" +
    "\067\007\101\010\066\011\070\012\061\013\072\014\100" +
    "\031\073\033\167\044\062\052\057\053\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\152\006\067\007" +
    "\101\010\066\011\070\012\061\013\072\014\100\031\073" +
    "\041\043\044\062\052\057\053\064\001\001\000\002\001" +
    "\001\000\032\005\177\006\067\007\101\010\066\011\070" +
    "\012\061\013\072\014\100\031\073\044\062\052\057\053" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\106\040\205\001\001\000\004\022\203\001\001\000" +
    "\004\027\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\225\020\006\021\015\025\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\230\001\001\000\004\027\034\001" +
    "\001\000\006\023\232\024\124\001\001\000\002\001\001" +
    "\000\004\026\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\244\001" +
    "\001\000\004\027\034\001\001\000\006\023\246\024\124" +
    "\001\001\000\002\001\001\000\004\026\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\253\006\067" +
    "\007\101\010\066\011\070\012\061\013\072\014\100\031" +
    "\073\044\062\052\057\053\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\261\006\067\007\101\010\066" +
    "\011\070\012\061\013\072\014\100\031\073\044\062\052" +
    "\057\053\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES_AUX ::= DECLARACIONES_INICIALES_AUX_AUX Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a SENTENCIA Llave_c Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES_AUX_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_FUNCION ::= DECLARACION_FUNCION TIPO Identificador Parentesis_a PARAMS_PREV Parentesis_c Llave_a SENTENCIA Llave_c Scolon LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DECLARACION_VAR Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION_VAR ::= Identificador Asignacion EXP Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VAR ::= CONST_AUX TIPO Identificador DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VAR_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES Op_booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op_booleano ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Op_booleano ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Op_booleano ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op_booleano",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_ELSE ::= IF LINEA_AUX Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LINEA_AUX ::= Linea LINEA_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LINEA_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_AUX",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c LINEA_AUX Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c LINEA_AUX While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
