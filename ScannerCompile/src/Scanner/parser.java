
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\042\010\000\002\042" +
    "\006\000\002\042\002\000\002\043\003\000\002\043\012" +
    "\000\002\002\004\000\002\003\012\000\002\006\007\000" +
    "\002\006\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\002\000\002\044\005\000\002\033\003\000\002" +
    "\031\003\000\002\031\002\000\002\007\010\000\002\007" +
    "\007\000\002\007\002\000\002\054\005\000\002\054\003" +
    "\000\002\054\002\000\002\066\007\000\002\066\003\000" +
    "\002\032\004\000\002\032\004\000\002\055\003\000\002" +
    "\055\005\000\002\057\003\000\002\057\005\000\002\010" +
    "\011\000\002\010\011\000\002\023\003\000\002\023\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\011\007\000\002\012\011\000\002" +
    "\012\011\000\002\013\012\000\002\052\004\000\002\014" +
    "\011\000\002\025\012\000\002\025\011\000\002\026\005" +
    "\000\002\026\004\000\002\026\004\000\002\022\005\000" +
    "\002\022\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\037\003\000\002\037\002" +
    "\000\002\015\005\000\002\016\004\000\002\016\002\000" +
    "\002\040\003\000\002\040\002\000\002\035\004\000\002" +
    "\034\004\000\002\034\002\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\021\004\000\002\046\003\000\002\046\004\000" +
    "\002\047\003\000\002\047\002\000\002\020\004\000\002" +
    "\050\003\000\002\050\004\000\002\051\003\000\002\051" +
    "\002\000\002\053\007\000\002\053\007\000\002\060\012" +
    "\000\002\061\005\000\002\061\002\000\002\062\005\000" +
    "\002\062\003\000\002\063\007\000\002\063\002\000\002" +
    "\064\005\000\002\064\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\016\005\ufffe\010\ufffe\011\ufffe\017\ufffe\021" +
    "\ufffe\023\ufffe\001\002\000\004\002\371\001\002\000\016" +
    "\005\013\010\012\011\007\017\014\021\006\023\016\001" +
    "\002\000\006\005\366\021\365\001\002\000\014\005\013" +
    "\010\012\017\014\021\006\023\016\001\002\000\006\030" +
    "\uffae\040\uffae\001\002\000\004\002\ufffb\001\002\000\006" +
    "\030\uffb1\040\uffb1\001\002\000\006\030\uffb2\040\uffb2\001" +
    "\002\000\006\005\355\017\354\001\002\000\006\030\021" +
    "\040\020\001\002\000\006\030\uffb0\040\uffb0\001\002\000" +
    "\006\030\uffaf\040\uffaf\001\002\000\004\032\345\001\002" +
    "\000\006\032\023\041\024\001\002\000\016\005\uffff\010" +
    "\uffff\011\uffff\017\uffff\021\uffff\023\uffff\001\002\000\016" +
    "\005\013\010\012\017\014\021\006\023\016\033\uffbb\001" +
    "\002\000\016\005\ufffd\010\ufffd\011\ufffd\017\ufffd\021\ufffd" +
    "\023\ufffd\001\002\000\004\033\uffbc\001\002\000\004\033" +
    "\034\001\002\000\004\030\030\001\002\000\006\012\032" +
    "\033\uffb8\001\002\000\004\033\uffba\001\002\000\014\005" +
    "\013\010\012\017\014\021\006\023\016\001\002\000\004" +
    "\033\uffb9\001\002\000\004\036\035\001\002\000\050\004" +
    "\uffe4\005\013\006\uffe4\010\012\011\036\013\uffe4\015\uffe4" +
    "\016\uffe4\017\014\020\uffe4\021\006\022\uffe4\023\016\024" +
    "\uffe4\025\uffe4\030\uffe4\037\uffe4\053\uffe4\054\uffe4\001\002" +
    "\000\014\005\013\010\012\017\014\021\006\023\016\001" +
    "\002\000\034\004\105\006\074\013\065\015\110\016\066" +
    "\020\106\022\107\024\111\025\104\030\076\037\uffeb\053" +
    "\070\054\113\001\002\000\004\030\041\001\002\000\010" +
    "\003\042\034\043\041\uffe1\001\002\000\004\041\uffe2\001" +
    "\002\000\020\030\053\031\050\032\052\042\055\047\057" +
    "\050\051\051\054\001\002\000\004\041\045\001\002\000" +
    "\050\004\uffe4\005\013\006\uffe4\010\012\011\036\013\uffe4" +
    "\015\uffe4\016\uffe4\017\014\020\uffe4\021\006\022\uffe4\023" +
    "\016\024\uffe4\025\uffe4\030\uffe4\037\uffe4\053\uffe4\054\uffe4" +
    "\001\002\000\034\004\uffe5\006\uffe5\013\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\022\uffe5\024\uffe5\025\uffe5\030\uffe5\037\uffe5" +
    "\053\uffe5\054\uffe5\001\002\000\022\012\uffc0\033\uffc0\035" +
    "\uffc0\037\uffc0\041\uffc0\047\uffc0\050\uffc0\051\uffc0\001\002" +
    "\000\022\012\uffc2\033\uffc2\035\uffc2\037\uffc2\041\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\001\002\000\032\012\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\035\uffbe\037\uffbe\041\uffbe\042" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\001\002\000\020\030\053" +
    "\031\050\032\052\042\055\047\057\050\051\051\054\001" +
    "\002\000\022\012\uffc3\033\uffc3\035\uffc3\037\uffc3\041\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\001\002\000\032\012\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd\037\uffbd\041\uffbd" +
    "\042\uffbd\047\uffbd\050\uffbd\051\uffbd\001\002\000\022\012" +
    "\uffc1\033\uffc1\035\uffc1\037\uffc1\041\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\001\002\000\012\035\060\047\057\050\051\051" +
    "\054\001\002\000\032\012\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\035\uffbf\037\uffbf\041\uffbf\042\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\001\002\000\004\041\uffe3\001\002\000\020" +
    "\030\053\031\050\032\052\042\055\047\057\050\051\051" +
    "\054\001\002\000\022\012\uffc5\033\uffc5\035\uffc5\037\uffc5" +
    "\041\uffc5\047\057\050\051\051\054\001\002\000\012\033" +
    "\064\047\057\050\051\051\054\001\002\000\022\012\uffc4" +
    "\033\uffc4\035\uffc4\037\uffc4\041\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\001\002\000\004\041\317\001\002\000\004\032\264" +
    "\001\002\000\040\004\105\006\074\007\uffeb\013\065\014" +
    "\uffeb\015\110\016\066\020\106\022\107\024\111\025\104" +
    "\030\076\037\uffeb\053\070\054\113\001\002\000\004\032" +
    "\257\001\002\000\040\004\105\006\074\007\uffeb\013\065" +
    "\014\uffeb\015\110\016\066\020\106\022\107\024\111\025" +
    "\104\030\076\037\uffeb\053\070\054\113\001\002\000\040" +
    "\004\105\006\074\007\uffeb\013\065\014\uffeb\015\110\016" +
    "\066\020\106\022\107\024\111\025\104\030\076\037\uffeb" +
    "\053\070\054\113\001\002\000\004\037\253\001\002\000" +
    "\004\041\251\001\002\000\040\004\ufff8\006\ufff8\007\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\022\ufff8\024" +
    "\ufff8\025\ufff8\030\ufff8\037\ufff8\053\ufff8\054\ufff8\001\002" +
    "\000\012\003\042\032\243\034\043\041\uffe1\001\002\000" +
    "\042\004\105\006\074\007\uffeb\013\065\014\uffeb\015\110" +
    "\016\066\020\106\022\107\024\111\025\104\026\236\030" +
    "\076\037\uffeb\053\070\054\113\001\002\000\040\004\105" +
    "\006\074\007\uffeb\013\065\014\uffeb\015\110\016\066\020" +
    "\106\022\107\024\111\025\104\030\076\037\uffeb\053\070" +
    "\054\113\001\002\000\040\004\105\006\074\007\uffeb\013" +
    "\065\014\uffeb\015\110\016\066\020\106\022\107\024\111" +
    "\025\104\030\076\037\uffeb\053\070\054\113\001\002\000" +
    "\040\004\105\006\074\007\uffeb\013\065\014\uffeb\015\110" +
    "\016\066\020\106\022\107\024\111\025\104\030\076\037" +
    "\uffeb\053\070\054\113\001\002\000\004\041\231\001\002" +
    "\000\004\032\216\001\002\000\040\004\105\006\074\007" +
    "\uffeb\013\065\014\uffeb\015\110\016\066\020\106\022\107" +
    "\024\111\025\104\030\076\037\uffeb\053\070\054\113\001" +
    "\002\000\004\041\213\001\002\000\004\032\161\001\002" +
    "\000\004\036\152\001\002\000\004\032\127\001\002\000" +
    "\040\004\105\006\074\007\uffeb\013\065\014\uffeb\015\110" +
    "\016\066\020\106\022\107\024\111\025\104\030\076\037" +
    "\uffeb\053\070\054\113\001\002\000\004\032\114\001\002" +
    "\000\006\030\116\033\uffb6\001\002\000\004\033\123\001" +
    "\002\000\006\012\121\033\uffb3\001\002\000\004\033\uffb7" +
    "\001\002\000\004\033\uffb5\001\002\000\004\030\116\001" +
    "\002\000\004\033\uffb4\001\002\000\004\041\124\001\002" +
    "\000\040\004\uffa3\006\uffa3\007\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\020\uffa3\022\uffa3\024\uffa3\025\uffa3\030\uffa3" +
    "\037\uffa3\053\uffa3\054\uffa3\001\002\000\010\007\ufff3\014" +
    "\ufff3\037\ufff3\001\002\000\010\007\uffe9\014\uffe9\037\uffe9" +
    "\001\002\000\022\003\131\030\130\031\050\032\052\042" +
    "\055\047\057\050\051\051\054\001\002\000\024\027\144" +
    "\033\uffc3\041\uffc3\044\150\045\146\046\145\047\uffc3\050" +
    "\uffc3\051\uffc3\001\002\000\004\033\140\001\002\000\004" +
    "\033\134\001\002\000\014\033\uffd6\041\uffd6\047\057\050" +
    "\051\051\054\001\002\000\004\036\135\001\002\000\034" +
    "\004\105\006\074\013\065\015\110\016\066\020\106\022" +
    "\107\024\111\025\104\030\076\037\uffeb\053\070\054\113" +
    "\001\002\000\004\037\137\001\002\000\040\004\uffcf\006" +
    "\uffcf\007\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf" +
    "\022\uffcf\024\uffcf\025\uffcf\030\uffcf\037\uffcf\053\uffcf\054" +
    "\uffcf\001\002\000\004\036\141\001\002\000\034\004\105" +
    "\006\074\013\065\015\110\016\066\020\106\022\107\024" +
    "\111\025\104\030\076\037\uffeb\053\070\054\113\001\002" +
    "\000\004\037\143\001\002\000\040\004\uffce\006\uffce\007" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce\022\uffce" +
    "\024\uffce\025\uffce\030\uffce\037\uffce\053\uffce\054\uffce\001" +
    "\002\000\020\030\uffd4\031\uffd4\032\uffd4\042\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\001\002\000\020\030\uffd1\031\uffd1\032" +
    "\uffd1\042\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002\000\020" +
    "\030\uffd3\031\uffd3\032\uffd3\042\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\001\002\000\020\030\053\031\050\032\052\042\055" +
    "\047\057\050\051\051\054\001\002\000\020\030\uffd2\031" +
    "\uffd2\032\uffd2\042\uffd2\047\uffd2\050\uffd2\051\uffd2\001\002" +
    "\000\014\033\uffd5\041\uffd5\047\057\050\051\051\054\001" +
    "\002\000\034\004\105\006\074\013\065\015\110\016\066" +
    "\020\106\022\107\024\111\025\104\030\076\037\uffeb\053" +
    "\070\054\113\001\002\000\004\037\154\001\002\000\004" +
    "\024\155\001\002\000\004\032\156\001\002\000\020\030" +
    "\130\031\050\032\052\042\055\047\057\050\051\051\054" +
    "\001\002\000\004\033\160\001\002\000\004\041\uffcd\001" +
    "\002\000\006\030\163\031\162\001\002\000\004\033\uff98" +
    "\001\002\000\006\033\uff97\043\211\001\002\000\004\033" +
    "\165\001\002\000\004\036\166\001\002\000\010\007\uff9b" +
    "\014\uff9b\037\uff9b\001\002\000\010\007\171\014\170\037" +
    "\uff9f\001\002\000\004\055\203\001\002\000\004\031\174" +
    "\001\002\000\004\037\173\001\002\000\040\004\uffa1\006" +
    "\uffa1\007\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1" +
    "\022\uffa1\024\uffa1\025\uffa1\030\uffa1\037\uffa1\053\uffa1\054" +
    "\uffa1\001\002\000\004\055\175\001\002\000\042\004\105" +
    "\006\074\007\uffeb\013\065\014\uffeb\015\110\016\066\020" +
    "\106\022\107\024\111\025\104\030\076\036\177\037\uffeb" +
    "\053\070\054\113\001\002\000\010\007\uff99\014\uff99\037" +
    "\uff99\001\002\000\034\004\105\006\074\013\065\015\110" +
    "\016\066\020\106\022\107\024\111\025\104\030\076\037" +
    "\uffeb\053\070\054\113\001\002\000\010\007\uff9c\014\uff9c" +
    "\037\uff9c\001\002\000\004\037\202\001\002\000\010\007" +
    "\uff9a\014\uff9a\037\uff9a\001\002\000\036\004\105\006\074" +
    "\013\065\015\110\016\066\020\106\022\107\024\111\025" +
    "\104\030\076\036\206\037\uffeb\053\070\054\113\001\002" +
    "\000\004\037\uffa0\001\002\000\004\037\uff9d\001\002\000" +
    "\034\004\105\006\074\013\065\015\110\016\066\020\106" +
    "\022\107\024\111\025\104\030\076\037\uffeb\053\070\054" +
    "\113\001\002\000\004\037\210\001\002\000\004\037\uff9e" +
    "\001\002\000\004\031\212\001\002\000\004\033\uff96\001" +
    "\002\000\040\004\105\006\074\007\uffeb\013\065\014\uffeb" +
    "\015\110\016\066\020\106\022\107\024\111\025\104\030" +
    "\076\037\uffeb\053\070\054\113\001\002\000\010\007\uffee" +
    "\014\uffee\037\uffee\001\002\000\010\007\uffec\014\uffec\037" +
    "\uffec\001\002\000\022\003\217\030\130\031\050\032\052" +
    "\042\055\047\057\050\051\051\054\001\002\000\004\033" +
    "\225\001\002\000\004\033\221\001\002\000\004\036\222" +
    "\001\002\000\034\004\105\006\074\013\065\015\110\016" +
    "\066\020\106\022\107\024\111\025\104\030\076\037\uffeb" +
    "\053\070\054\113\001\002\000\004\037\224\001\002\000" +
    "\042\004\uffd8\006\uffd8\007\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\030" +
    "\uffd8\037\uffd8\053\uffd8\054\uffd8\001\002\000\004\036\226" +
    "\001\002\000\034\004\105\006\074\013\065\015\110\016" +
    "\066\020\106\022\107\024\111\025\104\030\076\037\uffeb" +
    "\053\070\054\113\001\002\000\004\037\230\001\002\000" +
    "\042\004\uffd7\006\uffd7\007\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\020\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\037\uffd7\053\uffd7\054\uffd7\001\002\000\040\004\105" +
    "\006\074\007\uffeb\013\065\014\uffeb\015\110\016\066\020" +
    "\106\022\107\024\111\025\104\030\076\037\uffeb\053\070" +
    "\054\113\001\002\000\010\007\ufff4\014\ufff4\037\ufff4\001" +
    "\002\000\010\007\ufff2\014\ufff2\037\ufff2\001\002\000\010" +
    "\007\ufff6\014\ufff6\037\ufff6\001\002\000\010\007\ufff1\014" +
    "\ufff1\037\ufff1\001\002\000\004\036\240\001\002\000\010" +
    "\007\ufff7\014\ufff7\037\ufff7\001\002\000\034\004\105\006" +
    "\074\013\065\015\110\016\066\020\106\022\107\024\111" +
    "\025\104\030\076\037\uffeb\053\070\054\113\001\002\000" +
    "\004\037\242\001\002\000\040\004\uffd0\006\uffd0\007\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\022\uffd0\024" +
    "\uffd0\025\uffd0\030\uffd0\037\uffd0\053\uffd0\054\uffd0\001\002" +
    "\000\006\030\116\033\uffb6\001\002\000\004\041\245\001" +
    "\002\000\040\004\uffea\006\uffea\007\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\020\uffea\022\uffea\024\uffea\025\uffea\030" +
    "\uffea\037\uffea\053\uffea\054\uffea\001\002\000\004\033\247" +
    "\001\002\000\004\041\250\001\002\000\040\004\ufff9\006" +
    "\ufff9\007\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9" +
    "\022\ufff9\024\ufff9\025\ufff9\030\ufff9\037\ufff9\053\ufff9\054" +
    "\ufff9\001\002\000\040\004\105\006\074\007\uffeb\013\065" +
    "\014\uffeb\015\110\016\066\020\106\022\107\024\111\025" +
    "\104\030\076\037\uffeb\053\070\054\113\001\002\000\010" +
    "\007\uffed\014\uffed\037\uffed\001\002\000\004\041\254\001" +
    "\002\000\016\005\ufffc\010\ufffc\011\ufffc\017\ufffc\021\ufffc" +
    "\023\ufffc\001\002\000\010\007\ufff0\014\ufff0\037\ufff0\001" +
    "\002\000\010\007\ufff5\014\ufff5\037\ufff5\001\002\000\004" +
    "\030\116\001\002\000\004\033\261\001\002\000\004\041" +
    "\262\001\002\000\040\004\uffa2\006\uffa2\007\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\020\uffa2\022\uffa2\024\uffa2\025" +
    "\uffa2\030\uffa2\037\uffa2\053\uffa2\054\uffa2\001\002\000\010" +
    "\007\uffef\014\uffef\037\uffef\001\002\000\016\005\013\010" +
    "\012\017\014\021\006\023\016\030\267\001\002\000\004" +
    "\033\313\001\002\000\004\030\304\001\002\000\004\043" +
    "\270\001\002\000\020\030\053\031\050\032\052\042\055" +
    "\047\057\050\051\051\054\001\002\000\012\041\272\047" +
    "\057\050\051\051\054\001\002\000\020\030\130\031\050" +
    "\032\052\042\055\047\057\050\051\051\054\001\002\000" +
    "\004\041\274\001\002\000\006\030\277\052\275\001\002" +
    "\000\004\030\303\001\002\000\004\033\uffc9\001\002\000" +
    "\006\043\301\052\300\001\002\000\004\033\uffc7\001\002" +
    "\000\004\042\302\001\002\000\004\033\uffc8\001\002\000" +
    "\004\033\uffc6\001\002\000\004\043\305\001\002\000\020" +
    "\030\053\031\050\032\052\042\055\047\057\050\051\051" +
    "\054\001\002\000\012\041\307\047\057\050\051\051\054" +
    "\001\002\000\020\030\130\031\050\032\052\042\055\047" +
    "\057\050\051\051\054\001\002\000\004\041\311\001\002" +
    "\000\006\030\277\052\275\001\002\000\004\033\uffca\001" +
    "\002\000\004\036\314\001\002\000\034\004\105\006\074" +
    "\013\065\015\110\016\066\020\106\022\107\024\111\025" +
    "\104\030\076\037\uffeb\053\070\054\113\001\002\000\004" +
    "\037\316\001\002\000\040\004\uffcb\006\uffcb\007\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\022\uffcb\024\uffcb" +
    "\025\uffcb\030\uffcb\037\uffcb\053\uffcb\054\uffcb\001\002\000" +
    "\040\004\uffcc\006\uffcc\007\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\020\uffcc\022\uffcc\024\uffcc\025\uffcc\030\uffcc\037" +
    "\uffcc\053\uffcc\054\uffcc\001\002\000\004\030\321\001\002" +
    "\000\006\034\323\043\324\001\002\000\004\041\uffdf\001" +
    "\002\000\020\030\053\031\050\032\052\042\055\047\057" +
    "\050\051\051\054\001\002\000\022\003\330\030\053\031" +
    "\050\032\052\042\055\047\057\050\051\051\054\001\002" +
    "\000\004\041\326\001\002\000\050\004\uffe4\005\013\006" +
    "\uffe4\010\012\011\036\013\uffe4\015\uffe4\016\uffe4\017\014" +
    "\020\uffe4\021\006\022\uffe4\023\016\024\uffe4\025\uffe4\030" +
    "\uffe4\037\uffe4\053\uffe4\054\uffe4\001\002\000\034\004\uffe6" +
    "\006\uffe6\013\uffe6\015\uffe6\016\uffe6\020\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\030\uffe6\037\uffe6\053\uffe6\054\uffe6\001\002" +
    "\000\004\041\uffdd\001\002\000\012\041\uffde\047\057\050" +
    "\051\051\054\001\002\000\012\035\333\047\057\050\051" +
    "\051\054\001\002\000\004\043\334\001\002\000\022\030" +
    "\053\031\050\032\052\036\336\042\055\047\057\050\051" +
    "\051\054\001\002\000\004\041\uffe0\001\002\000\020\030" +
    "\053\031\050\032\052\042\055\047\057\050\051\051\054" +
    "\001\002\000\012\041\uffdc\047\057\050\051\051\054\001" +
    "\002\000\004\037\344\001\002\000\014\012\342\037\uffda" +
    "\047\057\050\051\051\054\001\002\000\020\030\053\031" +
    "\050\032\052\042\055\047\057\050\051\051\054\001\002" +
    "\000\004\037\uffd9\001\002\000\004\041\uffdb\001\002\000" +
    "\004\033\346\001\002\000\004\036\347\001\002\000\050" +
    "\004\uffe4\005\013\006\uffe4\010\012\011\036\013\uffe4\015" +
    "\uffe4\016\uffe4\017\014\020\uffe4\021\006\022\uffe4\023\016" +
    "\024\uffe4\025\uffe4\030\uffe4\037\uffe4\053\uffe4\054\uffe4\001" +
    "\002\000\034\004\105\006\074\013\065\015\110\016\066" +
    "\020\106\022\107\024\111\025\104\030\076\037\uffeb\053" +
    "\070\054\113\001\002\000\004\037\352\001\002\000\004" +
    "\002\ufffa\001\002\000\006\030\uffa8\040\uffa8\001\002\000" +
    "\010\005\357\030\uffa4\040\uffa4\001\002\000\006\030\uffa7" +
    "\040\uffa7\001\002\000\006\030\uffa6\040\uffa6\001\002\000" +
    "\006\030\uffa5\040\uffa5\001\002\000\004\030\361\001\002" +
    "\000\006\034\323\043\324\001\002\000\004\041\363\001" +
    "\002\000\016\005\000\010\000\011\000\017\000\021\000" +
    "\023\000\001\002\000\006\030\uffad\040\uffad\001\002\000" +
    "\010\005\370\030\uffa9\040\uffa9\001\002\000\006\030\uffac" +
    "\040\uffac\001\002\000\006\030\uffab\040\uffab\001\002\000" +
    "\006\030\uffaa\040\uffaa\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\012\003\010\017\014\020\007\021\016\001\001" +
    "\000\004\046\363\001\001\000\010\017\357\020\007\021" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\021\001\001\000\002\001\001\000" +
    "\014\015\024\017\026\020\007\021\016\037\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\030\001\001\000\002\001\001" +
    "\000\012\015\032\017\026\020\007\021\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\036\017\037" +
    "\020\007\021\016\001\001\000\010\017\317\020\007\021" +
    "\016\001\001\000\030\005\072\006\077\010\076\011\100" +
    "\012\070\013\102\014\111\044\071\052\066\053\074\060" +
    "\101\001\001\000\002\001\001\000\004\054\043\001\001" +
    "\000\002\001\001\000\006\022\055\027\046\001\001\000" +
    "\002\001\001\000\012\007\045\017\037\020\007\021\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\062\027\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\061\027\046\001\001\000\004\027\060\001" +
    "\001\000\004\027\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\125\006\077\010" +
    "\076\011\100\012\070\013\102\014\111\033\262\044\071" +
    "\052\066\053\074\060\101\001\001\000\002\001\001\000" +
    "\032\005\125\006\077\010\076\011\100\012\070\013\102" +
    "\014\111\033\255\044\071\052\066\053\074\060\101\001" +
    "\001\000\032\005\125\006\077\010\076\011\100\012\070" +
    "\013\102\014\111\033\254\044\071\052\066\053\074\060" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\243\001\001\000\032\005\125\006" +
    "\077\010\076\011\100\012\070\013\102\014\111\033\236" +
    "\044\071\052\066\053\074\060\101\001\001\000\032\005" +
    "\125\006\077\010\076\011\100\012\070\013\102\014\111" +
    "\033\234\044\071\052\066\053\074\060\101\001\001\000" +
    "\032\005\125\006\077\010\076\011\100\012\070\013\102" +
    "\014\111\033\233\044\071\052\066\053\074\060\101\001" +
    "\001\000\032\005\125\006\077\010\076\011\100\012\070" +
    "\013\102\014\111\033\232\044\071\052\066\053\074\060" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\214\006\077\010\076\011\100\012\070\013\102\014" +
    "\111\044\071\052\066\053\074\060\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\125\006\077\010\076\011\100\012\070" +
    "\013\102\014\111\033\124\044\071\052\066\053\074\060" +
    "\101\001\001\000\002\001\001\000\006\035\116\040\114" +
    "\001\001\000\002\001\001\000\004\034\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\132\023\131" +
    "\027\046\001\001\000\004\030\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\060\001\001\000\002" +
    "\001\001\000\030\005\135\006\077\010\076\011\100\012" +
    "\070\013\102\014\111\044\071\052\066\053\074\060\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\141\006\077\010\076\011\100\012\070" +
    "\013\102\014\111\044\071\052\066\053\074\060\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\150\027" +
    "\046\001\001\000\002\001\001\000\004\027\060\001\001" +
    "\000\030\005\152\006\077\010\076\011\100\012\070\013" +
    "\102\014\111\044\071\052\066\053\074\060\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\132\023\156\027\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\166\001\001\000\004\061\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\175\006\077\010" +
    "\076\011\100\012\070\013\102\014\111\044\071\052\066" +
    "\053\074\060\101\064\177\001\001\000\002\001\001\000" +
    "\030\005\200\006\077\010\076\011\100\012\070\013\102" +
    "\014\111\044\071\052\066\053\074\060\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\204\006\077\010\076\011\100\012\070\013\102\014" +
    "\111\044\071\052\066\053\074\060\101\062\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\206\006" +
    "\077\010\076\011\100\012\070\013\102\014\111\044\071" +
    "\052\066\053\074\060\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\125\006\077\010\076\011\100\012\070\013\102\014" +
    "\111\033\213\044\071\052\066\053\074\060\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\132\023" +
    "\217\027\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\222\006\077\010\076\011" +
    "\100\012\070\013\102\014\111\044\071\052\066\053\074" +
    "\060\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\226\006\077\010\076\011\100" +
    "\012\070\013\102\014\111\044\071\052\066\053\074\060" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\125\006\077\010\076\011\100\012\070\013\102\014" +
    "\111\033\231\044\071\052\066\053\074\060\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\240\006\077\010\076\011\100\012\070\013\102\014" +
    "\111\044\071\052\066\053\074\060\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\116\040\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\125\006" +
    "\077\010\076\011\100\012\070\013\102\014\111\033\251" +
    "\044\071\052\066\053\074\060\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\265\020\007\021\016\025\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\270\027\046\001\001\000\004\027\060\001\001\000" +
    "\010\022\132\023\272\027\046\001\001\000\002\001\001" +
    "\000\004\026\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\305\027\046\001\001\000\004\027\060\001\001" +
    "\000\010\022\132\023\307\027\046\001\001\000\002\001" +
    "\001\000\004\026\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\314\006\077\010\076\011\100\012" +
    "\070\013\102\014\111\044\071\052\066\053\074\060\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\321\066\324\001\001" +
    "\000\002\001\001\000\006\022\331\027\046\001\001\000" +
    "\006\022\330\027\046\001\001\000\002\001\001\000\012" +
    "\007\326\017\037\020\007\021\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\060\001\001\000\004" +
    "\027\060\001\001\000\002\001\001\000\010\022\336\027" +
    "\046\055\334\001\001\000\002\001\001\000\010\022\340" +
    "\027\046\057\337\001\001\000\004\027\060\001\001\000" +
    "\002\001\001\000\004\027\060\001\001\000\010\022\340" +
    "\027\046\057\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\347" +
    "\017\037\020\007\021\016\001\001\000\030\005\350\006" +
    "\077\010\076\011\100\012\070\013\102\014\111\044\071" +
    "\052\066\053\074\060\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\321\066\361\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();


    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO Identificador ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION_VAR ::= Identificador ARRAY_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_VAR ::= Const TIPO Identificador ARRAY_AUX_CONST Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VAR ::= TIPO Identificador ARRAY_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARRAY_AUX ::= Corchete_a EXP Corchete_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARRAY_AUX ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARRAY_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARRAY_AUX_CONST ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARRAY_AUX_CONST ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
