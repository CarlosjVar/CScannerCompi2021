
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\042\006\000\002\042" +
    "\002\000\002\043\004\000\002\043\012\000\002\045\004" +
    "\000\002\045\005\000\002\045\002\000\002\002\004\000" +
    "\002\003\012\000\002\006\007\000\002\006\003\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\002\000\002" +
    "\044\005\000\002\033\003\000\002\031\003\000\002\031" +
    "\002\000\002\007\010\000\002\007\002\000\002\054\007" +
    "\000\002\054\003\000\002\055\003\000\002\055\005\000" +
    "\002\057\003\000\002\057\005\000\002\032\004\000\002" +
    "\032\002\000\002\010\011\000\002\010\011\000\002\023" +
    "\003\000\002\023\005\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\011\007\000" +
    "\002\012\011\000\002\012\011\000\002\013\012\000\002" +
    "\052\004\000\002\014\011\000\002\025\012\000\002\025" +
    "\011\000\002\026\005\000\002\026\004\000\002\026\004" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\037" +
    "\003\000\002\037\002\000\002\015\005\000\002\016\004" +
    "\000\002\016\002\000\002\040\003\000\002\040\002\000" +
    "\002\035\004\000\002\034\004\000\002\034\002\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\021\004\000\002\046\003" +
    "\000\002\046\004\000\002\047\003\000\002\047\002\000" +
    "\002\020\004\000\002\050\003\000\002\050\004\000\002" +
    "\051\003\000\002\051\002\000\002\053\007\000\002\053" +
    "\007\000\002\060\012\000\002\061\005\000\002\061\002" +
    "\000\002\062\005\000\002\062\003\000\002\063\007\000" +
    "\002\063\002\000\002\064\005\000\002\064\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\014\005\uffff\010\uffff\017\uffff\021\uffff\023" +
    "\uffff\001\002\000\004\002\360\001\002\000\014\005\012" +
    "\010\011\017\013\021\006\023\015\001\002\000\006\005" +
    "\355\021\354\001\002\000\006\030\uffb0\040\uffb0\001\002" +
    "\000\004\002\ufff9\001\002\000\006\030\uffb3\040\uffb3\001" +
    "\002\000\006\030\uffb4\040\uffb4\001\002\000\006\005\350" +
    "\017\347\001\002\000\006\030\020\040\017\001\002\000" +
    "\006\030\uffb2\040\uffb2\001\002\000\006\030\uffb1\040\uffb1" +
    "\001\002\000\004\032\340\001\002\000\010\032\021\041" +
    "\ufffa\043\024\001\002\000\016\005\012\010\011\017\013" +
    "\021\006\023\015\033\uffbd\001\002\000\014\005\000\010" +
    "\000\017\000\021\000\023\000\001\002\000\004\041\044" +
    "\001\002\000\022\003\031\030\032\031\026\032\030\042" +
    "\034\047\036\050\027\051\033\001\002\000\022\012\uffc2" +
    "\033\uffc2\035\uffc2\037\uffc2\041\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\001\002\000\022\012\uffc4\033\uffc4\035\uffc4\037\uffc4" +
    "\041\uffc4\047\uffc4\050\uffc4\051\uffc4\001\002\000\032\012" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\037\uffc0" +
    "\041\uffc0\042\uffc0\047\uffc0\050\uffc0\051\uffc0\001\002\000" +
    "\020\030\032\031\026\032\030\042\034\047\036\050\027" +
    "\051\033\001\002\000\004\041\041\001\002\000\022\012" +
    "\uffc5\033\uffc5\035\uffc5\037\uffc5\041\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\001\002\000\032\012\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\037\uffbf\041\uffbf\042\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\001\002\000\022\012\uffc3\033\uffc3\035" +
    "\uffc3\037\uffc3\041\uffc3\047\uffc3\050\uffc3\051\uffc3\001\002" +
    "\000\012\041\ufffc\047\036\050\027\051\033\001\002\000" +
    "\032\012\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1" +
    "\037\uffc1\041\uffc1\042\uffc1\047\uffc1\050\uffc1\051\uffc1\001" +
    "\002\000\020\030\032\031\026\032\030\042\034\047\036" +
    "\050\027\051\033\001\002\000\022\012\uffc7\033\uffc7\035" +
    "\uffc7\037\uffc7\041\uffc7\047\036\050\027\051\033\001\002" +
    "\000\004\041\ufffb\001\002\000\012\033\043\047\036\050" +
    "\027\051\033\001\002\000\022\012\uffc6\033\uffc6\035\uffc6" +
    "\037\uffc6\041\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000" +
    "\014\005\ufffe\010\ufffe\017\ufffe\021\ufffe\023\ufffe\001\002" +
    "\000\004\033\uffbe\001\002\000\004\033\054\001\002\000" +
    "\004\030\050\001\002\000\006\012\052\033\uffba\001\002" +
    "\000\004\033\uffbc\001\002\000\014\005\012\010\011\017" +
    "\013\021\006\023\015\001\002\000\004\033\uffbb\001\002" +
    "\000\004\036\055\001\002\000\050\004\uffe3\005\uffe5\006" +
    "\uffe3\010\uffe5\011\057\013\uffe3\015\uffe3\016\uffe3\017\uffe5" +
    "\020\uffe3\021\uffe5\022\uffe3\023\uffe5\024\uffe3\025\uffe3\030" +
    "\uffe3\037\uffe3\053\uffe3\054\uffe3\001\002\000\014\005\012" +
    "\010\011\017\013\021\006\023\015\001\002\000\014\005" +
    "\uffe6\010\uffe6\017\uffe6\021\uffe6\023\uffe6\001\002\000\034" +
    "\004\101\006\070\013\061\015\104\016\064\020\102\022" +
    "\103\024\105\025\100\030\072\037\uffe9\053\063\054\107" +
    "\001\002\000\004\041\332\001\002\000\040\004\101\006" +
    "\070\007\uffe9\013\061\014\uffe9\015\104\016\064\020\102" +
    "\022\103\024\105\025\100\030\072\037\uffe9\053\063\054" +
    "\107\001\002\000\004\032\325\001\002\000\004\032\272" +
    "\001\002\000\040\004\101\006\070\007\uffe9\013\061\014" +
    "\uffe9\015\104\016\064\020\102\022\103\024\105\025\100" +
    "\030\072\037\uffe9\053\063\054\107\001\002\000\040\004" +
    "\101\006\070\007\uffe9\013\061\014\uffe9\015\104\016\064" +
    "\020\102\022\103\024\105\025\100\030\072\037\uffe9\053" +
    "\063\054\107\001\002\000\004\037\266\001\002\000\004" +
    "\041\264\001\002\000\040\004\ufff6\006\ufff6\007\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\022\ufff6\024\ufff6" +
    "\025\ufff6\030\ufff6\037\ufff6\053\ufff6\054\ufff6\001\002\000" +
    "\012\032\240\034\241\041\uffdb\043\242\001\002\000\042" +
    "\004\101\006\070\007\uffe9\013\061\014\uffe9\015\104\016" +
    "\064\020\102\022\103\024\105\025\100\026\232\030\072" +
    "\037\uffe9\053\063\054\107\001\002\000\040\004\101\006" +
    "\070\007\uffe9\013\061\014\uffe9\015\104\016\064\020\102" +
    "\022\103\024\105\025\100\030\072\037\uffe9\053\063\054" +
    "\107\001\002\000\040\004\101\006\070\007\uffe9\013\061" +
    "\014\uffe9\015\104\016\064\020\102\022\103\024\105\025" +
    "\100\030\072\037\uffe9\053\063\054\107\001\002\000\040" +
    "\004\101\006\070\007\uffe9\013\061\014\uffe9\015\104\016" +
    "\064\020\102\022\103\024\105\025\100\030\072\037\uffe9" +
    "\053\063\054\107\001\002\000\004\041\225\001\002\000" +
    "\004\032\212\001\002\000\040\004\101\006\070\007\uffe9" +
    "\013\061\014\uffe9\015\104\016\064\020\102\022\103\024" +
    "\105\025\100\030\072\037\uffe9\053\063\054\107\001\002" +
    "\000\004\041\207\001\002\000\004\032\155\001\002\000" +
    "\004\036\146\001\002\000\004\032\123\001\002\000\040" +
    "\004\101\006\070\007\uffe9\013\061\014\uffe9\015\104\016" +
    "\064\020\102\022\103\024\105\025\100\030\072\037\uffe9" +
    "\053\063\054\107\001\002\000\004\032\110\001\002\000" +
    "\006\030\113\033\uffb8\001\002\000\004\033\117\001\002" +
    "\000\004\033\uffb9\001\002\000\006\012\115\033\uffb5\001" +
    "\002\000\004\033\uffb7\001\002\000\004\030\113\001\002" +
    "\000\004\033\uffb6\001\002\000\004\041\120\001\002\000" +
    "\040\004\uffa5\006\uffa5\007\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\020\uffa5\022\uffa5\024\uffa5\025\uffa5\030\uffa5\037" +
    "\uffa5\053\uffa5\054\uffa5\001\002\000\010\007\ufff1\014\ufff1" +
    "\037\ufff1\001\002\000\010\007\uffe7\014\uffe7\037\uffe7\001" +
    "\002\000\022\003\124\030\125\031\026\032\030\042\034" +
    "\047\036\050\027\051\033\001\002\000\004\033\142\001" +
    "\002\000\024\027\134\033\uffc5\041\uffc5\044\140\045\135" +
    "\046\136\047\uffc5\050\uffc5\051\uffc5\001\002\000\004\033" +
    "\130\001\002\000\014\033\uffd8\041\uffd8\047\036\050\027" +
    "\051\033\001\002\000\004\036\131\001\002\000\034\004" +
    "\101\006\070\013\061\015\104\016\064\020\102\022\103" +
    "\024\105\025\100\030\072\037\uffe9\053\063\054\107\001" +
    "\002\000\004\037\133\001\002\000\040\004\uffd1\006\uffd1" +
    "\007\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\022" +
    "\uffd1\024\uffd1\025\uffd1\030\uffd1\037\uffd1\053\uffd1\054\uffd1" +
    "\001\002\000\020\030\uffd6\031\uffd6\032\uffd6\042\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\001\002\000\020\030\uffd5\031\uffd5" +
    "\032\uffd5\042\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002\000" +
    "\020\030\uffd3\031\uffd3\032\uffd3\042\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\001\002\000\020\030\032\031\026\032\030\042" +
    "\034\047\036\050\027\051\033\001\002\000\020\030\uffd4" +
    "\031\uffd4\032\uffd4\042\uffd4\047\uffd4\050\uffd4\051\uffd4\001" +
    "\002\000\014\033\uffd7\041\uffd7\047\036\050\027\051\033" +
    "\001\002\000\004\036\143\001\002\000\034\004\101\006" +
    "\070\013\061\015\104\016\064\020\102\022\103\024\105" +
    "\025\100\030\072\037\uffe9\053\063\054\107\001\002\000" +
    "\004\037\145\001\002\000\040\004\uffd0\006\uffd0\007\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\022\uffd0\024" +
    "\uffd0\025\uffd0\030\uffd0\037\uffd0\053\uffd0\054\uffd0\001\002" +
    "\000\034\004\101\006\070\013\061\015\104\016\064\020" +
    "\102\022\103\024\105\025\100\030\072\037\uffe9\053\063" +
    "\054\107\001\002\000\004\037\150\001\002\000\004\024" +
    "\151\001\002\000\004\032\152\001\002\000\020\030\125" +
    "\031\026\032\030\042\034\047\036\050\027\051\033\001" +
    "\002\000\004\033\154\001\002\000\004\041\uffcf\001\002" +
    "\000\006\030\157\031\156\001\002\000\004\033\uff9a\001" +
    "\002\000\006\033\uff99\043\205\001\002\000\004\033\161" +
    "\001\002\000\004\036\162\001\002\000\010\007\uff9d\014" +
    "\uff9d\037\uff9d\001\002\000\010\007\164\014\165\037\uffa1" +
    "\001\002\000\004\031\176\001\002\000\004\055\170\001" +
    "\002\000\004\037\167\001\002\000\040\004\uffa3\006\uffa3" +
    "\007\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\020\uffa3\022" +
    "\uffa3\024\uffa3\025\uffa3\030\uffa3\037\uffa3\053\uffa3\054\uffa3" +
    "\001\002\000\036\004\101\006\070\013\061\015\104\016" +
    "\064\020\102\022\103\024\105\025\100\030\072\036\173" +
    "\037\uffe9\053\063\054\107\001\002\000\004\037\uffa2\001" +
    "\002\000\004\037\uff9f\001\002\000\034\004\101\006\070" +
    "\013\061\015\104\016\064\020\102\022\103\024\105\025" +
    "\100\030\072\037\uffe9\053\063\054\107\001\002\000\004" +
    "\037\175\001\002\000\004\037\uffa0\001\002\000\004\055" +
    "\177\001\002\000\042\004\101\006\070\007\uffe9\013\061" +
    "\014\uffe9\015\104\016\064\020\102\022\103\024\105\025" +
    "\100\030\072\036\201\037\uffe9\053\063\054\107\001\002" +
    "\000\010\007\uff9b\014\uff9b\037\uff9b\001\002\000\034\004" +
    "\101\006\070\013\061\015\104\016\064\020\102\022\103" +
    "\024\105\025\100\030\072\037\uffe9\053\063\054\107\001" +
    "\002\000\010\007\uff9e\014\uff9e\037\uff9e\001\002\000\004" +
    "\037\204\001\002\000\010\007\uff9c\014\uff9c\037\uff9c\001" +
    "\002\000\004\031\206\001\002\000\004\033\uff98\001\002" +
    "\000\040\004\101\006\070\007\uffe9\013\061\014\uffe9\015" +
    "\104\016\064\020\102\022\103\024\105\025\100\030\072" +
    "\037\uffe9\053\063\054\107\001\002\000\010\007\uffec\014" +
    "\uffec\037\uffec\001\002\000\010\007\uffea\014\uffea\037\uffea" +
    "\001\002\000\022\003\213\030\125\031\026\032\030\042" +
    "\034\047\036\050\027\051\033\001\002\000\004\033\221" +
    "\001\002\000\004\033\215\001\002\000\004\036\216\001" +
    "\002\000\034\004\101\006\070\013\061\015\104\016\064" +
    "\020\102\022\103\024\105\025\100\030\072\037\uffe9\053" +
    "\063\054\107\001\002\000\004\037\220\001\002\000\042" +
    "\004\uffda\006\uffda\007\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\020\uffda\022\uffda\024\uffda\025\uffda\026\uffda\030\uffda" +
    "\037\uffda\053\uffda\054\uffda\001\002\000\004\036\222\001" +
    "\002\000\034\004\101\006\070\013\061\015\104\016\064" +
    "\020\102\022\103\024\105\025\100\030\072\037\uffe9\053" +
    "\063\054\107\001\002\000\004\037\224\001\002\000\042" +
    "\004\uffd9\006\uffd9\007\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\020\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9" +
    "\037\uffd9\053\uffd9\054\uffd9\001\002\000\040\004\101\006" +
    "\070\007\uffe9\013\061\014\uffe9\015\104\016\064\020\102" +
    "\022\103\024\105\025\100\030\072\037\uffe9\053\063\054" +
    "\107\001\002\000\010\007\ufff2\014\ufff2\037\ufff2\001\002" +
    "\000\010\007\ufff4\014\ufff4\037\ufff4\001\002\000\010\007" +
    "\ufff0\014\ufff0\037\ufff0\001\002\000\010\007\uffef\014\uffef" +
    "\037\uffef\001\002\000\004\036\234\001\002\000\010\007" +
    "\ufff5\014\ufff5\037\ufff5\001\002\000\034\004\101\006\070" +
    "\013\061\015\104\016\064\020\102\022\103\024\105\025" +
    "\100\030\072\037\uffe9\053\063\054\107\001\002\000\004" +
    "\037\236\001\002\000\040\004\uffd2\006\uffd2\007\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\022\uffd2\024\uffd2" +
    "\025\uffd2\030\uffd2\037\uffd2\053\uffd2\054\uffd2\001\002\000" +
    "\004\041\uffe1\001\002\000\006\030\113\033\uffb8\001\002" +
    "\000\020\030\032\031\026\032\030\042\034\047\036\050" +
    "\027\051\033\001\002\000\020\030\032\031\026\032\030" +
    "\042\034\047\036\050\027\051\033\001\002\000\004\041" +
    "\244\001\002\000\040\004\uffe8\006\uffe8\007\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\020\uffe8\022\uffe8\024\uffe8\025" +
    "\uffe8\030\uffe8\037\uffe8\053\uffe8\054\uffe8\001\002\000\012" +
    "\041\uffdc\047\036\050\027\051\033\001\002\000\012\035" +
    "\247\047\036\050\027\051\033\001\002\000\004\043\250" +
    "\001\002\000\022\030\032\031\026\032\030\036\252\042" +
    "\034\047\036\050\027\051\033\001\002\000\004\041\uffe2" +
    "\001\002\000\020\030\032\031\026\032\030\042\034\047" +
    "\036\050\027\051\033\001\002\000\012\041\uffe0\047\036" +
    "\050\027\051\033\001\002\000\004\037\260\001\002\000" +
    "\014\012\256\037\uffde\047\036\050\027\051\033\001\002" +
    "\000\020\030\032\031\026\032\030\042\034\047\036\050" +
    "\027\051\033\001\002\000\004\037\uffdd\001\002\000\004" +
    "\041\uffdf\001\002\000\004\033\262\001\002\000\004\041" +
    "\263\001\002\000\040\004\ufff7\006\ufff7\007\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\020\ufff7\022\ufff7\024\ufff7\025" +
    "\ufff7\030\ufff7\037\ufff7\053\ufff7\054\ufff7\001\002\000\040" +
    "\004\101\006\070\007\uffe9\013\061\014\uffe9\015\104\016" +
    "\064\020\102\022\103\024\105\025\100\030\072\037\uffe9" +
    "\053\063\054\107\001\002\000\010\007\uffeb\014\uffeb\037" +
    "\uffeb\001\002\000\004\041\267\001\002\000\014\005\ufffd" +
    "\010\ufffd\017\ufffd\021\ufffd\023\ufffd\001\002\000\010\007" +
    "\uffee\014\uffee\037\uffee\001\002\000\010\007\ufff3\014\ufff3" +
    "\037\ufff3\001\002\000\016\005\012\010\011\017\013\021" +
    "\006\023\015\030\275\001\002\000\004\033\321\001\002" +
    "\000\004\030\312\001\002\000\004\043\276\001\002\000" +
    "\020\030\032\031\026\032\030\042\034\047\036\050\027" +
    "\051\033\001\002\000\012\041\300\047\036\050\027\051" +
    "\033\001\002\000\020\030\125\031\026\032\030\042\034" +
    "\047\036\050\027\051\033\001\002\000\004\041\302\001" +
    "\002\000\006\030\305\052\304\001\002\000\004\033\uffcb" +
    "\001\002\000\004\030\311\001\002\000\006\043\307\052" +
    "\306\001\002\000\004\033\uffc9\001\002\000\004\042\310" +
    "\001\002\000\004\033\uffca\001\002\000\004\033\uffc8\001" +
    "\002\000\004\043\313\001\002\000\020\030\032\031\026" +
    "\032\030\042\034\047\036\050\027\051\033\001\002\000" +
    "\012\041\315\047\036\050\027\051\033\001\002\000\020" +
    "\030\125\031\026\032\030\042\034\047\036\050\027\051" +
    "\033\001\002\000\004\041\317\001\002\000\006\030\305" +
    "\052\304\001\002\000\004\033\uffcc\001\002\000\004\036" +
    "\322\001\002\000\034\004\101\006\070\013\061\015\104" +
    "\016\064\020\102\022\103\024\105\025\100\030\072\037" +
    "\uffe9\053\063\054\107\001\002\000\004\037\324\001\002" +
    "\000\040\004\uffcd\006\uffcd\007\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\020\uffcd\022\uffcd\024\uffcd\025\uffcd\030\uffcd" +
    "\037\uffcd\053\uffcd\054\uffcd\001\002\000\004\030\113\001" +
    "\002\000\004\033\327\001\002\000\004\041\330\001\002" +
    "\000\040\004\uffa4\006\uffa4\007\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\020\uffa4\022\uffa4\024\uffa4\025\uffa4\030\uffa4" +
    "\037\uffa4\053\uffa4\054\uffa4\001\002\000\010\007\uffed\014" +
    "\uffed\037\uffed\001\002\000\040\004\uffce\006\uffce\007\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce\022\uffce\024" +
    "\uffce\025\uffce\030\uffce\037\uffce\053\uffce\054\uffce\001\002" +
    "\000\004\030\334\001\002\000\010\034\241\041\uffdb\043" +
    "\242\001\002\000\004\041\336\001\002\000\050\004\uffe3" +
    "\005\uffe5\006\uffe3\010\uffe5\011\057\013\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe5\020\uffe3\021\uffe5\022\uffe3\023\uffe5\024\uffe3" +
    "\025\uffe3\030\uffe3\037\uffe3\053\uffe3\054\uffe3\001\002\000" +
    "\034\004\uffe4\006\uffe4\013\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\022\uffe4\024\uffe4\025\uffe4\030\uffe4\037\uffe4\053\uffe4\054" +
    "\uffe4\001\002\000\004\033\341\001\002\000\004\036\342" +
    "\001\002\000\050\004\uffe3\005\uffe5\006\uffe3\010\uffe5\011" +
    "\057\013\uffe3\015\uffe3\016\uffe3\017\uffe5\020\uffe3\021\uffe5" +
    "\022\uffe3\023\uffe5\024\uffe3\025\uffe3\030\uffe3\037\uffe3\053" +
    "\uffe3\054\uffe3\001\002\000\034\004\101\006\070\013\061" +
    "\015\104\016\064\020\102\022\103\024\105\025\100\030" +
    "\072\037\uffe9\053\063\054\107\001\002\000\004\037\345" +
    "\001\002\000\004\002\ufff8\001\002\000\006\030\uffaa\040" +
    "\uffaa\001\002\000\010\005\352\030\uffa6\040\uffa6\001\002" +
    "\000\006\030\uffa9\040\uffa9\001\002\000\006\030\uffa8\040" +
    "\uffa8\001\002\000\006\030\uffa7\040\uffa7\001\002\000\006" +
    "\030\uffaf\040\uffaf\001\002\000\010\005\357\030\uffab\040" +
    "\uffab\001\002\000\006\030\uffae\040\uffae\001\002\000\006" +
    "\030\uffad\040\uffad\001\002\000\006\030\uffac\040\uffac\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\012\003\007\017\013\020\006\021\015\001\001" +
    "\000\004\046\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\021\045\022\001\001" +
    "\000\014\015\044\017\046\020\006\021\015\037\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\034" +
    "\027\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\041\027\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\036\001\001\000\002\001\001\000\006" +
    "\022\037\027\024\001\001\000\004\027\036\001\001\000" +
    "\002\001\001\000\004\027\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\050\001\001\000\002\001\001" +
    "\000\012\015\052\017\046\020\006\021\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\057\031\055" +
    "\001\001\000\010\017\332\020\006\021\015\001\001\000" +
    "\002\001\001\000\030\005\066\006\073\010\072\011\075" +
    "\012\064\013\076\014\105\044\065\052\061\053\070\060" +
    "\074\001\001\000\002\001\001\000\032\005\121\006\073" +
    "\010\072\011\075\012\064\013\076\014\105\033\330\044" +
    "\065\052\061\053\070\060\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\121\006\073\010\072\011" +
    "\075\012\064\013\076\014\105\033\270\044\065\052\061" +
    "\053\070\060\074\001\001\000\032\005\121\006\073\010" +
    "\072\011\075\012\064\013\076\014\105\033\267\044\065" +
    "\052\061\053\070\060\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\236\054\242" +
    "\001\001\000\032\005\121\006\073\010\072\011\075\012" +
    "\064\013\076\014\105\033\232\044\065\052\061\053\070" +
    "\060\074\001\001\000\032\005\121\006\073\010\072\011" +
    "\075\012\064\013\076\014\105\033\230\044\065\052\061" +
    "\053\070\060\074\001\001\000\032\005\121\006\073\010" +
    "\072\011\075\012\064\013\076\014\105\033\227\044\065" +
    "\052\061\053\070\060\074\001\001\000\032\005\121\006" +
    "\073\010\072\011\075\012\064\013\076\014\105\033\226" +
    "\044\065\052\061\053\070\060\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\210\006\073\010\072" +
    "\011\075\012\064\013\076\014\105\044\065\052\061\053" +
    "\070\060\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\121\006" +
    "\073\010\072\011\075\012\064\013\076\014\105\033\120" +
    "\044\065\052\061\053\070\060\074\001\001\000\002\001" +
    "\001\000\006\035\111\040\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\113\001\001\000\002\001" +
    "\001\000\004\035\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\126\023\125\027\024\001\001\000\002" +
    "\001\001\000\004\030\136\001\001\000\002\001\001\000" +
    "\004\027\036\001\001\000\002\001\001\000\030\005\131" +
    "\006\073\010\072\011\075\012\064\013\076\014\105\044" +
    "\065\052\061\053\070\060\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\140\027\024\001\001\000\002" +
    "\001\001\000\004\027\036\001\001\000\002\001\001\000" +
    "\030\005\143\006\073\010\072\011\075\012\064\013\076" +
    "\014\105\044\065\052\061\053\070\060\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\146\006\073" +
    "\010\072\011\075\012\064\013\076\014\105\044\065\052" +
    "\061\053\070\060\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\126\023\152\027" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\162\001\001" +
    "\000\004\061\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\171" +
    "\006\073\010\072\011\075\012\064\013\076\014\105\044" +
    "\065\052\061\053\070\060\074\062\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\173\006\073\010" +
    "\072\011\075\012\064\013\076\014\105\044\065\052\061" +
    "\053\070\060\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\177\006\073\010\072" +
    "\011\075\012\064\013\076\014\105\044\065\052\061\053" +
    "\070\060\074\064\201\001\001\000\002\001\001\000\030" +
    "\005\202\006\073\010\072\011\075\012\064\013\076\014" +
    "\105\044\065\052\061\053\070\060\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\121\006\073\010\072" +
    "\011\075\012\064\013\076\014\105\033\207\044\065\052" +
    "\061\053\070\060\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\126\023\213\027\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\216\006\073\010\072\011\075\012\064\013\076\014" +
    "\105\044\065\052\061\053\070\060\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\222\006\073\010\072\011\075\012\064\013\076\014\105" +
    "\044\065\052\061\053\070\060\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\121\006\073\010\072" +
    "\011\075\012\064\013\076\014\105\033\225\044\065\052" +
    "\061\053\070\060\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\234\006\073\010\072" +
    "\011\075\012\064\013\076\014\105\044\065\052\061\053" +
    "\070\060\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\111\040\260\001\001\000" +
    "\006\022\245\027\024\001\001\000\006\022\244\027\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\036\001\001\000\004\027\036\001\001\000\002\001\001" +
    "\000\010\022\252\027\024\055\250\001\001\000\002\001" +
    "\001\000\010\022\254\027\024\057\253\001\001\000\004" +
    "\027\036\001\001\000\002\001\001\000\004\027\036\001" +
    "\001\000\010\022\254\027\024\057\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\121\006\073\010\072" +
    "\011\075\012\064\013\076\014\105\033\264\044\065\052" +
    "\061\053\070\060\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\273\020\006\021\015\025\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\276\027\024\001\001\000\004\027\036\001\001" +
    "\000\010\022\126\023\300\027\024\001\001\000\002\001" +
    "\001\000\004\026\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\313\027\024\001\001\000\004\027\036\001" +
    "\001\000\010\022\126\023\315\027\024\001\001\000\002" +
    "\001\001\000\004\026\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\322\006\073\010\072\011\075" +
    "\012\064\013\076\014\105\044\065\052\061\053\070\060" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\236\054\334\001\001\000\002\001" +
    "\001\000\006\007\336\031\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\342\031" +
    "\055\001\001\000\030\005\343\006\073\010\072\011\075" +
    "\012\064\013\076\014\105\044\065\052\061\053\070\060" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\355\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();

    public void addError(String error,Symbol token){
            this.errores.add(error + token.value);
    }



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES_AUX ::= DECLARACIONES_INICIALES_AUX_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES_AUX_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES_AUX_AUX ::= Asignacion error Scolon 
            {
              Object RESULT =null;
		System.out.print("Error de asignación"); this.parser.addError("Asignación error in line" , ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES_INICIALES_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION_VAR ::= Identificador ARRAY_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VAR ::= CONST_AUX TIPO Identificador ARRAY_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARRAY_AUX ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARRAY_AUX ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_VAR_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 this.parser.addError("If error in line" , ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 this.parser.addError("While error in line  e left "  +eleft + "  e right " + eright , ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
