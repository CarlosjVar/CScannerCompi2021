
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\042\006\000\002\042" +
    "\002\000\002\043\004\000\002\043\012\000\002\045\004" +
    "\000\002\045\002\000\002\002\004\000\002\003\012\000" +
    "\002\006\007\000\002\006\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\002\000\002\044\005\000\002" +
    "\033\003\000\002\031\003\000\002\031\002\000\002\007" +
    "\010\000\002\007\002\000\002\054\007\000\002\054\003" +
    "\000\002\055\003\000\002\055\005\000\002\057\003\000" +
    "\002\057\005\000\002\032\004\000\002\032\002\000\002" +
    "\010\011\000\002\010\005\000\002\023\003\000\002\023" +
    "\005\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\011\007\000\002\012\011\000" +
    "\002\013\012\000\002\052\004\000\002\014\011\000\002" +
    "\025\012\000\002\025\011\000\002\026\005\000\002\026" +
    "\004\000\002\026\004\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\037\003\000\002\037\002\000\002\015" +
    "\005\000\002\016\004\000\002\016\002\000\002\040\003" +
    "\000\002\040\002\000\002\035\004\000\002\034\004\000" +
    "\002\034\002\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\004\000\002\046\003\000\002\046\004\000\002\047\003" +
    "\000\002\047\002\000\002\020\004\000\002\050\003\000" +
    "\002\050\004\000\002\051\003\000\002\051\002\000\002" +
    "\053\007\000\002\053\007\000\002\060\012\000\002\061" +
    "\005\000\002\061\002\000\002\062\005\000\002\062\003" +
    "\000\002\063\007\000\002\063\002\000\002\064\005\000" +
    "\002\064\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\014\005\uffff\010\uffff\017\uffff\021\uffff\023" +
    "\uffff\001\002\000\004\002\346\001\002\000\014\005\012" +
    "\010\011\017\013\021\006\023\015\001\002\000\006\005" +
    "\343\021\342\001\002\000\006\030\uffb2\040\uffb2\001\002" +
    "\000\004\002\ufffa\001\002\000\006\030\uffb5\040\uffb5\001" +
    "\002\000\006\030\uffb6\040\uffb6\001\002\000\006\005\336" +
    "\017\335\001\002\000\006\030\020\040\017\001\002\000" +
    "\006\030\uffb4\040\uffb4\001\002\000\006\030\uffb3\040\uffb3" +
    "\001\002\000\004\032\326\001\002\000\010\032\021\041" +
    "\ufffb\043\024\001\002\000\016\005\012\010\011\017\013" +
    "\021\006\023\015\033\uffbf\001\002\000\014\005\000\010" +
    "\000\017\000\021\000\023\000\001\002\000\004\041\042" +
    "\001\002\000\020\030\031\031\027\032\030\042\033\047" +
    "\035\050\026\051\032\001\002\000\022\012\uffc4\033\uffc4" +
    "\035\uffc4\037\uffc4\041\uffc4\047\uffc4\050\uffc4\051\uffc4\001" +
    "\002\000\032\012\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\035\uffc2\037\uffc2\041\uffc2\042\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\001\002\000\022\012\uffc6\033\uffc6\035\uffc6\037\uffc6" +
    "\041\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000\020\030" +
    "\031\031\027\032\030\042\033\047\035\050\026\051\032" +
    "\001\002\000\022\012\uffc7\033\uffc7\035\uffc7\037\uffc7\041" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\001\002\000\032\012\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\037\uffc1\041" +
    "\uffc1\042\uffc1\047\uffc1\050\uffc1\051\uffc1\001\002\000\022" +
    "\012\uffc5\033\uffc5\035\uffc5\037\uffc5\041\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\001\002\000\012\041\ufffc\047\035\050\026" +
    "\051\032\001\002\000\032\012\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\035\uffc3\037\uffc3\041\uffc3\042\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\001\002\000\020\030\031\031\027\032" +
    "\030\042\033\047\035\050\026\051\032\001\002\000\022" +
    "\012\uffc9\033\uffc9\035\uffc9\037\uffc9\041\uffc9\047\035\050" +
    "\026\051\032\001\002\000\012\033\041\047\035\050\026" +
    "\051\032\001\002\000\022\012\uffc8\033\uffc8\035\uffc8\037" +
    "\uffc8\041\uffc8\047\uffc8\050\uffc8\051\uffc8\001\002\000\014" +
    "\005\ufffe\010\ufffe\017\ufffe\021\ufffe\023\ufffe\001\002\000" +
    "\004\033\uffc0\001\002\000\004\033\052\001\002\000\004" +
    "\030\046\001\002\000\006\012\050\033\uffbc\001\002\000" +
    "\004\033\uffbe\001\002\000\014\005\012\010\011\017\013" +
    "\021\006\023\015\001\002\000\004\033\uffbd\001\002\000" +
    "\004\036\053\001\002\000\050\004\uffe4\005\uffe6\006\uffe4" +
    "\010\uffe6\011\055\013\uffe4\015\uffe4\016\uffe4\017\uffe6\020" +
    "\uffe4\021\uffe6\022\uffe4\023\uffe6\024\uffe4\025\uffe4\030\uffe4" +
    "\037\uffe4\053\uffe4\054\uffe4\001\002\000\014\005\012\010" +
    "\011\017\013\021\006\023\015\001\002\000\014\005\uffe7" +
    "\010\uffe7\017\uffe7\021\uffe7\023\uffe7\001\002\000\034\004" +
    "\077\006\066\013\057\015\102\016\062\020\100\022\101" +
    "\024\103\025\076\030\070\037\uffea\053\060\054\105\001" +
    "\002\000\004\041\320\001\002\000\004\032\314\001\002" +
    "\000\040\004\077\006\066\007\uffea\013\057\014\uffea\015" +
    "\102\016\062\020\100\022\101\024\103\025\076\030\070" +
    "\037\uffea\053\060\054\105\001\002\000\004\032\260\001" +
    "\002\000\040\004\077\006\066\007\uffea\013\057\014\uffea" +
    "\015\102\016\062\020\100\022\101\024\103\025\076\030" +
    "\070\037\uffea\053\060\054\105\001\002\000\040\004\077" +
    "\006\066\007\uffea\013\057\014\uffea\015\102\016\062\020" +
    "\100\022\101\024\103\025\076\030\070\037\uffea\053\060" +
    "\054\105\001\002\000\004\037\254\001\002\000\004\041" +
    "\252\001\002\000\040\004\ufff7\006\ufff7\007\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\020\ufff7\022\ufff7\024\ufff7\025" +
    "\ufff7\030\ufff7\037\ufff7\053\ufff7\054\ufff7\001\002\000\012" +
    "\032\226\034\227\041\uffdc\043\230\001\002\000\042\004" +
    "\077\006\066\007\uffea\013\057\014\uffea\015\102\016\062" +
    "\020\100\022\101\024\103\025\076\026\220\030\070\037" +
    "\uffea\053\060\054\105\001\002\000\040\004\077\006\066" +
    "\007\uffea\013\057\014\uffea\015\102\016\062\020\100\022" +
    "\101\024\103\025\076\030\070\037\uffea\053\060\054\105" +
    "\001\002\000\040\004\077\006\066\007\uffea\013\057\014" +
    "\uffea\015\102\016\062\020\100\022\101\024\103\025\076" +
    "\030\070\037\uffea\053\060\054\105\001\002\000\040\004" +
    "\077\006\066\007\uffea\013\057\014\uffea\015\102\016\062" +
    "\020\100\022\101\024\103\025\076\030\070\037\uffea\053" +
    "\060\054\105\001\002\000\004\041\213\001\002\000\006" +
    "\003\204\032\203\001\002\000\040\004\077\006\066\007" +
    "\uffea\013\057\014\uffea\015\102\016\062\020\100\022\101" +
    "\024\103\025\076\030\070\037\uffea\053\060\054\105\001" +
    "\002\000\004\041\200\001\002\000\004\032\146\001\002" +
    "\000\004\036\137\001\002\000\004\032\121\001\002\000" +
    "\040\004\077\006\066\007\uffea\013\057\014\uffea\015\102" +
    "\016\062\020\100\022\101\024\103\025\076\030\070\037" +
    "\uffea\053\060\054\105\001\002\000\004\032\106\001\002" +
    "\000\006\030\110\033\uffba\001\002\000\004\033\115\001" +
    "\002\000\006\012\113\033\uffb7\001\002\000\004\033\uffbb" +
    "\001\002\000\004\033\uffb9\001\002\000\004\030\110\001" +
    "\002\000\004\033\uffb8\001\002\000\004\041\116\001\002" +
    "\000\040\004\uffa7\006\uffa7\007\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\020\uffa7\022\uffa7\024\uffa7\025\uffa7\030\uffa7" +
    "\037\uffa7\053\uffa7\054\uffa7\001\002\000\010\007\ufff2\014" +
    "\ufff2\037\ufff2\001\002\000\010\007\uffe8\014\uffe8\037\uffe8" +
    "\001\002\000\020\030\122\031\027\032\030\042\033\047" +
    "\035\050\026\051\032\001\002\000\024\027\131\033\uffc7" +
    "\041\uffc7\044\135\045\133\046\132\047\uffc7\050\uffc7\051" +
    "\uffc7\001\002\000\004\033\125\001\002\000\014\033\uffd9" +
    "\041\uffd9\047\035\050\026\051\032\001\002\000\004\036" +
    "\126\001\002\000\034\004\077\006\066\013\057\015\102" +
    "\016\062\020\100\022\101\024\103\025\076\030\070\037" +
    "\uffea\053\060\054\105\001\002\000\004\037\130\001\002" +
    "\000\040\004\uffd2\006\uffd2\007\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\020\uffd2\022\uffd2\024\uffd2\025\uffd2\030\uffd2" +
    "\037\uffd2\053\uffd2\054\uffd2\001\002\000\020\030\uffd7\031" +
    "\uffd7\032\uffd7\042\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002" +
    "\000\020\030\uffd4\031\uffd4\032\uffd4\042\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\001\002\000\020\030\uffd6\031\uffd6\032\uffd6" +
    "\042\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002\000\020\030" +
    "\031\031\027\032\030\042\033\047\035\050\026\051\032" +
    "\001\002\000\020\030\uffd5\031\uffd5\032\uffd5\042\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\001\002\000\014\033\uffd8\041\uffd8" +
    "\047\035\050\026\051\032\001\002\000\034\004\077\006" +
    "\066\013\057\015\102\016\062\020\100\022\101\024\103" +
    "\025\076\030\070\037\uffea\053\060\054\105\001\002\000" +
    "\004\037\141\001\002\000\004\024\142\001\002\000\004" +
    "\032\143\001\002\000\020\030\122\031\027\032\030\042" +
    "\033\047\035\050\026\051\032\001\002\000\004\033\145" +
    "\001\002\000\004\041\uffd1\001\002\000\006\030\150\031" +
    "\147\001\002\000\004\033\uff9c\001\002\000\006\033\uff9b" +
    "\043\176\001\002\000\004\033\152\001\002\000\004\036" +
    "\153\001\002\000\010\007\uff9f\014\uff9f\037\uff9f\001\002" +
    "\000\010\007\155\014\156\037\uffa3\001\002\000\004\031" +
    "\167\001\002\000\004\055\161\001\002\000\004\037\160" +
    "\001\002\000\040\004\uffa5\006\uffa5\007\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\020\uffa5\022\uffa5\024\uffa5\025\uffa5" +
    "\030\uffa5\037\uffa5\053\uffa5\054\uffa5\001\002\000\036\004" +
    "\077\006\066\013\057\015\102\016\062\020\100\022\101" +
    "\024\103\025\076\030\070\036\164\037\uffea\053\060\054" +
    "\105\001\002\000\004\037\uffa4\001\002\000\004\037\uffa1" +
    "\001\002\000\034\004\077\006\066\013\057\015\102\016" +
    "\062\020\100\022\101\024\103\025\076\030\070\037\uffea" +
    "\053\060\054\105\001\002\000\004\037\166\001\002\000" +
    "\004\037\uffa2\001\002\000\004\055\170\001\002\000\042" +
    "\004\077\006\066\007\uffea\013\057\014\uffea\015\102\016" +
    "\062\020\100\022\101\024\103\025\076\030\070\036\172" +
    "\037\uffea\053\060\054\105\001\002\000\010\007\uff9d\014" +
    "\uff9d\037\uff9d\001\002\000\034\004\077\006\066\013\057" +
    "\015\102\016\062\020\100\022\101\024\103\025\076\030" +
    "\070\037\uffea\053\060\054\105\001\002\000\010\007\uffa0" +
    "\014\uffa0\037\uffa0\001\002\000\004\037\175\001\002\000" +
    "\010\007\uff9e\014\uff9e\037\uff9e\001\002\000\004\031\177" +
    "\001\002\000\004\033\uff9a\001\002\000\040\004\077\006" +
    "\066\007\uffea\013\057\014\uffea\015\102\016\062\020\100" +
    "\022\101\024\103\025\076\030\070\037\uffea\053\060\054" +
    "\105\001\002\000\010\007\uffed\014\uffed\037\uffed\001\002" +
    "\000\010\007\uffeb\014\uffeb\037\uffeb\001\002\000\020\030" +
    "\122\031\027\032\030\042\033\047\035\050\026\051\032" +
    "\001\002\000\004\037\205\001\002\000\042\004\uffda\006" +
    "\uffda\007\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda" +
    "\022\uffda\024\uffda\025\uffda\026\uffda\030\uffda\037\uffda\053" +
    "\uffda\054\uffda\001\002\000\004\033\207\001\002\000\004" +
    "\036\210\001\002\000\034\004\077\006\066\013\057\015" +
    "\102\016\062\020\100\022\101\024\103\025\076\030\070" +
    "\037\uffea\053\060\054\105\001\002\000\004\037\212\001" +
    "\002\000\042\004\uffdb\006\uffdb\007\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\020\uffdb\022\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\037\uffdb\053\uffdb\054\uffdb\001\002\000\040" +
    "\004\077\006\066\007\uffea\013\057\014\uffea\015\102\016" +
    "\062\020\100\022\101\024\103\025\076\030\070\037\uffea" +
    "\053\060\054\105\001\002\000\010\007\ufff3\014\ufff3\037" +
    "\ufff3\001\002\000\010\007\ufff1\014\ufff1\037\ufff1\001\002" +
    "\000\010\007\ufff5\014\ufff5\037\ufff5\001\002\000\010\007" +
    "\ufff0\014\ufff0\037\ufff0\001\002\000\004\036\222\001\002" +
    "\000\010\007\ufff6\014\ufff6\037\ufff6\001\002\000\034\004" +
    "\077\006\066\013\057\015\102\016\062\020\100\022\101" +
    "\024\103\025\076\030\070\037\uffea\053\060\054\105\001" +
    "\002\000\004\037\224\001\002\000\040\004\uffd3\006\uffd3" +
    "\007\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\022" +
    "\uffd3\024\uffd3\025\uffd3\030\uffd3\037\uffd3\053\uffd3\054\uffd3" +
    "\001\002\000\004\041\uffe2\001\002\000\006\030\110\033" +
    "\uffba\001\002\000\020\030\031\031\027\032\030\042\033" +
    "\047\035\050\026\051\032\001\002\000\020\030\031\031" +
    "\027\032\030\042\033\047\035\050\026\051\032\001\002" +
    "\000\004\041\232\001\002\000\040\004\uffe9\006\uffe9\007" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\022\uffe9" +
    "\024\uffe9\025\uffe9\030\uffe9\037\uffe9\053\uffe9\054\uffe9\001" +
    "\002\000\012\041\uffdd\047\035\050\026\051\032\001\002" +
    "\000\012\035\235\047\035\050\026\051\032\001\002\000" +
    "\004\043\236\001\002\000\022\030\031\031\027\032\030" +
    "\036\240\042\033\047\035\050\026\051\032\001\002\000" +
    "\004\041\uffe3\001\002\000\020\030\031\031\027\032\030" +
    "\042\033\047\035\050\026\051\032\001\002\000\012\041" +
    "\uffe1\047\035\050\026\051\032\001\002\000\004\037\246" +
    "\001\002\000\014\012\244\037\uffdf\047\035\050\026\051" +
    "\032\001\002\000\020\030\031\031\027\032\030\042\033" +
    "\047\035\050\026\051\032\001\002\000\004\037\uffde\001" +
    "\002\000\004\041\uffe0\001\002\000\004\033\250\001\002" +
    "\000\004\041\251\001\002\000\040\004\ufff8\006\ufff8\007" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\022\ufff8" +
    "\024\ufff8\025\ufff8\030\ufff8\037\ufff8\053\ufff8\054\ufff8\001" +
    "\002\000\040\004\077\006\066\007\uffea\013\057\014\uffea" +
    "\015\102\016\062\020\100\022\101\024\103\025\076\030" +
    "\070\037\uffea\053\060\054\105\001\002\000\010\007\uffec" +
    "\014\uffec\037\uffec\001\002\000\004\041\255\001\002\000" +
    "\014\005\ufffd\010\ufffd\017\ufffd\021\ufffd\023\ufffd\001\002" +
    "\000\010\007\uffef\014\uffef\037\uffef\001\002\000\010\007" +
    "\ufff4\014\ufff4\037\ufff4\001\002\000\016\005\012\010\011" +
    "\017\013\021\006\023\015\030\262\001\002\000\004\033" +
    "\307\001\002\000\004\043\301\001\002\000\004\030\264" +
    "\001\002\000\004\043\265\001\002\000\020\030\031\031" +
    "\027\032\030\042\033\047\035\050\026\051\032\001\002" +
    "\000\012\041\267\047\035\050\026\051\032\001\002\000" +
    "\020\030\122\031\027\032\030\042\033\047\035\050\026" +
    "\051\032\001\002\000\004\041\271\001\002\000\006\030" +
    "\274\052\272\001\002\000\004\030\300\001\002\000\004" +
    "\033\uffce\001\002\000\006\043\276\052\275\001\002\000" +
    "\004\033\uffcb\001\002\000\004\042\277\001\002\000\004" +
    "\033\uffcc\001\002\000\004\033\uffca\001\002\000\020\030" +
    "\031\031\027\032\030\042\033\047\035\050\026\051\032" +
    "\001\002\000\012\041\303\047\035\050\026\051\032\001" +
    "\002\000\020\030\122\031\027\032\030\042\033\047\035" +
    "\050\026\051\032\001\002\000\004\041\305\001\002\000" +
    "\006\030\274\052\272\001\002\000\004\033\uffcd\001\002" +
    "\000\004\036\310\001\002\000\034\004\077\006\066\013" +
    "\057\015\102\016\062\020\100\022\101\024\103\025\076" +
    "\030\070\037\uffea\053\060\054\105\001\002\000\004\037" +
    "\312\001\002\000\040\004\uffcf\006\uffcf\007\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\020\uffcf\022\uffcf\024\uffcf\025" +
    "\uffcf\030\uffcf\037\uffcf\053\uffcf\054\uffcf\001\002\000\010" +
    "\007\uffee\014\uffee\037\uffee\001\002\000\004\030\110\001" +
    "\002\000\004\033\316\001\002\000\004\041\317\001\002" +
    "\000\040\004\uffa6\006\uffa6\007\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\030\uffa6" +
    "\037\uffa6\053\uffa6\054\uffa6\001\002\000\040\004\uffd0\006" +
    "\uffd0\007\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0" +
    "\022\uffd0\024\uffd0\025\uffd0\030\uffd0\037\uffd0\053\uffd0\054" +
    "\uffd0\001\002\000\004\030\322\001\002\000\010\034\227" +
    "\041\uffdc\043\230\001\002\000\004\041\324\001\002\000" +
    "\050\004\uffe4\005\uffe6\006\uffe4\010\uffe6\011\055\013\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe6\020\uffe4\021\uffe6\022\uffe4\023" +
    "\uffe6\024\uffe4\025\uffe4\030\uffe4\037\uffe4\053\uffe4\054\uffe4" +
    "\001\002\000\034\004\uffe5\006\uffe5\013\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\022\uffe5\024\uffe5\025\uffe5\030\uffe5\037\uffe5" +
    "\053\uffe5\054\uffe5\001\002\000\004\033\327\001\002\000" +
    "\004\036\330\001\002\000\050\004\uffe4\005\uffe6\006\uffe4" +
    "\010\uffe6\011\055\013\uffe4\015\uffe4\016\uffe4\017\uffe6\020" +
    "\uffe4\021\uffe6\022\uffe4\023\uffe6\024\uffe4\025\uffe4\030\uffe4" +
    "\037\uffe4\053\uffe4\054\uffe4\001\002\000\034\004\077\006" +
    "\066\013\057\015\102\016\062\020\100\022\101\024\103" +
    "\025\076\030\070\037\uffea\053\060\054\105\001\002\000" +
    "\004\037\333\001\002\000\004\002\ufff9\001\002\000\006" +
    "\030\uffac\040\uffac\001\002\000\010\005\340\030\uffa8\040" +
    "\uffa8\001\002\000\006\030\uffab\040\uffab\001\002\000\006" +
    "\030\uffaa\040\uffaa\001\002\000\006\030\uffa9\040\uffa9\001" +
    "\002\000\006\030\uffb1\040\uffb1\001\002\000\010\005\345" +
    "\030\uffad\040\uffad\001\002\000\006\030\uffb0\040\uffb0\001" +
    "\002\000\006\030\uffaf\040\uffaf\001\002\000\006\030\uffae" +
    "\040\uffae\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\012\003\007\017\013\020\006\021\015\001\001" +
    "\000\004\046\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\021\045\022\001\001" +
    "\000\014\015\042\017\044\020\006\021\015\037\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\033" +
    "\027\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\037\027\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\035\001\001\000\002\001\001\000\006\022\036\027\024" +
    "\001\001\000\004\027\035\001\001\000\004\027\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\046\001" +
    "\001\000\002\001\001\000\012\015\050\017\044\020\006" +
    "\021\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\055\031\053\001\001\000\010\017\320\020\006" +
    "\021\015\001\001\000\002\001\001\000\030\005\064\006" +
    "\071\010\070\011\072\012\062\013\074\014\103\044\063" +
    "\052\060\053\066\060\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\117\006\071\010\070\011\072" +
    "\012\062\013\074\014\103\033\312\044\063\052\060\053" +
    "\066\060\073\001\001\000\002\001\001\000\032\005\117" +
    "\006\071\010\070\011\072\012\062\013\074\014\103\033" +
    "\256\044\063\052\060\053\066\060\073\001\001\000\032" +
    "\005\117\006\071\010\070\011\072\012\062\013\074\014" +
    "\103\033\255\044\063\052\060\053\066\060\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\224\054\230\001\001\000\032\005\117\006\071" +
    "\010\070\011\072\012\062\013\074\014\103\033\220\044" +
    "\063\052\060\053\066\060\073\001\001\000\032\005\117" +
    "\006\071\010\070\011\072\012\062\013\074\014\103\033" +
    "\216\044\063\052\060\053\066\060\073\001\001\000\032" +
    "\005\117\006\071\010\070\011\072\012\062\013\074\014" +
    "\103\033\215\044\063\052\060\053\066\060\073\001\001" +
    "\000\032\005\117\006\071\010\070\011\072\012\062\013" +
    "\074\014\103\033\214\044\063\052\060\053\066\060\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\201\006\071\010\070\011\072\012\062\013\074\014\103" +
    "\044\063\052\060\053\066\060\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\117\006\071\010\070\011\072\012\062\013" +
    "\074\014\103\033\116\044\063\052\060\053\066\060\073" +
    "\001\001\000\002\001\001\000\006\035\110\040\106\001" +
    "\001\000\002\001\001\000\004\034\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\123\023\122\027" +
    "\024\001\001\000\004\030\133\001\001\000\002\001\001" +
    "\000\004\027\035\001\001\000\002\001\001\000\030\005" +
    "\126\006\071\010\070\011\072\012\062\013\074\014\103" +
    "\044\063\052\060\053\066\060\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\135\027\024\001\001\000" +
    "\002\001\001\000\004\027\035\001\001\000\030\005\137" +
    "\006\071\010\070\011\072\012\062\013\074\014\103\044" +
    "\063\052\060\053\066\060\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\123\023" +
    "\143\027\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\153" +
    "\001\001\000\004\061\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\162\006\071\010\070\011\072\012\062\013\074\014" +
    "\103\044\063\052\060\053\066\060\073\062\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\164\006" +
    "\071\010\070\011\072\012\062\013\074\014\103\044\063" +
    "\052\060\053\066\060\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\170\006\071" +
    "\010\070\011\072\012\062\013\074\014\103\044\063\052" +
    "\060\053\066\060\073\064\172\001\001\000\002\001\001" +
    "\000\030\005\173\006\071\010\070\011\072\012\062\013" +
    "\074\014\103\044\063\052\060\053\066\060\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\117\006\071" +
    "\010\070\011\072\012\062\013\074\014\103\033\200\044" +
    "\063\052\060\053\066\060\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\123\023\205\027\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\210\006\071\010\070\011" +
    "\072\012\062\013\074\014\103\044\063\052\060\053\066" +
    "\060\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\117\006\071\010\070\011\072\012\062\013\074" +
    "\014\103\033\213\044\063\052\060\053\066\060\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\222\006\071\010\070\011\072\012\062\013\074" +
    "\014\103\044\063\052\060\053\066\060\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\110\040\246\001\001\000\006\022\233\027\024\001" +
    "\001\000\006\022\232\027\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\035\001\001\000\004\027" +
    "\035\001\001\000\002\001\001\000\010\022\240\027\024" +
    "\055\236\001\001\000\002\001\001\000\010\022\242\027" +
    "\024\057\241\001\001\000\004\027\035\001\001\000\002" +
    "\001\001\000\004\027\035\001\001\000\010\022\242\027" +
    "\024\057\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\117\006\071\010\070\011\072\012\062\013\074" +
    "\014\103\033\252\044\063\052\060\053\066\060\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\262\020" +
    "\006\021\015\025\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\265\027\024\001\001\000\004\027\035\001\001\000\010" +
    "\022\123\023\267\027\024\001\001\000\002\001\001\000" +
    "\004\026\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\301\027\024" +
    "\001\001\000\004\027\035\001\001\000\010\022\123\023" +
    "\303\027\024\001\001\000\002\001\001\000\004\026\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\310\006\071\010\070\011\072\012\062\013\074\014\103" +
    "\044\063\052\060\053\066\060\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\224" +
    "\054\322\001\001\000\002\001\001\000\006\007\324\031" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\330\031\053\001\001\000\030\005" +
    "\331\006\071\010\070\011\072\012\062\013\074\014\103" +
    "\044\063\052\060\053\066\060\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();

    public void addError(String error,Symbol token){
            this.errores.add(error + token.right+1);
    }



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()) ,RESULT  );
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES_AUX ::= DECLARACIONES_INICIALES_AUX_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES_AUX_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX_AUX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION_VAR ::= Identificador ARRAY_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VAR ::= CONST_AUX TIPO Identificador ARRAY_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARRAY_AUX ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARRAY_AUX ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_VAR_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= If error Llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   System.out.println("Error en if") ; this.parser.addError("If error in line" , (Symbol) e );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
