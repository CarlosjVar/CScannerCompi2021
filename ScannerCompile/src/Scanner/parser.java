
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\042\010\000\002\042" +
    "\006\000\002\042\010\000\002\042\006\000\002\042\002" +
    "\000\002\043\003\000\002\043\011\000\002\043\006\000" +
    "\002\043\007\000\002\043\002\000\002\002\004\000\002" +
    "\003\012\000\002\003\010\000\002\003\002\000\002\006" +
    "\007\000\002\006\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\044\006" +
    "\000\002\044\006\000\002\033\003\000\002\031\003\000" +
    "\002\031\002\000\002\007\010\000\002\007\007\000\002" +
    "\007\002\000\002\054\005\000\002\054\004\000\002\054" +
    "\003\000\002\054\002\000\002\066\007\000\002\066\006" +
    "\000\002\066\003\000\002\032\004\000\002\032\004\000" +
    "\002\055\003\000\002\055\005\000\002\057\003\000\002" +
    "\057\005\000\002\010\011\000\002\010\011\000\002\010" +
    "\007\000\002\023\003\000\002\023\005\000\002\023\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\011\007\000\002\011\007\000\002" +
    "\012\011\000\002\012\011\000\002\013\012\000\002\013" +
    "\012\000\002\052\004\000\002\014\011\000\002\014\011" +
    "\000\002\014\011\000\002\025\012\000\002\025\011\000" +
    "\002\025\007\000\002\026\005\000\002\026\004\000\002" +
    "\026\004\000\002\026\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\037\003\000\002\037\002\000\002" +
    "\015\005\000\002\016\004\000\002\016\002\000\002\040" +
    "\003\000\002\040\002\000\002\035\004\000\002\034\004" +
    "\000\002\034\002\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\021\004\000\002\046\003\000\002\046\004\000\002\047" +
    "\003\000\002\047\002\000\002\020\004\000\002\050\003" +
    "\000\002\050\004\000\002\051\003\000\002\051\002\000" +
    "\002\053\007\000\002\053\007\000\002\060\012\000\002" +
    "\061\005\000\002\061\005\000\002\061\002\000\002\062" +
    "\005\000\002\062\003\000\002\063\007\000\002\063\006" +
    "\000\002\063\002\000\002\064\005\000\002\064\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\020\002\ufffc\005\ufffc\010\ufffc\011\ufffc\017" +
    "\ufffc\021\ufffc\023\ufffc\001\002\000\004\002\u0127\001\002" +
    "\000\020\002\ufff3\005\013\010\012\011\007\017\014\021" +
    "\006\023\016\001\002\000\006\005\u0124\021\u0123\001\002" +
    "\000\014\005\013\010\012\017\014\021\006\023\016\001" +
    "\002\000\010\003\uff9b\030\uff9b\040\uff9b\001\002\000\004" +
    "\002\ufff6\001\002\000\010\003\uff9e\030\uff9e\040\uff9e\001" +
    "\002\000\010\003\uff9f\030\uff9f\040\uff9f\001\002\000\006" +
    "\005\u0118\017\u0117\001\002\000\010\003\020\030\022\040" +
    "\021\001\002\000\010\003\uff9d\030\uff9d\040\uff9d\001\002" +
    "\000\010\003\uff9c\030\uff9c\040\uff9c\001\002\000\026\002" +
    "\ufff7\003\026\005\ufff7\010\ufff7\011\ufff7\017\ufff7\021\ufff7" +
    "\023\ufff7\032\024\041\025\001\002\000\004\032\u010d\001" +
    "\002\000\026\002\ufff7\003\026\005\ufff7\010\ufff7\011\ufff7" +
    "\017\ufff7\021\ufff7\023\ufff7\032\024\041\025\001\002\000" +
    "\020\002\uffff\005\uffff\010\uffff\011\uffff\017\uffff\021\uffff" +
    "\023\uffff\001\002\000\016\005\013\010\012\017\014\021" +
    "\006\023\016\033\uffa8\001\002\000\020\002\ufffb\005\ufffb" +
    "\010\ufffb\011\ufffb\017\ufffb\021\ufffb\023\ufffb\001\002\000" +
    "\004\036\027\001\002\000\052\003\uffdb\004\uffdb\005\013" +
    "\006\uffdb\010\012\011\030\013\uffdb\015\uffdb\016\uffdb\017" +
    "\014\020\uffdb\021\006\022\uffdb\023\016\024\uffdb\025\uffdb" +
    "\030\uffdb\037\uffdb\053\uffdb\054\uffdb\001\002\000\014\005" +
    "\013\010\012\017\014\021\006\023\016\001\002\000\036" +
    "\003\102\004\100\006\067\013\060\015\104\016\063\020" +
    "\101\022\103\024\105\025\077\030\071\037\uffe3\053\062" +
    "\054\107\001\002\000\004\030\033\001\002\000\010\003" +
    "\034\034\035\041\uffd7\001\002\000\004\041\uffd8\001\002" +
    "\000\022\030\046\031\043\032\045\035\044\042\050\047" +
    "\052\050\042\051\047\001\002\000\004\041\037\001\002" +
    "\000\052\003\uffdb\004\uffdb\005\013\006\uffdb\010\012\011" +
    "\030\013\uffdb\015\uffdb\016\uffdb\017\014\020\uffdb\021\006" +
    "\022\uffdb\023\016\024\uffdb\025\uffdb\030\uffdb\037\uffdb\053" +
    "\uffdb\054\uffdb\001\002\000\036\003\uffdc\004\uffdc\006\uffdc" +
    "\013\uffdc\015\uffdc\016\uffdc\020\uffdc\022\uffdc\024\uffdc\025" +
    "\uffdc\030\uffdc\037\uffdc\053\uffdc\054\uffdc\001\002\000\022" +
    "\012\uffad\033\uffad\035\uffad\037\uffad\041\uffad\047\uffad\050" +
    "\uffad\051\uffad\001\002\000\032\012\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\035\uffab\037\uffab\041\uffab\042\uffab\047" +
    "\uffab\050\uffab\051\uffab\001\002\000\022\012\uffaf\033\uffaf" +
    "\035\uffaf\037\uffaf\041\uffaf\047\uffaf\050\uffaf\051\uffaf\001" +
    "\002\000\004\041\uffd9\001\002\000\020\030\046\031\043" +
    "\032\045\042\050\047\052\050\042\051\047\001\002\000" +
    "\022\012\uffb0\033\uffb0\035\uffb0\037\uffb0\041\uffb0\047\uffb0" +
    "\050\uffb0\051\uffb0\001\002\000\032\012\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\035\uffaa\037\uffaa\041\uffaa\042\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\001\002\000\022\012\uffae\033" +
    "\uffae\035\uffae\037\uffae\041\uffae\047\uffae\050\uffae\051\uffae" +
    "\001\002\000\012\035\053\047\052\050\042\051\047\001" +
    "\002\000\032\012\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\035\uffac\037\uffac\041\uffac\042\uffac\047\uffac\050\uffac\051" +
    "\uffac\001\002\000\004\041\uffda\001\002\000\020\030\046" +
    "\031\043\032\045\042\050\047\052\050\042\051\047\001" +
    "\002\000\022\012\uffb2\033\uffb2\035\uffb2\037\uffb2\041\uffb2" +
    "\047\052\050\042\051\047\001\002\000\012\033\057\047" +
    "\052\050\042\051\047\001\002\000\022\012\uffb1\033\uffb1" +
    "\035\uffb1\037\uffb1\041\uffb1\047\uffb1\050\uffb1\051\uffb1\001" +
    "\002\000\004\041\356\001\002\000\042\003\102\004\100" +
    "\006\067\007\uffe3\013\060\014\uffe3\015\104\016\063\020" +
    "\101\022\103\024\105\025\077\030\071\037\uffe3\053\062" +
    "\054\107\001\002\000\004\032\351\001\002\000\004\032" +
    "\301\001\002\000\042\003\102\004\100\006\067\007\uffe3" +
    "\013\060\014\uffe3\015\104\016\063\020\101\022\103\024" +
    "\105\025\077\030\071\037\uffe3\053\062\054\107\001\002" +
    "\000\042\003\102\004\100\006\067\007\uffe3\013\060\014" +
    "\uffe3\015\104\016\063\020\101\022\103\024\105\025\077" +
    "\030\071\037\uffe3\053\062\054\107\001\002\000\004\037" +
    "\276\001\002\000\004\041\274\001\002\000\042\003\ufff1" +
    "\004\ufff1\006\ufff1\007\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\020\ufff1\022\ufff1\024\ufff1\025\ufff1\030\ufff1\037\ufff1" +
    "\053\ufff1\054\ufff1\001\002\000\006\032\254\043\255\001" +
    "\002\000\044\003\245\004\100\006\067\007\uffe3\013\060" +
    "\014\uffe3\015\104\016\063\020\101\022\103\024\105\025" +
    "\077\026\243\030\071\037\uffe3\053\062\054\107\001\002" +
    "\000\042\003\102\004\100\006\067\007\uffe3\013\060\014" +
    "\uffe3\015\104\016\063\020\101\022\103\024\105\025\077" +
    "\030\071\037\uffe3\053\062\054\107\001\002\000\042\003" +
    "\102\004\100\006\067\007\uffe3\013\060\014\uffe3\015\104" +
    "\016\063\020\101\022\103\024\105\025\077\030\071\037" +
    "\uffe3\053\062\054\107\001\002\000\042\003\102\004\100" +
    "\006\067\007\uffe3\013\060\014\uffe3\015\104\016\063\020" +
    "\101\022\103\024\105\025\077\030\071\037\uffe3\053\062" +
    "\054\107\001\002\000\004\041\236\001\002\000\004\032" +
    "\222\001\002\000\042\003\102\004\100\006\067\007\uffe3" +
    "\013\060\014\uffe3\015\104\016\063\020\101\022\103\024" +
    "\105\025\077\030\071\037\uffe3\053\062\054\107\001\002" +
    "\000\004\041\217\001\002\000\042\003\102\004\100\006" +
    "\067\007\uffe3\013\060\014\uffe3\015\104\016\063\020\101" +
    "\022\103\024\105\025\077\030\071\037\uffe3\053\062\054" +
    "\107\001\002\000\004\032\160\001\002\000\004\036\147" +
    "\001\002\000\004\032\123\001\002\000\042\003\102\004" +
    "\100\006\067\007\uffe3\013\060\014\uffe3\015\104\016\063" +
    "\020\101\022\103\024\105\025\077\030\071\037\uffe3\053" +
    "\062\054\107\001\002\000\004\032\110\001\002\000\006" +
    "\030\112\033\uffa3\001\002\000\004\033\117\001\002\000" +
    "\006\012\115\033\uffa0\001\002\000\004\033\uffa4\001\002" +
    "\000\004\033\uffa2\001\002\000\004\030\112\001\002\000" +
    "\004\033\uffa1\001\002\000\004\041\120\001\002\000\042" +
    "\003\uff90\004\uff90\006\uff90\007\uff90\013\uff90\014\uff90\015" +
    "\uff90\016\uff90\020\uff90\022\uff90\024\uff90\025\uff90\030\uff90" +
    "\037\uff90\053\uff90\054\uff90\001\002\000\010\007\uffec\014" +
    "\uffec\037\uffec\001\002\000\010\007\uffe0\014\uffe0\037\uffe0" +
    "\001\002\000\022\003\125\030\124\031\043\032\045\042" +
    "\050\047\052\050\042\051\047\001\002\000\024\027\140" +
    "\033\uffb0\041\uffb0\044\144\045\142\046\141\047\uffb0\050" +
    "\uffb0\051\uffb0\001\002\000\004\033\134\001\002\000\004" +
    "\033\130\001\002\000\014\033\uffca\041\uffca\047\052\050" +
    "\042\051\047\001\002\000\004\036\131\001\002\000\036" +
    "\003\102\004\100\006\067\013\060\015\104\016\063\020" +
    "\101\022\103\024\105\025\077\030\071\037\uffe3\053\062" +
    "\054\107\001\002\000\004\037\133\001\002\000\042\003" +
    "\uffc1\004\uffc1\006\uffc1\007\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\020\uffc1\022\uffc1\024\uffc1\025\uffc1\030\uffc1\037" +
    "\uffc1\053\uffc1\054\uffc1\001\002\000\004\036\135\001\002" +
    "\000\036\003\102\004\100\006\067\013\060\015\104\016" +
    "\063\020\101\022\103\024\105\025\077\030\071\037\uffe3" +
    "\053\062\054\107\001\002\000\004\037\137\001\002\000" +
    "\042\003\uffc0\004\uffc0\006\uffc0\007\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\020\uffc0\022\uffc0\024\uffc0\025\uffc0\030" +
    "\uffc0\037\uffc0\053\uffc0\054\uffc0\001\002\000\022\003\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\042\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\001\002\000\022\003\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\042\uffc4\047\uffc4\050\uffc4\051\uffc4\001\002\000\022\003" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\042\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\001\002\000\022\003\145\030\046\031\043\032" +
    "\045\042\050\047\052\050\042\051\047\001\002\000\022" +
    "\003\uffc5\030\uffc5\031\uffc5\032\uffc5\042\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\001\002\000\006\033\uffc8\041\uffc8\001\002" +
    "\000\014\033\uffc9\041\uffc9\047\052\050\042\051\047\001" +
    "\002\000\036\003\102\004\100\006\067\013\060\015\104" +
    "\016\063\020\101\022\103\024\105\025\077\030\071\037" +
    "\uffe3\053\062\054\107\001\002\000\004\037\151\001\002" +
    "\000\004\024\152\001\002\000\004\032\153\001\002\000" +
    "\022\003\154\030\124\031\043\032\045\042\050\047\052" +
    "\050\042\051\047\001\002\000\004\033\157\001\002\000" +
    "\004\033\156\001\002\000\004\041\uffbf\001\002\000\004" +
    "\041\uffbe\001\002\000\006\030\162\031\161\001\002\000" +
    "\004\033\uff83\001\002\000\006\033\uff82\043\214\001\002" +
    "\000\004\033\164\001\002\000\004\036\165\001\002\000" +
    "\010\007\uff86\014\uff86\037\uff86\001\002\000\010\007\167" +
    "\014\170\037\uff8b\001\002\000\006\003\204\031\203\001" +
    "\002\000\006\003\173\055\174\001\002\000\004\037\172" +
    "\001\002\000\042\003\uff8e\004\uff8e\006\uff8e\007\uff8e\013" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e\022\uff8e\024\uff8e" +
    "\025\uff8e\030\uff8e\037\uff8e\053\uff8e\054\uff8e\001\002\000" +
    "\040\003\102\004\100\006\067\013\060\015\104\016\063" +
    "\020\101\022\103\024\105\025\077\030\071\036\177\037" +
    "\uffe3\053\062\054\107\001\002\000\040\003\102\004\100" +
    "\006\067\013\060\015\104\016\063\020\101\022\103\024" +
    "\105\025\077\030\071\036\177\037\uffe3\053\062\054\107" +
    "\001\002\000\004\037\uff8d\001\002\000\004\037\uff89\001" +
    "\002\000\036\003\102\004\100\006\067\013\060\015\104" +
    "\016\063\020\101\022\103\024\105\025\077\030\071\037" +
    "\uffe3\053\062\054\107\001\002\000\004\037\201\001\002" +
    "\000\004\037\uff8a\001\002\000\004\037\uff8c\001\002\000" +
    "\004\055\212\001\002\000\044\003\102\004\100\006\067" +
    "\007\uffe3\013\060\014\uffe3\015\104\016\063\020\101\022" +
    "\103\024\105\025\077\030\071\036\206\037\uffe3\053\062" +
    "\054\107\001\002\000\010\007\uff84\014\uff84\037\uff84\001" +
    "\002\000\036\003\102\004\100\006\067\013\060\015\104" +
    "\016\063\020\101\022\103\024\105\025\077\030\071\037" +
    "\uffe3\053\062\054\107\001\002\000\010\007\uff87\014\uff87" +
    "\037\uff87\001\002\000\004\037\211\001\002\000\010\007" +
    "\uff85\014\uff85\037\uff85\001\002\000\044\003\102\004\100" +
    "\006\067\007\uffe3\013\060\014\uffe3\015\104\016\063\020" +
    "\101\022\103\024\105\025\077\030\071\036\206\037\uffe3" +
    "\053\062\054\107\001\002\000\010\007\uff88\014\uff88\037" +
    "\uff88\001\002\000\004\031\215\001\002\000\004\033\uff81" +
    "\001\002\000\010\007\uffe4\014\uffe4\037\uffe4\001\002\000" +
    "\042\003\102\004\100\006\067\007\uffe3\013\060\014\uffe3" +
    "\015\104\016\063\020\101\022\103\024\105\025\077\030" +
    "\071\037\uffe3\053\062\054\107\001\002\000\010\007\uffe7" +
    "\014\uffe7\037\uffe7\001\002\000\010\007\uffe5\014\uffe5\037" +
    "\uffe5\001\002\000\022\003\223\030\124\031\043\032\045" +
    "\042\050\047\052\050\042\051\047\001\002\000\004\033" +
    "\232\001\002\000\004\033\225\001\002\000\006\003\227" +
    "\036\226\001\002\000\036\003\102\004\100\006\067\013" +
    "\060\015\104\016\063\020\101\022\103\024\105\025\077" +
    "\030\071\037\uffe3\053\062\054\107\001\002\000\044\003" +
    "\uffcb\004\uffcb\006\uffcb\007\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\030" +
    "\uffcb\037\uffcb\053\uffcb\054\uffcb\001\002\000\004\037\231" +
    "\001\002\000\044\003\uffcd\004\uffcd\006\uffcd\007\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\022\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\030\uffcd\037\uffcd\053\uffcd\054\uffcd\001" +
    "\002\000\004\036\233\001\002\000\036\003\102\004\100" +
    "\006\067\013\060\015\104\016\063\020\101\022\103\024" +
    "\105\025\077\030\071\037\uffe3\053\062\054\107\001\002" +
    "\000\004\037\235\001\002\000\044\003\uffcc\004\uffcc\006" +
    "\uffcc\007\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc" +
    "\022\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\037\uffcc\053" +
    "\uffcc\054\uffcc\001\002\000\042\003\102\004\100\006\067" +
    "\007\uffe3\013\060\014\uffe3\015\104\016\063\020\101\022" +
    "\103\024\105\025\077\030\071\037\uffe3\053\062\054\107" +
    "\001\002\000\010\007\uffed\014\uffed\037\uffed\001\002\000" +
    "\010\007\uffef\014\uffef\037\uffef\001\002\000\010\007\uffeb" +
    "\014\uffeb\037\uffeb\001\002\000\010\007\uffea\014\uffea\037" +
    "\uffea\001\002\000\004\036\251\001\002\000\010\007\ufff0" +
    "\014\ufff0\037\ufff0\001\002\000\044\003\102\004\100\006" +
    "\067\007\uffe3\013\060\014\uffe3\015\104\016\063\020\101" +
    "\022\103\024\105\025\077\030\071\036\246\037\uffe3\053" +
    "\062\054\107\001\002\000\036\003\102\004\100\006\067" +
    "\013\060\015\104\016\063\020\101\022\103\024\105\025" +
    "\077\030\071\037\uffe3\053\062\054\107\001\002\000\004" +
    "\037\250\001\002\000\042\003\uffc2\004\uffc2\006\uffc2\007" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\022\uffc2" +
    "\024\uffc2\025\uffc2\030\uffc2\037\uffc2\053\uffc2\054\uffc2\001" +
    "\002\000\036\003\102\004\100\006\067\013\060\015\104" +
    "\016\063\020\101\022\103\024\105\025\077\030\071\037" +
    "\uffe3\053\062\054\107\001\002\000\004\037\253\001\002" +
    "\000\042\003\uffc3\004\uffc3\006\uffc3\007\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\020\uffc3\022\uffc3\024\uffc3\025\uffc3" +
    "\030\uffc3\037\uffc3\053\uffc3\054\uffc3\001\002\000\006\030" +
    "\112\033\uffa3\001\002\000\024\003\257\030\046\031\043" +
    "\032\045\036\260\042\050\047\052\050\042\051\047\001" +
    "\002\000\004\041\270\001\002\000\004\041\267\001\002" +
    "\000\020\030\046\031\043\032\045\042\050\047\052\050" +
    "\042\051\047\001\002\000\012\041\uffd1\047\052\050\042" +
    "\051\047\001\002\000\004\037\266\001\002\000\014\012" +
    "\264\037\uffcf\047\052\050\042\051\047\001\002\000\020" +
    "\030\046\031\043\032\045\042\050\047\052\050\042\051" +
    "\047\001\002\000\004\037\uffce\001\002\000\004\041\uffd0" +
    "\001\002\000\042\003\uffe1\004\uffe1\006\uffe1\007\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\022\uffe1\024\uffe1" +
    "\025\uffe1\030\uffe1\037\uffe1\053\uffe1\054\uffe1\001\002\000" +
    "\042\003\uffe2\004\uffe2\006\uffe2\007\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\020\uffe2\022\uffe2\024\uffe2\025\uffe2\030" +
    "\uffe2\037\uffe2\053\uffe2\054\uffe2\001\002\000\004\033\272" +
    "\001\002\000\004\041\273\001\002\000\042\003\ufff2\004" +
    "\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\020\ufff2\022\ufff2\024\ufff2\025\ufff2\030\ufff2\037\ufff2\053" +
    "\ufff2\054\ufff2\001\002\000\042\003\102\004\100\006\067" +
    "\007\uffe3\013\060\014\uffe3\015\104\016\063\020\101\022" +
    "\103\024\105\025\077\030\071\037\uffe3\053\062\054\107" +
    "\001\002\000\010\007\uffe6\014\uffe6\037\uffe6\001\002\000" +
    "\020\002\ufff8\005\ufff8\010\ufff8\011\ufff8\017\ufff8\021\ufff8" +
    "\023\ufff8\001\002\000\010\007\uffe9\014\uffe9\037\uffe9\001" +
    "\002\000\010\007\uffee\014\uffee\037\uffee\001\002\000\020" +
    "\003\305\005\013\010\012\017\014\021\006\023\016\030" +
    "\304\001\002\000\004\033\342\001\002\000\004\030\333" +
    "\001\002\000\004\043\325\001\002\000\006\033\307\041" +
    "\306\001\002\000\020\030\124\031\043\032\045\042\050" +
    "\047\052\050\042\051\047\001\002\000\004\036\310\001" +
    "\002\000\036\003\102\004\100\006\067\013\060\015\104" +
    "\016\063\020\101\022\103\024\105\025\077\030\071\037" +
    "\uffe3\053\062\054\107\001\002\000\004\037\312\001\002" +
    "\000\042\003\uffbb\004\uffbb\006\uffbb\007\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb" +
    "\030\uffbb\037\uffbb\053\uffbb\054\uffbb\001\002\000\004\041" +
    "\314\001\002\000\010\003\317\030\320\052\315\001\002" +
    "\000\004\030\324\001\002\000\004\033\uffb7\001\002\000" +
    "\004\033\uffb3\001\002\000\006\043\322\052\321\001\002" +
    "\000\004\033\uffb5\001\002\000\004\042\323\001\002\000" +
    "\004\033\uffb6\001\002\000\004\033\uffb4\001\002\000\020" +
    "\030\046\031\043\032\045\042\050\047\052\050\042\051" +
    "\047\001\002\000\012\041\327\047\052\050\042\051\047" +
    "\001\002\000\020\030\124\031\043\032\045\042\050\047" +
    "\052\050\042\051\047\001\002\000\004\041\331\001\002" +
    "\000\010\003\317\030\320\052\315\001\002\000\004\033" +
    "\uffb8\001\002\000\004\043\334\001\002\000\020\030\046" +
    "\031\043\032\045\042\050\047\052\050\042\051\047\001" +
    "\002\000\012\041\336\047\052\050\042\051\047\001\002" +
    "\000\020\030\124\031\043\032\045\042\050\047\052\050" +
    "\042\051\047\001\002\000\004\041\340\001\002\000\010" +
    "\003\317\030\320\052\315\001\002\000\004\033\uffb9\001" +
    "\002\000\006\003\344\036\343\001\002\000\036\003\102" +
    "\004\100\006\067\013\060\015\104\016\063\020\101\022" +
    "\103\024\105\025\077\030\071\037\uffe3\053\062\054\107" +
    "\001\002\000\036\003\102\004\100\006\067\013\060\015" +
    "\104\016\063\020\101\022\103\024\105\025\077\030\071" +
    "\037\uffe3\053\062\054\107\001\002\000\004\037\346\001" +
    "\002\000\042\003\uffba\004\uffba\006\uffba\007\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\020\uffba\022\uffba\024\uffba\025" +
    "\uffba\030\uffba\037\uffba\053\uffba\054\uffba\001\002\000\004" +
    "\037\350\001\002\000\042\003\uffbc\004\uffbc\006\uffbc\007" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\020\uffbc\022\uffbc" +
    "\024\uffbc\025\uffbc\030\uffbc\037\uffbc\053\uffbc\054\uffbc\001" +
    "\002\000\004\030\112\001\002\000\004\033\353\001\002" +
    "\000\004\041\354\001\002\000\042\003\uff8f\004\uff8f\006" +
    "\uff8f\007\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f" +
    "\022\uff8f\024\uff8f\025\uff8f\030\uff8f\037\uff8f\053\uff8f\054" +
    "\uff8f\001\002\000\010\007\uffe8\014\uffe8\037\uffe8\001\002" +
    "\000\042\003\uffbd\004\uffbd\006\uffbd\007\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\024\uffbd\025\uffbd" +
    "\030\uffbd\037\uffbd\053\uffbd\054\uffbd\001\002\000\004\030" +
    "\360\001\002\000\006\034\362\043\363\001\002\000\004" +
    "\041\uffd4\001\002\000\022\030\046\031\043\032\045\035" +
    "\371\042\050\047\052\050\042\051\047\001\002\000\022" +
    "\003\367\030\046\031\043\032\045\042\050\047\052\050" +
    "\042\051\047\001\002\000\004\041\365\001\002\000\052" +
    "\003\uffdb\004\uffdb\005\013\006\uffdb\010\012\011\030\013" +
    "\uffdb\015\uffdb\016\uffdb\017\014\020\uffdb\021\006\022\uffdb" +
    "\023\016\024\uffdb\025\uffdb\030\uffdb\037\uffdb\053\uffdb\054" +
    "\uffdb\001\002\000\036\003\uffdd\004\uffdd\006\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\020\uffdd\022\uffdd\024\uffdd\025\uffdd\030" +
    "\uffdd\037\uffdd\053\uffdd\054\uffdd\001\002\000\004\041\uffd2" +
    "\001\002\000\012\041\uffd3\047\052\050\042\051\047\001" +
    "\002\000\004\043\376\001\002\000\012\035\373\047\052" +
    "\050\042\051\047\001\002\000\004\043\374\001\002\000" +
    "\022\030\046\031\043\032\045\036\260\042\050\047\052" +
    "\050\042\051\047\001\002\000\004\041\uffd6\001\002\000" +
    "\022\030\046\031\043\032\045\036\260\042\050\047\052" +
    "\050\042\051\047\001\002\000\004\041\uffd5\001\002\000" +
    "\004\033\uffa9\001\002\000\004\033\u0107\001\002\000\004" +
    "\030\u0103\001\002\000\006\012\u0105\033\uffa5\001\002\000" +
    "\004\033\uffa7\001\002\000\014\005\013\010\012\017\014" +
    "\021\006\023\016\001\002\000\004\033\uffa6\001\002\000" +
    "\006\036\u0109\041\u0108\001\002\000\020\002\ufff9\005\ufff9" +
    "\010\ufff9\011\ufff9\017\ufff9\021\ufff9\023\ufff9\001\002\000" +
    "\052\003\uffdb\004\uffdb\005\013\006\uffdb\010\012\011\030" +
    "\013\uffdb\015\uffdb\016\uffdb\017\014\020\uffdb\021\006\022" +
    "\uffdb\023\016\024\uffdb\025\uffdb\030\uffdb\037\uffdb\053\uffdb" +
    "\054\uffdb\001\002\000\036\003\102\004\100\006\067\013" +
    "\060\015\104\016\063\020\101\022\103\024\105\025\077" +
    "\030\071\037\uffe3\053\062\054\107\001\002\000\004\037" +
    "\u010c\001\002\000\020\002\ufffa\005\ufffa\010\ufffa\011\ufffa" +
    "\017\ufffa\021\ufffa\023\ufffa\001\002\000\004\033\u010e\001" +
    "\002\000\006\003\u0110\036\u010f\001\002\000\052\003\uffdb" +
    "\004\uffdb\005\013\006\uffdb\010\012\011\030\013\uffdb\015" +
    "\uffdb\016\uffdb\017\014\020\uffdb\021\006\022\uffdb\023\016" +
    "\024\uffdb\025\uffdb\030\uffdb\037\uffdb\053\uffdb\054\uffdb\001" +
    "\002\000\004\037\u0111\001\002\000\004\002\ufff4\001\002" +
    "\000\036\003\102\004\100\006\067\013\060\015\104\016" +
    "\063\020\101\022\103\024\105\025\077\030\071\037\uffe3" +
    "\053\062\054\107\001\002\000\004\037\u0114\001\002\000" +
    "\004\002\ufff5\001\002\000\020\002\ufffd\005\ufffd\010\ufffd" +
    "\011\ufffd\017\ufffd\021\ufffd\023\ufffd\001\002\000\010\003" +
    "\uff95\030\uff95\040\uff95\001\002\000\012\003\uff91\005\u011a" +
    "\030\uff91\040\uff91\001\002\000\010\003\uff94\030\uff94\040" +
    "\uff94\001\002\000\010\003\uff93\030\uff93\040\uff93\001\002" +
    "\000\010\003\uff92\030\uff92\040\uff92\001\002\000\006\003" +
    "\u011c\030\u011d\001\002\000\006\034\362\043\363\001\002" +
    "\000\006\034\362\043\363\001\002\000\004\041\u011f\001" +
    "\002\000\020\002\000\005\000\010\000\011\000\017\000" +
    "\021\000\023\000\001\002\000\004\041\u0121\001\002\000" +
    "\020\002\ufffe\005\ufffe\010\ufffe\011\ufffe\017\ufffe\021\ufffe" +
    "\023\ufffe\001\002\000\010\003\uff9a\030\uff9a\040\uff9a\001" +
    "\002\000\012\003\uff96\005\u0126\030\uff96\040\uff96\001\002" +
    "\000\010\003\uff99\030\uff99\040\uff99\001\002\000\010\003" +
    "\uff98\030\uff98\040\uff98\001\002\000\010\003\uff97\030\uff97" +
    "\040\uff97\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\012\003\010\017\014\020\007\021\016\001\001" +
    "\000\004\046\u0121\001\001\000\010\017\u011a\020\007\021" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u0115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u0114\001\001\000\002\001\001\000\004\043\022\001" +
    "\001\000\002\001\001\000\014\015\377\017\u0101\020\007" +
    "\021\016\037\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\030\017\031\020\007\021\016\001\001" +
    "\000\010\017\356\020\007\021\016\001\001\000\030\005" +
    "\065\006\072\010\071\011\074\012\063\013\075\014\105" +
    "\044\064\052\060\053\067\060\073\001\001\000\002\001" +
    "\001\000\004\054\035\001\001\000\002\001\001\000\006" +
    "\022\050\027\040\001\001\000\002\001\001\000\012\007" +
    "\037\017\031\020\007\021\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\055\027\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\054\027\040\001\001\000\004\027\053\001\001\000" +
    "\004\027\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\121\006\072\010\071\011\074\012\063\013" +
    "\075\014\105\033\354\044\064\052\060\053\067\060\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\121\006\072\010\071\011\074\012\063\013\075\014\105" +
    "\033\277\044\064\052\060\053\067\060\073\001\001\000" +
    "\032\005\121\006\072\010\071\011\074\012\063\013\075" +
    "\014\105\033\276\044\064\052\060\053\067\060\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\121\006\072\010\071\011" +
    "\074\012\063\013\075\014\105\033\243\044\064\052\060" +
    "\053\067\060\073\001\001\000\032\005\121\006\072\010" +
    "\071\011\074\012\063\013\075\014\105\033\241\044\064" +
    "\052\060\053\067\060\073\001\001\000\032\005\121\006" +
    "\072\010\071\011\074\012\063\013\075\014\105\033\240" +
    "\044\064\052\060\053\067\060\073\001\001\000\032\005" +
    "\121\006\072\010\071\011\074\012\063\013\075\014\105" +
    "\033\237\044\064\052\060\053\067\060\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\220\006\072" +
    "\010\071\011\074\012\063\013\075\014\105\044\064\052" +
    "\060\053\067\060\073\001\001\000\002\001\001\000\032" +
    "\005\121\006\072\010\071\011\074\012\063\013\075\014" +
    "\105\033\215\044\064\052\060\053\067\060\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\121\006\072\010\071\011\074\012\063\013\075" +
    "\014\105\033\120\044\064\052\060\053\067\060\073\001" +
    "\001\000\002\001\001\000\006\035\112\040\110\001\001" +
    "\000\002\001\001\000\004\034\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\126\023\125\027\040" +
    "\001\001\000\004\030\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\053\001\001\000\002\001\001" +
    "\000\030\005\131\006\072\010\071\011\074\012\063\013" +
    "\075\014\105\044\064\052\060\053\067\060\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\135\006\072\010\071\011\074\012\063\013\075" +
    "\014\105\044\064\052\060\053\067\060\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\145\027\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\053" +
    "\001\001\000\030\005\147\006\072\010\071\011\074\012" +
    "\063\013\075\014\105\044\064\052\060\053\067\060\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\126\023\154\027\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\165\001\001\000\004\061\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\175\006\072\010\071\011\074\012\063\013\075" +
    "\014\105\044\064\052\060\053\067\060\073\062\201\001" +
    "\001\000\032\005\175\006\072\010\071\011\074\012\063" +
    "\013\075\014\105\044\064\052\060\053\067\060\073\062" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\177\006\072\010\071\011\074\012\063\013\075\014" +
    "\105\044\064\052\060\053\067\060\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\204\006\072\010\071\011\074\012\063" +
    "\013\075\014\105\044\064\052\060\053\067\060\073\064" +
    "\206\001\001\000\002\001\001\000\030\005\207\006\072" +
    "\010\071\011\074\012\063\013\075\014\105\044\064\052" +
    "\060\053\067\060\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\204\006\072\010" +
    "\071\011\074\012\063\013\075\014\105\044\064\052\060" +
    "\053\067\060\073\064\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\121\006\072\010\071\011\074\012\063\013\075\014" +
    "\105\033\217\044\064\052\060\053\067\060\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\126\023" +
    "\223\027\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\227\006\072\010\071\011" +
    "\074\012\063\013\075\014\105\044\064\052\060\053\067" +
    "\060\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\233\006\072" +
    "\010\071\011\074\012\063\013\075\014\105\044\064\052" +
    "\060\053\067\060\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\121\006\072\010\071\011\074\012" +
    "\063\013\075\014\105\033\236\044\064\052\060\053\067" +
    "\060\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\121\006\072\010\071\011\074\012" +
    "\063\013\075\014\105\033\215\044\064\052\060\053\067" +
    "\060\073\001\001\000\030\005\246\006\072\010\071\011" +
    "\074\012\063\013\075\014\105\044\064\052\060\053\067" +
    "\060\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\251\006\072\010\071\011\074\012\063\013\075" +
    "\014\105\044\064\052\060\053\067\060\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\112\040\270" +
    "\001\001\000\010\022\260\027\040\055\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\262\027\040" +
    "\057\261\001\001\000\004\027\053\001\001\000\002\001" +
    "\001\000\004\027\053\001\001\000\010\022\262\027\040" +
    "\057\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\121\006\072\010" +
    "\071\011\074\012\063\013\075\014\105\033\274\044\064" +
    "\052\060\053\067\060\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\302\020\007\021\016\025\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\126\023\312\027\040\001\001\000\002\001" +
    "\001\000\030\005\310\006\072\010\071\011\074\012\063" +
    "\013\075\014\105\044\064\052\060\053\067\060\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\325\027\040\001\001\000\004\027\053\001\001" +
    "\000\010\022\126\023\327\027\040\001\001\000\002\001" +
    "\001\000\004\026\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\334\027\040\001\001\000\004\027" +
    "\053\001\001\000\010\022\126\023\336\027\040\001\001" +
    "\000\002\001\001\000\004\026\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\346\006\072\010\071" +
    "\011\074\012\063\013\075\014\105\044\064\052\060\053" +
    "\067\060\073\001\001\000\030\005\344\006\072\010\071" +
    "\011\074\012\063\013\075\014\105\044\064\052\060\053" +
    "\067\060\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\360\066\363\001\001\000\002\001\001\000\006" +
    "\022\371\027\040\001\001\000\006\022\367\027\040\001" +
    "\001\000\002\001\001\000\012\007\365\017\031\020\007" +
    "\021\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\053\001\001\000\002\001\001\000\004\027\053" +
    "\001\001\000\002\001\001\000\010\022\260\027\040\055" +
    "\374\001\001\000\002\001\001\000\010\022\260\027\040" +
    "\055\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u0103\001\001" +
    "\000\002\001\001\000\012\015\u0105\017\u0101\020\007\021" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\u0109\017\031\020\007\021\016\001" +
    "\001\000\030\005\u010a\006\072\010\071\011\074\012\063" +
    "\013\075\014\105\044\064\052\060\053\067\060\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\u0111\017\031\020\007\021" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\u0112\006\072\010\071\011\074\012\063\013\075\014" +
    "\105\044\064\052\060\053\067\060\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0118\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\360\066\u011f\001\001\000\006\032\360\066\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();


    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
                XMLElement RESULT;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location EOF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location EOF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object EOF1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("_START",0,(XMLElement)start_val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO Identificador ARRAY_AUX_CONST Scolon 
            {
                XMLElement RESULT;
		Location Int0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Int0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Int0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador DECLARACIONES_INICIALES_AUX 
            {
                XMLElement RESULT;
		Location Char0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Char0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Char0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error ARRAY_AUX_CONST Scolon 
            {
                XMLElement RESULT;
		Location Void0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Void0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Void0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
                XMLElement RESULT;
		Location Scolon0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Scolon0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Scolon0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES_INICIALES_AUX ::= error Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
                XMLElement RESULT;
		Location GLOBALES0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location GLOBALES0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object GLOBALES0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location DECLARACION_FUNCION1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location DECLARACION_FUNCION1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object DECLARACION_FUNCION1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location MAIN2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location MAIN2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object MAIN2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Scolon3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Scolon3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Scolon3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MAIN ::= TIPO Main Parentesis_a Parentesis_c error Llave_c 
            {
                XMLElement RESULT;
		Location DECLARACION_FUNCION0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location DECLARACION_FUNCION0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object DECLARACION_FUNCION0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location MAIN1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location MAIN1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object MAIN1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Scolon2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Scolon2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Scolon2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MAIN ::= 
            {
                XMLElement RESULT;
		Location MAIN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location MAIN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object MAIN0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Scolon1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Scolon1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Scolon1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
                XMLElement RESULT;
		Location TIPO0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xleft;
		Location TIPO0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xright;
		Object TIPO0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Location Identificador1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location Identificador1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Object Identificador1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location Parentesis_a2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location Parentesis_a2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object Parentesis_a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Parentesis_c3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Parentesis_c3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Parentesis_c3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location Llave_a4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Llave_a4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Llave_a4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location SENTENCIA5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location SENTENCIA5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object SENTENCIA5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Llave_c6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Llave_c6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Llave_c6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
                XMLElement RESULT;
		Location DECLARACION_VAR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location DECLARACION_VAR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object DECLARACION_VAR0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Scolon1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Scolon1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Scolon1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location DECL_AUX2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location DECL_AUX2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object DECL_AUX2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
                XMLElement RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= WHILE DECL_AUX 
            {
                XMLElement RESULT;
		Location SENTENCIA0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location SENTENCIA0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object SENTENCIA0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
                XMLElement RESULT;
		Location TIPO0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location TIPO0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object TIPO0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Identificador1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Identificador1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Identificador1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location DECLARACION_VAR_AUX2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location DECLARACION_VAR_AUX2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object DECLARACION_VAR_AUX2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= FOR DECL_AUX 
            {
                XMLElement RESULT;
		Location Asignacion0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Asignacion0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Asignacion0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location EXP1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location EXP1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object EXP1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SW DECL_AUX 
            {
                XMLElement RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
                XMLElement RESULT;
		Location EXP0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location EXP0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object EXP0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location OPERADOR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location OPERADOR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object OPERADOR1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location EXP2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location EXP2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object EXP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
                XMLElement RESULT;
		Location Parentesis_a0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Parentesis_a0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Parentesis_a0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location EXP1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location EXP1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object EXP1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Parentesis_c2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Parentesis_c2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Parentesis_c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= Return Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION_VAR ::= Identificador Asignacion ARRAY_AUX_AUX Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION_VAR ::= Identificador Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_VAR ::= Const TIPO Identificador ARRAY_AUX_CONST Scolon DECLARACION_VAR 
            {
                XMLElement RESULT;
		Location Identificador0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Identificador0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Identificador0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_VAR ::= TIPO Identificador ARRAY_AUX Scolon DECLARACION_VAR 
            {
                XMLElement RESULT;
		Location Literal0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Literal0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Literal0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_VAR ::= 
            {
                XMLElement RESULT;
		Location Numero0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Numero0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Numero0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARRAY_AUX ::= Corchete_a EXP Corchete_c 
            {
                XMLElement RESULT;
		Location OPERADOR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location OPERADOR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object OPERADOR0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARRAY_AUX ::= Corchete_a Corchete_c 
            {
                XMLElement RESULT;
		Location Mas0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Mas0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Mas0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARRAY_AUX ::= error 
            {
                XMLElement RESULT;
		Location Menos0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Menos0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Menos0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARRAY_AUX ::= 
            {
                XMLElement RESULT;
		Location Timesslash0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Timesslash0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Timesslash0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARRAY_AUX_CONST ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARRAY_AUX_CONST ::= Corchete_a Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARRAY_AUX_CONST ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_FOR ::= error Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
